This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
app/
  components/
    AdvancedFilterModal.tsx
    Banner.jsx
    CategoryCard.jsx
    CategorySection.jsx
    CustomDrawerContent.tsx
    CustomHeader.tsx
    Header.jsx
  home/
    _layout.tsx
    cart.tsx
    index.tsx
    profile.tsx
    wishlist.tsx
  _layout.tsx
  address.tsx
  addressDetail.jsx
  categoryDetail.tsx
  checkout.tsx
  contact.tsx
  forgot-password.tsx
  help.tsx
  index.tsx
  login.tsx
  orderDetail.tsx
  orders.tsx
  OTPScreen.tsx
  payment.tsx
  privacy.tsx
  productDetail.tsx
  products.tsx
  profileDetail.tsx
  register.tsx
  reset-password.tsx
  reviews.tsx
  settings.tsx
axiosInstance/
  AxiosInstance.js
store/
  useAuth.ts
  useProducts.tsx
.gitignore
app.json
eslint.config.js
package.json
README.md
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/contact.tsx">
import { StyleSheet, Text, View, Image } from 'react-native'
import React from 'react'

const HelpScreen = () => {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Tính năng đang phát triển</Text>
      <Text style={styles.description}>
        Chúng tôi đang nỗ lực hoàn thiện tính năng này. Vui lòng quay lại sau!
      </Text>
    </View>
  )
}

export default HelpScreen

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 24,
    backgroundColor: '#fff',
  },
  image: {
    width: 200,
    height: 200,
    marginBottom: 24,
  },
  title: {
    fontSize: 20,
    fontWeight: '600',
    marginBottom: 12,
    color: '#333',
  },
  description: {
    fontSize: 14,
    textAlign: 'center',
    color: '#666',
  },
})
</file>

<file path="app/help.tsx">
import { StyleSheet, Text, View, Image } from 'react-native'
import React from 'react'

const HelpScreen = () => {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Tính năng đang phát triển</Text>
      <Text style={styles.description}>
        Chúng tôi đang nỗ lực hoàn thiện tính năng này. Vui lòng quay lại sau!
      </Text>
    </View>
  )
}

export default HelpScreen

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 24,
    backgroundColor: '#fff',
  },
  image: {
    width: 200,
    height: 200,
    marginBottom: 24,
  },
  title: {
    fontSize: 20,
    fontWeight: '600',
    marginBottom: 12,
    color: '#333',
  },
  description: {
    fontSize: 14,
    textAlign: 'center',
    color: '#666',
  },
})
</file>

<file path="app/privacy.tsx">
import { StyleSheet, Text, View, Image } from 'react-native'
import React from 'react'

const HelpScreen = () => {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Tính năng đang phát triển</Text>
      <Text style={styles.description}>
        Chúng tôi đang nỗ lực hoàn thiện tính năng này. Vui lòng quay lại sau!
      </Text>
    </View>
  )
}

export default HelpScreen

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 24,
    backgroundColor: '#fff',
  },
  image: {
    width: 200,
    height: 200,
    marginBottom: 24,
  },
  title: {
    fontSize: 20,
    fontWeight: '600',
    marginBottom: 12,
    color: '#333',
  },
  description: {
    fontSize: 14,
    textAlign: 'center',
    color: '#666',
  },
})
</file>

<file path="app/settings.tsx">
import { StyleSheet, Text, View, Image } from 'react-native'
import React from 'react'

const SettingScreen = () => {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Tính năng đang phát triển</Text>
      <Text style={styles.description}>
        Chúng tôi đang nỗ lực hoàn thiện tính năng này. Vui lòng quay lại sau!
      </Text>
    </View>
  )
}

export default SettingScreen

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 24,
    backgroundColor: '#fff',
  },
  image: {
    width: 200,
    height: 200,
    marginBottom: 24,
  },
  title: {
    fontSize: 20,
    fontWeight: '600',
    marginBottom: 12,
    color: '#333',
  },
  description: {
    fontSize: 14,
    textAlign: 'center',
    color: '#666',
  },
})
</file>

<file path="app/components/AdvancedFilterModal.tsx">
import React from 'react';
import {
  Modal,
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
} from 'react-native';
import Slider from '@react-native-community/slider'; // Updated import
import { Ionicons } from '@expo/vector-icons';

interface AdvancedFilterModalProps {
  visible: boolean;
  onClose: () => void;
  priceRange: [number, number];
  setPriceRange: (range: [number, number]) => void;
  selectedRating: number;
  setSelectedRating: (rating: number) => void;
  selectedCategory: string;
  setSelectedCategory: (category: string) => void;
  categories: { CategoryID: string; Name: string }[];
  onApplyFilters: () => void;
}

export default function AdvancedFilterModal({
  visible,
  onClose,
  priceRange,
  setPriceRange,
  selectedRating,
  setSelectedRating,
  selectedCategory,
  setSelectedCategory,
  categories,
  onApplyFilters,
}: AdvancedFilterModalProps) {
  return (
    <Modal
      animationType="slide"
      transparent={true}
      visible={visible}
      onRequestClose={onClose}
    >
      <View style={styles.modalContainer}>
        <View style={styles.modalContent}>
          <Text style={styles.modalTitle}>Lọc Nâng Cao</Text>

          {/* Lọc theo giá */}
          <Text style={styles.filterLabel}>Khoảng giá</Text>
          <View style={styles.priceRangeContainer}>
            <TextInput
              style={styles.priceInput}
              value={priceRange[0].toString()}
              onChangeText={(text) => setPriceRange([+text || 0, priceRange[1]])}
              keyboardType="numeric"
              placeholder="Giá tối thiểu"
            />
            <Text>-</Text>
            <TextInput
              style={styles.priceInput}
              value={priceRange[1].toString()}
              onChangeText={(text) => setPriceRange([priceRange[0], +text || 1000000])}
              keyboardType="numeric"
              placeholder="Giá tối đa"
            />
          </View>

          {/* Lọc theo đánh giá */}
          <Text style={styles.filterLabel}>Đánh giá tối thiểu</Text>
          <Slider
            style={styles.slider}
            minimumValue={0}
            maximumValue={5}
            step={1}
            value={selectedRating}
            onValueChange={setSelectedRating}
            minimumTrackTintColor="#8B4513"
            maximumTrackTintColor="#f0f0f0"
            thumbTintColor="#8B4513"
          />
          <Text style={styles.ratingText}>Đánh giá: {selectedRating} sao</Text>

          {/* Lọc theo danh mục */}
          <Text style={styles.filterLabel}>Danh mục</Text>
          <View style={styles.categoryContainer}>
            <TouchableOpacity
              style={[styles.categoryButton, !selectedCategory && styles.categoryButtonSelected]}
              onPress={() => setSelectedCategory('')}
            >
              <Text style={styles.categoryButtonText}>Tất cả</Text>
            </TouchableOpacity>
            {categories.map((category) => (
              <TouchableOpacity
                key={category.CategoryID}
                style={[
                  styles.categoryButton,
                  selectedCategory === category.CategoryID && styles.categoryButtonSelected,
                ]}
                onPress={() => setSelectedCategory(category.CategoryID)}
              >
                <Text style={styles.categoryButtonText}>{category.Name}</Text>
              </TouchableOpacity>
            ))}
          </View>

          {/* Nút áp dụng và đóng */}
          <View style={styles.buttonContainer}>
            <TouchableOpacity style={styles.applyButton} onPress={onApplyFilters}>
              <Text style={styles.applyButtonText}>Áp dụng</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.closeButton} onPress={onClose}>
              <Ionicons name="close" size={24} color="#fff" />
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
}

const styles = StyleSheet.create({
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalContent: {
    backgroundColor: '#fff',
    marginHorizontal: 20,
    padding: 20,
    borderRadius: 15,
    elevation: 5,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 20,
    textAlign: 'center',
  },
  filterLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 10,
  },
  priceRangeContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  priceInput: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 8,
    padding: 10,
    marginHorizontal: 5,
    fontSize: 14,
  },
  slider: {
    width: '100%',
    height: 40,
    marginBottom: 10,
  },
  ratingText: {
    fontSize: 14,
    color: '#333',
    textAlign: 'center',
    marginBottom: 20,
  },
  categoryContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: 20,
  },
  categoryButton: {
    backgroundColor: '#f0f0f0',
    paddingVertical: 8,
    paddingHorizontal: 15,
    borderRadius: 20,
    margin: 5,
  },
  categoryButtonSelected: {
    backgroundColor: '#8B4513',
  },
  categoryButtonText: {
    fontSize: 14,
    color: '#333',
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  applyButton: {
    backgroundColor: '#8B4513',
    paddingVertical: 12,
    paddingHorizontal: 30,
    borderRadius: 20,
    flex: 1,
    marginRight: 10,
    alignItems: 'center',
  },
  applyButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  closeButton: {
    backgroundColor: '#ccc',
    padding: 12,
    borderRadius: 20,
    alignItems: 'center',
  },
});
</file>

<file path="app/components/Banner.jsx">
import React from 'react';
import { Text, View, TouchableOpacity, Image, StyleSheet } from 'react-native';

const Banner = ({ onPress, fadeAnim }) => {
  return (
    <View style={[styles.bannerContainer, { opacity: fadeAnim }]}>
      <Image
        source={{ uri: 'https://media3.coolmate.me/cdn-cgi/image/width=672,height=990,quality=80,format=auto/uploads/January2024/AT.220.NAU.1.jpg' }}
        style={styles.bannerImage}
      />
      <View style={styles.bannerOverlay}>
        <Text style={styles.bannerTitle}>Khám phá phong cách đỉnh cao</Text>
        <Text style={styles.bannerSubtitle}>Ưu đãi độc quyền - Giảm 50% hôm nay!</Text>
        <TouchableOpacity style={styles.bannerButton} onPress={onPress}>
          <Text style={styles.bannerButtonText}>Mua sắm ngay</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  bannerContainer: {
    position: 'relative',
    height: 300,
    marginBottom: 20,
  },
  bannerImage: {
    width: '100%',
    height: '100%',
    resizeMode: 'cover',
  },
  bannerOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  bannerTitle: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#fff',
    textAlign: 'center',
    textShadowColor: '#000',
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 5,
  },
  bannerSubtitle: {
    fontSize: 18,
    color: '#fff',
    marginVertical: 10,
    textAlign: 'center',
  },
  bannerButton: {
    backgroundColor: '#d4af37',
    paddingHorizontal: 25,
    paddingVertical: 12,
    borderRadius: 30,
    elevation: 5,
  },
  bannerButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
});

export default Banner;
</file>

<file path="app/components/CustomHeader.tsx">
import React from 'react';
import { View, Text, Pressable, StyleSheet } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import type { DrawerNavigationProp } from '@react-navigation/drawer';
import { MaterialIcons } from '@expo/vector-icons';
import { Platform, StatusBar } from 'react-native';

type DrawerParamList = {
  index: undefined;
  profile: undefined;
  cart: undefined;      
  search: undefined;    
};

export default function CustomHeader() {
  const navigation = useNavigation<DrawerNavigationProp<DrawerParamList>>();

  return (
    <View style={styles.container}>
      <Pressable onPress={() => navigation.openDrawer()} style={styles.menuButton}>
        <MaterialIcons name="menu" size={28} color="black" />
      </Pressable>

      <View style={styles.logoContainer}>
        <Pressable onPress={() => navigation.navigate('index')}>
          <Text style={styles.logoText}>X Shop</Text>
        </Pressable>
      </View>

      <View style={styles.rightIcons}>
        <Pressable
          onPress={() => navigation.navigate('search')}
          style={{ marginRight: 16 }}
        >
          <MaterialIcons name="search" size={24} color="black" />
        </Pressable>

        <Pressable
          onPress={() => navigation.navigate('profile')}
          style={{ marginRight: 16 }}
        >
          <MaterialIcons name="person" size={24} color="black" />
        </Pressable>

        <Pressable
          onPress={() => navigation.navigate('cart')}
        >
          <MaterialIcons name="shopping-cart" size={24} color="black" />
        </Pressable>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 44,
    height: 56 + (Platform.OS === 'android' ? StatusBar.currentHeight ?? 0 : 44),
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#ddd',
    backgroundColor: '#fff',
  },
  menuButton: {
    padding: 4,
  },
  logoContainer: {
    flex: 1,
    alignItems: 'center',
  },
  logoText: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#000',
  },
  rightIcons: {
    flexDirection: 'row',
    alignItems: 'center',
  },
});
</file>

<file path="app/components/Header.jsx">
import React from 'react';
import { Text, View, TouchableOpacity, StyleSheet } from 'react-native';

const Header = ({ user, onLogout, style }) => {
  return (
    <View style={[styles.header, style]}>
      <Text style={styles.greeting}>Xin chào, {user?.username ?? 'bạn'}!</Text>
      <TouchableOpacity style={styles.logoutBtn} onPress={onLogout}>
        <Text style={styles.logoutText}>Đăng xuất</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  header: {
    backgroundColor: '#1a1a1a',
    padding: 20,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderBottomLeftRadius: 20,
    borderBottomRightRadius: 20,
    marginBottom: 10,
  },
  greeting: {
    fontSize: 28,
    color: '#d4af37',
    fontWeight: 'bold',
  },
  logoutBtn: {
    backgroundColor: '#c0392b',
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: '#fff',
  },
  logoutText: {
    color: '#fff',
    fontWeight: '600',
    fontSize: 16,
  },
});

export default Header;
</file>

<file path="app/address.tsx">
import React, { useState, useCallback } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView, Image, ActivityIndicator } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { router, useFocusEffect, useLocalSearchParams } from 'expo-router';
import AxiosInstance from '../axiosInstance/AxiosInstance';
import { useAuth } from '../store/useAuth';

const AddressScreen = () => {
  const { user } = useAuth();
  const { selectedProducts } = useLocalSearchParams();
  const products = selectedProducts ? JSON.parse(selectedProducts) : [];
  const [addresses, setAddresses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedAddress, setSelectedAddress] = useState(null);
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState(null);

  // Danh sách phương thức thanh toán
  const paymentMethods = [
    { id: 'cash', name: 'Tiền mặt khi nhận hàng', gateway: null },
    { id: 'credit_card', name: 'ZaloPay', gateway: 'Stripe' },
  ];

  // Lấy địa chỉ mỗi khi vào trang
  const fetchAddresses = useCallback(async () => {
    setLoading(true);
    try {
      if (!user?._id) {
        setAddresses([]);
        setLoading(false);
        return;
      }
      const res = await AxiosInstance().get(`/adress?userID=${user._id}`);
      console.log('Danh sách địa chỉ:', res);
      setAddresses(res || []);
      if (res && res.length > 0) {
        const defaultAddr = res.find(addr => addr.isDefault) || res[0];
        setSelectedAddress(defaultAddr);
      } else {
        setSelectedAddress(null);
      }
    } catch (err) {
      setAddresses([]);
      setSelectedAddress(null);
      console.log('Lỗi lấy địa chỉ:', err);
    } finally {
      setLoading(false);
    }
  }, [user]);

  useFocusEffect(
    useCallback(() => {
      fetchAddresses();
    }, [fetchAddresses])
  );

  const handleContinue = async () => {
    if (!selectedAddress) {
      alert('Vui lòng chọn địa chỉ giao hàng!');
      return;
    }
    if (products.length === 0) {
      alert('Không có sản phẩm nào được chọn!');
      return;
    }
    if (!selectedPaymentMethod) {
      alert('Vui lòng chọn phương thức thanh toán!');
      return;
    }

    try {
      // Tạo payload cho API /order/checkout
      const orderPayload = {
        userID: user._id,
        paymentInfo: {
          paymentMethod: selectedPaymentMethod.id === 'credit_card' ? 'Credit Card' : 'Cash', // Ánh xạ phương thức thanh toán
          status: 'Success', // Giả định trạng thái thanh toán thành công, điều chỉnh nếu cần
        },
        shippingAddress: selectedAddress.address,
        name: selectedAddress.name || 'Nguyễn Văn A', // Lấy từ địa chỉ được chọn
        sdt: selectedAddress.sdt || '0909123456', // Lấy từ địa chỉ được chọn
        items: products.map(item => ({
          variantID: item.productId || '683da229786c576173343562', // Sử dụng productId hoặc giá trị mặc định
          quantity: item.quantity || 1,
          price: item.price || 150000,
        })),
      };

      // Gửi yêu cầu POST đến /order/checkout
      const orderResponse = await AxiosInstance().post('/order/checkout', orderPayload);
      console.log('Phản hồi từ API /order/checkout:', orderResponse);

      // Điều hướng sang màn hình checkout với dữ liệu cần thiết
      router.push({
        pathname: '/checkout',
        params: {
          orderId: orderResponse._id || 'order_id', // Giả định API trả về _id
          selectedAddress: JSON.stringify(selectedAddress),
          selectedProducts: JSON.stringify(products),
        },
      });
    } catch (err) {
      console.log('Lỗi tạo đơn hàng:', err.response?.data || err.message);
      alert('Không thể tạo đơn hàng. Vui lòng thử lại.');
    }
  };

  return (
    <ScrollView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
          <Ionicons name="arrow-back" size={24} color="#2c2c2c" />
        </TouchableOpacity>
        <Text style={styles.title}>Xác nhận đơn hàng</Text>
        <View style={styles.placeholder} />
      </View>

      {/* Địa chỉ giao hàng */}
      <View style={styles.addressCard}>
        <Text style={styles.addressLabel}>Địa chỉ giao hàng</Text>
        {loading ? (
          <ActivityIndicator size="small" color="#8B5A2B" style={{ marginVertical: 8 }} />
        ) : !user?._id ? (
          <Text style={{ color: '#999' }}>Bạn cần đăng nhập để sử dụng chức năng này.</Text>
        ) : addresses.length === 0 ? (
          <Text style={{ color: '#999' }}>Chưa có địa chỉ. Vui lòng thêm mới!</Text>
        ) : (
          <>
            {addresses.map(addr => (
              <TouchableOpacity
                key={addr._id}
                style={[
                  styles.addressItem,
                  selectedAddress?._id === addr._id && styles.selectedAddress,
                ]}
                onPress={() => setSelectedAddress(addr)}
                activeOpacity={0.8}
              >
                <Ionicons
                  name={selectedAddress?._id === addr._id ? 'radio-button-on' : 'radio-button-off'}
                  size={18}
                  color={selectedAddress?._id === addr._id ? '#ee4d2d' : '#aaa'}
                  style={{ marginRight: 7 }}
                />
                <View style={{ flex: 1 }}>
                  <Text style={{ fontWeight: '600', color: '#2c2c2c' }}>
                    {addr.name || 'Tên người nhận'} | {addr.sdt}
                  </Text>
                  <Text style={{ color: '#666' }}>{addr.address}</Text>
                  {addr.isDefault && (
                    <Text style={{ fontSize: 12, color: '#27ae60' }}>[Mặc định]</Text>
                  )}
                </View>
              </TouchableOpacity>
            ))}
          </>
        )}
        <TouchableOpacity style={styles.addButton} onPress={() => router.push('/addressDetail')}>
          <Text style={styles.addText}>+ Thêm địa chỉ mới</Text>
        </TouchableOpacity>
      </View>

      {/* Phương thức thanh toán */}
      <View style={styles.addressCard}>
        <Text style={styles.addressLabel}>Phương thức thanh toán</Text>
        {paymentMethods.map(method => (
          <TouchableOpacity
            key={method.id}
            style={[
              styles.addressItem,
              selectedPaymentMethod?.id === method.id && styles.selectedAddress,
            ]}
            onPress={() => setSelectedPaymentMethod(method)}
            activeOpacity={0.8}
          >
            <Ionicons
              name={selectedPaymentMethod?.id === method.id ? 'radio-button-on' : 'radio-button-off'}
              size={18}
              color={selectedPaymentMethod?.id === method.id ? '#ee4d2d' : '#aaa'}
              style={{ marginRight: 7 }}
            />
            <View style={{ flex: 1 }}>
              <Text style={{ fontWeight: '600', color: '#2c2c2c' }}>{method.name}</Text>
            </View>
          </TouchableOpacity>
        ))}
      </View>

      {/* Section: Đơn hàng của bạn */}
      <View style={styles.orderSection}>
        <Text style={styles.sectionTitle}>Đơn hàng của bạn</Text>
        {products.length === 0 ? (
          <Text style={{ color: '#999', padding: 15 }}>Không có sản phẩm nào được chọn.</Text>
        ) : (
          products.map((item, index) => (
            <View key={index} style={styles.orderItem}>
              <Image
                source={{ uri: item.image || 'https://via.placeholder.com/80x80?text=Product' }}
                style={styles.itemImage}
              />
              <View style={styles.itemDetails}>
                <Text style={styles.itemName}>{item.name || 'Tên sản phẩm'}</Text>
                <Text style={styles.itemSize}>
                  Màu: {item.color || 'N/A'} | Size: {item.size || 'N/A'} | Số lượng: {item.quantity || 1}
                </Text>
                <Text style={styles.itemPrice}>
                  {(item.price * item.quantity || 0).toLocaleString('vi-VN')}đ
                </Text>
              </View>
            </View>
          ))
        )}
      </View>

      {/* Nút tiếp tục */}
      <TouchableOpacity style={styles.continueButton} onPress={handleContinue}>
        <Text style={styles.continueText}>Tiếp tục thanh toán</Text>
      </TouchableOpacity>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: '#f0f2f5' },
  header: { flexDirection: 'row', alignItems: 'center', marginBottom: 20 },
  backButton: { padding: 5 },
  title: { fontSize: 24, fontWeight: '700', color: '#1a1a1a', flex: 1, textAlign: 'center' },
  placeholder: { width: 24 },
  addressCard: { backgroundColor: '#fff', padding: 15, borderRadius: 15, marginBottom: 15, elevation: 3 },
  addressLabel: { fontSize: 16, fontWeight: '600', color: '#2c2c2c', marginBottom: 5 },
  addressItem: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fafafa',
    borderRadius: 10,
    padding: 10,
    marginBottom: 7,
    borderWidth: 1,
    borderColor: '#eee',
  },
  selectedAddress: {
    borderColor: '#ee4d2d',
    backgroundColor: '#fff6f2',
  },
  addButton: { backgroundColor: '#f0f2f5', padding: 10, borderRadius: 10, alignItems: 'center', marginTop: 7 },
  addText: { fontSize: 14, color: '#8B5A2B', fontWeight: '600' },
  orderSection: { marginBottom: 15 },
  sectionTitle: { fontSize: 18, fontWeight: '700', color: '#1a1a1a', marginBottom: 10 },
  orderItem: { flexDirection: 'row', backgroundColor: '#fff', padding: 15, borderRadius: 15, marginBottom: 10, elevation: 3, alignItems: 'center' },
  itemImage: { width: 60, height: 60, resizeMode: 'cover', borderRadius: 10 },
  itemDetails: { flex: 1, marginLeft: 15 },
  itemName: { fontSize: 16, fontWeight: '600', color: '#2c2c2c' },
  itemSize: { fontSize: 14, color: '#666', marginTop: 5 },
  itemPrice: { fontSize: 14, color: '#c0392b', fontWeight: '700', marginTop: 5 },
  continueButton: { backgroundColor: '#8B5A2B', padding: 15, borderRadius: 12, alignItems: 'center', marginTop: 10 },
  continueText: { color: '#fff', fontSize: 16, fontWeight: '600' },
});

export default AddressScreen;
</file>

<file path="app/addressDetail.jsx">
import AxiosInstance from '../axiosInstance/AxiosInstance';
import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView, TextInput, Modal, Alert } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { router } from 'expo-router';
import { useAuth } from '../store/useAuth';

const AddressScreen = () => {
  const { user } = useAuth(); // Lấy thông tin user từ useAuth
  const userID = user?._id; // Lấy userID từ user._id
  const [addresses, setAddresses] = useState([]); // Lưu dữ liệu từ API
  const [selectedAddress, setSelectedAddress] = useState(null); // Theo dõi địa chỉ được chọn
  const [loading, setLoading] = useState(true); // Trạng thái tải
  const [error, setError] = useState(null); // Trạng thái lỗi
  const [modalVisible, setModalVisible] = useState(false); // Điều khiển modal
  const [isEditMode, setIsEditMode] = useState(false); // Phân biệt thêm mới hay chỉnh sửa
  const [currentAddress, setCurrentAddress] = useState({
    _id: '',
    name: '',
    address: '',
    sdt: '',
    isDefault: false,
  }); // Lưu dữ liệu địa chỉ đang chỉnh sửa/thêm mới

  // Gọi API để lấy danh sách địa chỉ
  useEffect(() => {
    if (!userID) {
      setError('Không tìm thấy thông tin người dùng. Vui lòng đăng nhập lại.');
      setLoading(false);
      return;
    }

    const fetchAddresses = async () => {
      try {
        setLoading(true);
        const response = await AxiosInstance().get(`/adress?userID=${userID}`);
        console.log('API Response:', response); // Log để kiểm tra

        if (Array.isArray(response)) {
          setAddresses(response);
          const defaultAddress = response.find((addr) => addr.isDefault);
          if (defaultAddress) {
            setSelectedAddress(defaultAddress._id);
          }
        } else {
          throw new Error('Dữ liệu API không phải mảng');
        }
        setLoading(false);
      } catch (err) {
        console.error('Lỗi khi tải địa chỉ:', err.message);
        setError('Không thể tải danh sách địa chỉ. Vui lòng thử lại.');
        setLoading(false);
      }
    };

    fetchAddresses();
  }, [userID]);

  // Mở modal để thêm địa chỉ mới
  const openAddModal = () => {
    setIsEditMode(false);
    setCurrentAddress({ _id: '', name: '', address: '', sdt: '', isDefault: false });
    setModalVisible(true);
  };

  // Mở modal để chỉnh sửa địa chỉ
  const openEditModal = (address) => {
    setIsEditMode(true);
    setCurrentAddress({
      _id: address._id,
      name: address.name,
      address: address.address,
      sdt: address.sdt,
      isDefault: address.isDefault,
    });
    setModalVisible(true);
  };

  // Xử lý thêm hoặc cập nhật địa chỉ
  const handleSaveAddress = async () => {
    if (!currentAddress.name || !currentAddress.address || !currentAddress.sdt) {
      Alert.alert('Lỗi', 'Vui lòng nhập đầy đủ thông tin: Tên, địa chỉ, số điện thoại.');
      return;
    }

    try {
      const payload = {
        userID,
        name: currentAddress.name,
        address: currentAddress.address,
        sdt: currentAddress.sdt,
        isDefault: currentAddress.isDefault,
      };

      if (isEditMode) {
        // Cập nhật địa chỉ
        const response = await AxiosInstance().put(`/adress/${currentAddress._id}`, payload);
        console.log('Cập nhật địa chỉ thành công:', response);
        setAddresses((prev) =>
          prev.map((addr) =>
            addr._id === response._id
              ? response
              : currentAddress.isDefault
              ? { ...addr, isDefault: false }
              : addr
          )
        );
        if (currentAddress.isDefault) {
          setSelectedAddress(response._id);
        }
      } else {
        // Thêm địa chỉ mới
        const response = await AxiosInstance().post('/adress', payload);
        console.log('Thêm địa chỉ thành công:', response);
        setAddresses((prev) => [...prev, response]);
        if (currentAddress.isDefault) {
          setSelectedAddress(response._id);
          setAddresses((prev) =>
            prev.map((addr) =>
              addr._id === response._id ? addr : { ...addr, isDefault: false }
            )
          );
        }
      }

      setModalVisible(false);
      setCurrentAddress({ _id: '', name: '', address: '', sdt: '', isDefault: false });
      Alert.alert('Thành công', isEditMode ? 'Đã cập nhật địa chỉ!' : 'Đã thêm địa chỉ mới!');
    } catch (err) {
      console.error(`Lỗi khi ${isEditMode ? 'cập nhật' : 'thêm'} địa chỉ:`, err.message);
      Alert.alert('Lỗi', `Không thể ${isEditMode ? 'cập nhật' : 'thêm'} địa chỉ. Vui lòng thử lại.`);
    }
  };

  const goBack = () => {
    router.back();
  };

 

  const handleSelectAddress = (addressId) => {
    setSelectedAddress(addressId);
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={goBack} style={styles.backButton}>
          <Ionicons name="arrow-back" size={24} color="#2c2c2c" />
        </TouchableOpacity>
        <Text style={styles.title}>Địa chỉ</Text>
        <View style={styles.placeholder} />
      </View>

      {loading ? (
        <Text style={styles.loadingText}>Đang tải...</Text>
      ) : error ? (
        <Text style={styles.errorText}>{error}</Text>
      ) : addresses.length === 0 ? (
        <Text style={styles.noDataText}>Không tìm thấy địa chỉ nào.</Text>
      ) : (
        <View style={styles.addressCard}>
          {addresses.map((address) => (
            <TouchableOpacity
              key={address._id}
              style={styles.addressItem}
              onPress={() => handleSelectAddress(address._id)}
            >
              <Ionicons
                name={selectedAddress === address._id ? 'radio-button-on' : 'radio-button-off'}
                size={20}
                color={selectedAddress === address._id ? '#8B5A2B' : '#666'}
                style={styles.radioIcon}
              />
              <View style={styles.addressDetails}>
                <Text style={styles.addressLabel}>
                  {address.name || 'Không có tên'}
                  {address.isDefault && (
                    <Text style={styles.defaultTag}> (Mặc định)</Text>
                  )}
                </Text>
                <Text style={styles.addressValue}>{address.address || 'Không có địa chỉ'}</Text>
                <Text style={styles.phoneValue}>SĐT: {address.sdt || 'Không có số điện thoại'}</Text>
              </View>
              <TouchableOpacity onPress={() => openEditModal(address)}>
                <Ionicons name="ellipsis-vertical" size={20} color="#666" />
              </TouchableOpacity>
            </TouchableOpacity>
          ))}
          
        </View>
      )}
      <TouchableOpacity style={styles.addButton} onPress={openAddModal}>
            <Text style={styles.addText}>+ Thêm địa chỉ mới</Text>
          </TouchableOpacity>

      {/* Modal để thêm hoặc chỉnh sửa địa chỉ */}
      <Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        onRequestClose={() => setModalVisible(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>
              {isEditMode ? 'Chỉnh sửa địa chỉ' : 'Thêm địa chỉ mới'}
            </Text>
            <TextInput
              style={styles.input}
              placeholder="Tên (ví dụ: Nguyễn Văn A)"
              value={currentAddress.name}
              onChangeText={(text) => setCurrentAddress({ ...currentAddress, name: text })}
            />
            <TextInput
              style={styles.input}
              placeholder="Địa chỉ (ví dụ: 123 Lê Văn Sỹ, Q3)"
              value={currentAddress.address}
              onChangeText={(text) => setCurrentAddress({ ...currentAddress, address: text })}
            />
            <TextInput
              style={styles.input}
              placeholder="Số điện thoại (ví dụ: 0909123456)"
              value={currentAddress.sdt}
              onChangeText={(text) => setCurrentAddress({ ...currentAddress, sdt: text })}
              keyboardType="phone-pad"
            />
            <View style={styles.checkboxContainer}>
              <TouchableOpacity
                onPress={() =>
                  setCurrentAddress({ ...currentAddress, isDefault: !currentAddress.isDefault })
                }
                style={styles.checkbox}
              >
                <Ionicons
                  name={currentAddress.isDefault ? 'checkbox' : 'checkbox-outline'}
                  size={20}
                  color="#8B5A2B"
                />
                <Text style={styles.checkboxLabel}>Đặt làm địa chỉ mặc định</Text>
              </TouchableOpacity>
            </View>
            <View style={styles.modalButtons}>
              <TouchableOpacity
                style={[styles.modalButton, styles.cancelButton]}
                onPress={() => setModalVisible(false)}
              >
                <Text style={styles.modalButtonText}>Hủy</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.modalButton, styles.confirmButton]}
                onPress={handleSaveAddress}
              >
                <Text style={styles.modalButtonText}>{isEditMode ? 'Cập nhật' : 'Thêm'}</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: '#f0f2f5' },
  header: { flexDirection: 'row', alignItems: 'center', marginBottom: 20 },
  backButton: { padding: 5 },
  title: { fontSize: 24, fontWeight: '700', color: '#1a1a1a', flex: 1, textAlign: 'center' },
  placeholder: { width: 24 },
  addressCard: { backgroundColor: '#fff', padding: 15, borderRadius: 15, marginBottom: 15, elevation: 3 },
  addressItem: { flexDirection: 'row', alignItems: 'center', paddingVertical: 10, borderBottomWidth: 1, borderBottomColor: '#eee' },
  radioIcon: { marginRight: 10 },
  addressDetails: { flex: 1 },
  addressLabel: { fontSize: 16, fontWeight: '600', color: '#2c2c2c' },
  defaultTag: { fontSize: 12, color: '#8B5A2B', fontWeight: '400' },
  addressValue: { fontSize: 14, color: '#666', marginTop: 2 },
  phoneValue: { fontSize: 14, color: '#666', marginTop: 2 },
  addButton: { backgroundColor: '#f0f2f5', padding: 10, borderRadius: 10, alignItems: 'center', marginTop: 10 },
  addText: { fontSize: 14, color: '#8B5A2B', fontWeight: '600' },
  applyButton: { backgroundColor: '#8B5A2B', padding: 15, borderRadius: 12, alignItems: 'center', marginTop: 10 },
  applyText: { color: '#fff', fontSize: 16, fontWeight: '600' },
  loadingText: { fontSize: 16, color: '#666', textAlign: 'center', marginTop: 20 },
  errorText: { fontSize: 16, color: 'red', textAlign: 'center', marginTop: 20 },
  noDataText: { fontSize: 16, color: '#666', textAlign: 'center', marginTop: 20 },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalContent: {
    backgroundColor: '#fff',
    marginHorizontal: 20,
    padding: 20,
    borderRadius: 15,
    elevation: 5,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: '#1a1a1a',
    marginBottom: 20,
    textAlign: 'center',
  },
  input: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 10,
    padding: 10,
    marginBottom: 15,
    fontSize: 16,
    color: '#2c2c2c',
  },
  checkboxContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 20,
  },
  checkbox: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  checkboxLabel: {
    fontSize: 16,
    color: '#2c2c2c',
    marginLeft: 10,
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  modalButton: {
    flex: 1,
    padding: 15,
    borderRadius: 10,
    alignItems: 'center',
    marginHorizontal: 5,
  },
  cancelButton: {
    backgroundColor: '#f0f2f5',
  },
  confirmButton: {
    backgroundColor: '#8B5A2B',
  },
  modalButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#fff',
  },
});

export default AddressScreen;
</file>

<file path="app/categoryDetail.tsx">
import React, { useEffect } from 'react';
import { View, Text, StyleSheet, FlatList, TouchableOpacity, Image } from 'react-native';
import { useProducts } from '../store/useProducts';
import { router } from 'expo-router';
import { MaterialIcons } from '@expo/vector-icons';

const CategoryScreen = () => {
  const { categories, fetchCategories, loading } = useProducts();

  useEffect(() => {
    fetchCategories();
  }, []);

  const renderItem = ({ item }) => (
    <TouchableOpacity
      style={styles.categoryCard}
      onPress={() => router.push({ pathname: './products', params: { categoryId: item.CategoryID } })}
    >
      <View style={styles.iconWrapper}>
        <Image
          source={{
            uri: 'https://via.placeholder.com/80/eee?text=' + encodeURIComponent(item.Name),
          }}
          style={styles.categoryIcon}
        />
      </View>
      <Text style={styles.categoryName}>{item.Name}</Text>
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      {/* HEADER with Back Button */}
      <View style={styles.header}>
        <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>
          <MaterialIcons name="arrow-back" size={26} color="#222" />
        </TouchableOpacity>
        <Text style={styles.title}>Danh mục sản phẩm</Text>
      </View>
      <FlatList
        data={categories}
        renderItem={renderItem}
        keyExtractor={item => item.CategoryID}
        numColumns={2}
        columnWrapperStyle={{ justifyContent: 'space-between' }}
        contentContainerStyle={{ padding: 15 }}
        ListEmptyComponent={loading ? <Text>Đang tải...</Text> : <Text>Không có danh mục.</Text>}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff', marginTop : 20 },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 10,
    height: 56,
    borderBottomWidth: 1,
    borderBottomColor: '#f2f2f2',
    backgroundColor: '#fff',
  },
  backButton: {
    padding: 5,
    marginRight: 8,
  },
  title: { fontSize: 22, fontWeight: 'bold', color: '#222' },
  categoryCard: {
    backgroundColor: '#f9f6f1',
    borderRadius: 12,
    alignItems: 'center',
    marginBottom: 18,
    padding: 14,
    flex: 1,
    marginHorizontal: 5,
  },
  iconWrapper: { marginBottom: 8 },
  categoryIcon: { width: 70, height: 70, borderRadius: 35 },
  categoryName: { fontSize: 15, fontWeight: '500', color: '#633' },
});

export default CategoryScreen;
</file>

<file path="app/checkout.tsx">
// app/home/checkout.tsx
import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView, ActivityIndicator } from 'react-native';
import { router } from 'expo-router';
import { useProducts } from '../store/useProducts';

const Checkout = () => {
  const { cart, loading, error } = useProducts();

  const handlePlaceOrder = () => {
    // TODO: Gọi API để tạo đơn hàng
    router.push('./orders');
  };

  const total = cart.reduce((sum, item) => {
    const price = parseFloat(item.Price.replace(' VNĐ', '').replace('.', '')) * item.Quantity;
    return sum + price;
  }, 0);

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#d4af37" />
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Thanh toán</Text>
      {cart.length === 0 ? (
        <Text style={styles.emptyText}>Giỏ hàng trống</Text>
      ) : (
        cart.map((item) => (
          <View key={item.CartID} style={styles.card}>
            <Text style={styles.name}>{item.Name}</Text>
            <Text style={styles.price}>
              {item.Price} x {item.Quantity}
            </Text>
          </View>
        ))
      )}
      {cart.length > 0 && (
        <>
          <View style={styles.summary}>
            <Text style={styles.summaryText}>Tổng cộng: {total.toLocaleString()} VNĐ</Text>
          </View>
          <TouchableOpacity style={styles.button} onPress={handlePlaceOrder}>
            <Text style={styles.buttonText}>Đặt hàng</Text>
          </TouchableOpacity>
        </>
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10, backgroundColor: '#f0f2f5' },
  title: { fontSize: 24, fontWeight: '800', margin: 10, color: '#1a1a1a' },
  card: { backgroundColor: '#fff', padding: 10, marginBottom: 10, borderRadius: 15, elevation: 5 },
  name: { fontSize: 16, fontWeight: '600', color: '#2c2c2c' },
  price: { fontSize: 14, color: '#c0392b', fontWeight: '700' },
  summary: { padding: 10, borderTopWidth: 1, borderTopColor: '#ccc', marginTop: 10 },
  summaryText: { fontSize: 18, fontWeight: '700', color: '#1a1a1a' },
  button: { backgroundColor: '#d4af37', padding: 12, borderRadius: 12, alignItems: 'center', margin: 10 },
  buttonText: { color: '#fff', fontSize: 16, fontWeight: '600' },
  emptyText: { fontSize: 16, color: '#2c2c2c', textAlign: 'center', marginTop: 20 },
  errorText: { fontSize: 16, color: '#c0392b', textAlign: 'center', marginTop: 20 },
});

export default Checkout;
</file>

<file path="app/orderDetail.tsx">
import React from 'react';
import { View, Text, StyleSheet, ScrollView, Image, TouchableOpacity } from 'react-native';
import { useLocalSearchParams } from 'expo-router';
import { Ionicons } from '@expo/vector-icons'; // Thêm icon cho nút Back
import { router } from 'expo-router';
const OrderDetail = () => {
  const { orderId } = useLocalSearchParams();

  // Dữ liệu mẫu để khớp với hình ảnh
  const sampleOrderDetails = [
    {
      OrderDetailID: 1,
      OrderID: orderId || 1,
      Image: 'https://example.com/brown_suit.jpg',
      Name: 'Brown Suit',
      Price: '$120.00',
      Quantity: 1,
      PaymentMethod: 'CARD',
      OrderDate: '25/05/2025',
      OrderCode: 'TRK452162442',
      Timeline: [
        { status: 'Đơn hàng đã đặt', date: '23/05/2025', time: '04:25 PM', icon: 'cart' },
        { status: 'Đang liên hệ', date: '23/05/2025', time: '04:25 PM', icon: 'call' },
        { status: 'Đã xuất vận chuyển', date: '23/05/2025', time: '04:25 PM', icon: 'cube' },
        { status: 'Giao hàng thành công', date: '23/05/2025', time: '04:25 PM', icon: 'checkmark-circle' },
      ],
    },
  ];

  const goBack = () => {
    router.back();
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={goBack} style={styles.backButton}>
          <Ionicons name="arrow-back" size={24} color="#2c2c2c" />
        </TouchableOpacity>
        <Text style={styles.title}>Chi tiết đơn hàng</Text>
        <View style={styles.placeholder} />
      </View>
      {sampleOrderDetails.map((detail) => (
        <View key={detail.OrderDetailID}>
          <View style={styles.productCard}>
            <Image source={{ uri: detail.Image }} style={styles.productImage} />
            <View style={styles.productInfo}>
              <Text style={styles.productName}>{detail.Name}</Text>
              <Text style={styles.productPrice}>{detail.Price}</Text>
            </View>
          </View>
          <View style={styles.infoCard}>
            <Text style={styles.infoLabel}>Ngày đặt hàng</Text>
            <Text style={styles.infoValue}>{detail.OrderDate}</Text>
            <Text style={styles.infoLabel}>Mã đơn hàng</Text>
            <Text style={styles.infoValue}>{detail.OrderCode}</Text>
          </View>
          <Text style={styles.sectionTitle}>Trạng thái đơn hàng</Text>
          <View style={styles.timelineContainer}>
            {detail.Timeline.map((step, index) => (
              <View key={index} style={styles.timelineItem}>
                <View style={styles.timelineIcon}>
                  <Ionicons
                    name={step.icon}
                    size={20}
                    color={index === detail.Timeline.length - 1 ? '#28A745' : '#666'}
                  />
                  {index < detail.Timeline.length - 1 && (
                    <View style={styles.timelineLine} />
                  )}
                </View>
                <View style={styles.timelineDetails}>
                  <Text style={styles.timelineStatus}>{step.status}</Text>
                  <Text style={styles.timelineDate}>{step.date}, {step.time}</Text>
                </View>
              </View>
            ))}
          </View>
        </View>
      ))}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: '#f0f2f5' },
  header: { flexDirection: 'row', alignItems: 'center', marginBottom: 20 },
  backButton: { padding: 5 },
  title: { fontSize: 24, fontWeight: '700', color: '#1a1a1a', flex: 1, textAlign: 'center' },
  placeholder: { width: 24 },
  productCard: { flexDirection: 'row', backgroundColor: '#fff', padding: 15, borderRadius: 15, marginBottom: 15, elevation: 3 },
  productImage: { width: 80, height: 80, resizeMode: 'cover', borderRadius: 10 },
  productInfo: { marginLeft: 15, flex: 1 },
  productName: { fontSize: 16, fontWeight: '600', color: '#2c2c2c' },
  productPrice: { fontSize: 14, color: '#c0392b', fontWeight: '700', marginTop: 5 },
  infoCard: { backgroundColor: '#fff', padding: 15, borderRadius: 15, marginBottom: 15, elevation: 3 },
  infoLabel: { fontSize: 16, fontWeight: '600', color: '#2c2c2c' },
  infoValue: { fontSize: 16, color: '#666', marginBottom: 10 },
  sectionTitle: { fontSize: 18, fontWeight: '700', color: '#1a1a1a', marginVertical: 10 },
  timelineContainer: { backgroundColor: '#fff', padding: 15, borderRadius: 15, elevation: 3 },
  timelineItem: { flexDirection: 'row', marginBottom: 15 },
  timelineIcon: { alignItems: 'center', marginRight: 15 },
  timelineLine: { width: 2, height: 30, backgroundColor: '#e0e0e0', position: 'absolute', top: 30, zIndex: -1 },
  timelineDetails: { flex: 1 },
  timelineStatus: { fontSize: 16, fontWeight: '600', color: '#2c2c2c' },
  timelineDate: { fontSize: 14, color: '#666', marginTop: 5 },
});

export default OrderDetail;
</file>

<file path="app/OTPScreen.tsx">
import { router, useLocalSearchParams } from 'expo-router';
import { useState } from 'react';
import { Alert, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';
import AxiosInstance from '../axiosInstance/AxiosInstance';
import { useAuth } from '../store/useAuth';

export default function OTPScreen() {
  const [otp, setOtp] = useState('');
  const [loading, setLoading] = useState(false);
  const { phone } = useLocalSearchParams();
  const { login } = useAuth();

  const handleVerifyOTP = async () => {
    if (otp === '') {
      Alert.alert('Lỗi', 'Vui lòng nhập mã OTP');
      return;
    }

    if (otp.length !== 6) {
      Alert.alert('Lỗi', 'Mã OTP phải có 6 chữ số');
      return;
    }

    setLoading(true);
    try {
      const response = await AxiosInstance().post('/users/login', {
        phone,
        otp,
      });

      if (response.message === 'Đăng nhập thành công') {
        await login(response.user);
        router.replace('/home');
      } else {
        Alert.alert('Lỗi', response.message || 'Xác minh OTP thất bại');
      }
    } catch (error) {
      Alert.alert('Lỗi', 'Xác minh OTP thất bại. Vui lòng kiểm tra lại mã OTP.');
    } finally {
      setLoading(false);
    }
  };

  const handleResendOTP = async () => {
    setLoading(true);
    try {
      const response = await AxiosInstance().post('/users/send-otp', {
        phone,
      });

      if (response.message === 'Mã OTP đã được gửi đến số điện thoại') {
        Alert.alert('Thành công', 'Mã OTP mới đã được gửi');
      } else {
        Alert.alert('Lỗi', response.message || 'Không thể gửi mã OTP');
      }
    } catch (error) {
      Alert.alert('Lỗi', 'Có lỗi xảy ra. Vui lòng thử lại.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Xác minh OTP</Text>
      <Text style={styles.subtitle}>
        Nhập mã OTP được gửi đến số điện thoại {phone}
      </Text>

      <View style={styles.inputWrapper}>
        <TextInput
          placeholder="Mã OTP"
          value={otp}
          onChangeText={setOtp}
          style={styles.input}
          placeholderTextColor="#999"
          keyboardType="numeric"
          maxLength={6}
        />
      </View>

      <TouchableOpacity
        style={[styles.verifyBtn, loading && styles.disabledBtn]}
        onPress={handleVerifyOTP}
        disabled={loading}
        activeOpacity={0.8}
      >
        <Text style={styles.verifyText}>{loading ? 'Đang xác minh...' : 'Xác minh'}</Text>
      </TouchableOpacity>

      <TouchableOpacity onPress={handleResendOTP} style={styles.resendBtn}>
        <Text style={styles.resendText}>Gửi lại mã OTP</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 24,
    justifyContent: 'center',
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    textAlign: 'center',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    marginBottom: 40,
  },
  inputWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F5F5F5',
    borderRadius: 10,
    paddingHorizontal: 16,
    paddingVertical: 12,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  input: {
    flex: 1,
    fontSize: 16,
    color: '#333',
  },
  verifyBtn: {
    backgroundColor: '#8B4513',
    paddingVertical: 14,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 20,
  },
  disabledBtn: {
    backgroundColor: '#A9A9A9',
  },
  verifyText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
  resendBtn: {
    alignItems: 'center',
  },
  resendText: {
    color: '#666',
    fontSize: 14,
    textDecorationLine: 'underline',
  },
});
</file>

<file path="app/payment.tsx">
import { StyleSheet, Text, View, Image } from 'react-native'
import React from 'react'

const Payment = () => {
  return (
    <View style={styles.container}>
     
      <Text style={styles.title}>Tính năng đang phát triển</Text>
      <Text style={styles.description}>
        Chúng tôi đang nỗ lực hoàn thiện tính năng này. Vui lòng quay lại sau!
      </Text>
    </View>
  )
}

export default Payment

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 24,
    backgroundColor: '#fff',
  },
  image: {
    width: 200,
    height: 200,
    marginBottom: 24,
  },
  title: {
    fontSize: 20,
    fontWeight: '600',
    marginBottom: 12,
    color: '#333',
  },
  description: {
    fontSize: 14,
    textAlign: 'center',
    color: '#666',
  },
})
</file>

<file path="app/reviews.tsx">
import React, { useState, useEffect } from 'react';
import { ActivityIndicator, ScrollView, StyleSheet, Text, TextInput, TouchableOpacity, View, Image } from 'react-native';
import { Ionicons } from '@expo/vector-icons'; // Thêm icon cho nút Back
import { router } from 'expo-router';
const Reviews = () => {
  const [rating, setRating] = useState(0);
  const [comment, setComment] = useState('');
  const [reviews, setReviews] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchReviews = async () => {
      setLoading(true);
      try {
        // Dữ liệu mẫu để khớp với hình ảnh
        const sampleReviews = [
          {
            ReviewID: 1,
            Image: 'https://example.com/brown_jacket.jpg',
            Name: 'Brown Jacket',
            Price: '$39.97',
            Rating: 4,
            Comment: 'Sản phẩm đẹp, giao hàng nhanh.',
            CommentDate: '01/06/2025',
          },
        ];
        setReviews(sampleReviews);
      } catch (err) {
        console.error('Error fetching reviews:', err);
        setError('Không thể tải đánh giá. Vui lòng thử lại sau.');
        setReviews([]);
      } finally {
        setLoading(false);
      }
    };
    fetchReviews();
  }, []);

  const handleSubmit = () => {
    // TODO: Gọi API để gửi đánh giá
    console.log({ rating, comment });
  };

  const goBack = () => {
    // TODO: Quay lại màn hình trước
    router.back();
  };

  const renderStars = () => {
    const stars = [];
    for (let i = 1; i <= 5; i++) {
      stars.push(
        <Ionicons
          key={i}
          name={i <= rating ? 'star' : 'star-outline'}
          size={24}
          color="#FFD700"
          onPress={() => setRating(i)}
        />
      );
    }
    return stars;
  };

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#d4af37" />
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={goBack} style={styles.backButton}>
          <Ionicons name="arrow-back" size={24} color="#2c2c2c" />
        </TouchableOpacity>
        <Text style={styles.title}>Đánh giá</Text>
        <View style={styles.placeholder} />
      </View>
      {reviews.length > 0 && reviews.map((review) => (
        <View key={review.ReviewID} style={styles.productCard}>
          <Image source={{ uri: review.Image }} style={styles.productImage} />
          <View style={styles.productInfo}>
            <Text style={styles.productName}>{review.Name}</Text>
            <Text style={styles.productPrice}>{review.Price} | 1 sản phẩm</Text>
          </View>
          <TouchableOpacity style={styles.editButton}>
            <Text style={styles.editText}>bắt đầu đánh giá</Text>
          </TouchableOpacity>
        </View>
      ))}
      <Text style={styles.question}>Đơn hàng này hài lòng?</Text>
      <View style={styles.starContainer}>{renderStars()}</View>
      <Text style={styles.commentLabel}>Thêm nhận xét của bạn</Text>
      <TextInput
        style={styles.input}
        placeholder="Nhập nhận xét"
        value={comment}
        onChangeText={setComment}
        multiline
      />
      <View style={styles.buttonContainer}>
        <TouchableOpacity style={styles.cancelButton} onPress={goBack}>
          <Text style={styles.cancelText}>Thoát</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.submitButton} onPress={handleSubmit}>
          <Text style={styles.submitText}>Gửi</Text>
        </TouchableOpacity>
      </View>
      {reviews.length > 0 && (
        <View style={styles.reviewSection}>
          <Text style={styles.reviewSectionTitle}>Đánh giá từ Insightlancer</Text>
          {reviews.map((review) => (
            <View key={review.ReviewID} style={styles.reviewCard}>
              <View style={styles.reviewHeader}>
                <Text style={styles.reviewRating}>{review.Rating}/5</Text>
                <View style={styles.reviewStars}>
                  {Array.from({ length: 5 }, (_, i) => (
                    <Ionicons
                      key={i}
                      name={i < review.Rating ? 'star' : 'star-outline'}
                      size={16}
                      color="#FFD700"
                    />
                  ))}
                </View>
              </View>
              <Text style={styles.reviewComment}>{review.Comment}</Text>
              <Text style={styles.reviewDate}>{review.CommentDate}</Text>
            </View>
          ))}
        </View>
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: '#f0f2f5' },
  header: { flexDirection: 'row', alignItems: 'center', marginBottom: 20 },
  backButton: { padding: 5 },
  title: { fontSize: 24, fontWeight: '700', color: '#1a1a1a', flex: 1, textAlign: 'center' },
  placeholder: { width: 24 },
  productCard: { flexDirection: 'row', backgroundColor: '#fff', padding: 15, borderRadius: 15, marginBottom: 15, alignItems: 'center', elevation: 3 },
  productImage: { width: 60, height: 60, resizeMode: 'cover', borderRadius: 10 },
  productInfo: { flex: 1, marginLeft: 15 },
  productName: { fontSize: 16, fontWeight: '600', color: '#2c2c2c' },
  productPrice: { fontSize: 14, color: '#666', marginTop: 5 },
  editButton: { backgroundColor: '#f0f2f5', padding: 5, borderRadius: 10 },
  editText: { fontSize: 12, color: '#8B5A2B', fontWeight: '600' },
  question: { fontSize: 18, fontWeight: '600', color: '#1a1a1a', marginBottom: 10 },
  starContainer: { flexDirection: 'row', marginBottom: 15 },
  commentLabel: { fontSize: 16, fontWeight: '600', color: '#2c2c2c', marginBottom: 5 },
  input: { borderWidth: 1, borderColor: '#ccc', borderRadius: 12, padding: 12, marginBottom: 15, minHeight: 100, textAlignVertical: 'top' },
  buttonContainer: { flexDirection: 'row', justifyContent: 'space-between', marginTop: 10 },
  cancelButton: { backgroundColor: '#f0f2f5', padding: 12, borderRadius: 12, flex: 1, marginRight: 10, alignItems: 'center' },
  submitButton: { backgroundColor: '#8B5A2B', padding: 12, borderRadius: 12, flex: 1, alignItems: 'center' },
  cancelText: { color: '#2c2c2c', fontSize: 16, fontWeight: '600' },
  submitText: { color: '#fff', fontSize: 16, fontWeight: '600' },
  reviewSection: { marginTop: 20 },
  reviewSectionTitle: { fontSize: 18, fontWeight: '700', color: '#1a1a1a', marginBottom: 10 },
  reviewCard: { backgroundColor: '#fff', padding: 15, borderRadius: 15, marginBottom: 10, elevation: 3 },
  reviewHeader: { flexDirection: 'row', alignItems: 'center', marginBottom: 5 },
  reviewRating: { fontSize: 16, fontWeight: '600', color: '#2c2c2c', marginRight: 10 },
  reviewStars: { flexDirection: 'row' },
  reviewComment: { fontSize: 14, color: '#666', marginTop: 5 },
  reviewDate: { fontSize: 12, color: '#999', marginTop: 5 },
  emptyText: { fontSize: 16, color: '#666', textAlign: 'center', marginTop: 20 },
  errorText: { fontSize: 16, color: '#c0392b', textAlign: 'center', marginTop: 20 },
});

export default Reviews;
</file>

<file path="axiosInstance/AxiosInstance.js">
import axios from 'axios';

const AxiosInstance = (token = '', contentType = 'application/json') => {
    const axiosInstance = axios.create({
        baseURL: 'https://datn-sever.onrender.com/'
    });
    // cmd -----> ipconfig -----> IPv4 Address (192.168.1.1)
    axiosInstance.interceptors.request.use(
        async (config) => {
            // const token = '';
            config.headers = {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json',
                'Content-Type': contentType
            }
            return config;
        },
        err => Promise.reject(err)
    );

    axiosInstance.interceptors.response.use(
        res => res.data,
        err => Promise.reject(err)
    );
    return axiosInstance;
};

export default AxiosInstance;
</file>

<file path=".gitignore">
# Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files

# dependencies
node_modules/

# Expo
.expo/
dist/
web-build/
expo-env.d.ts

# Native
.kotlin/
*.orig.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision

# Metro
.metro-health-check*

# debug
npm-debug.*
yarn-debug.*
yarn-error.*

# macOS
.DS_Store
*.pem

# local env files
.env*.local

# typescript
*.tsbuildinfo

app-example
</file>

<file path="eslint.config.js">
// https://docs.expo.dev/guides/using-eslint/
const { defineConfig } = require('eslint/config');
const expoConfig = require('eslint-config-expo/flat');

module.exports = defineConfig([
  expoConfig,
  {
    ignores: ['dist/*'],
  },
]);
</file>

<file path="README.md">
# Welcome to your Expo app 👋

This is an [Expo](https://expo.dev) project created with [`create-expo-app`](https://www.npmjs.com/package/create-expo-app).

## Get started

1. Install dependencies

   ```bash
   npm install
   ```

2. Start the app

   ```bash
   npx expo start
   ```

In the output, you'll find options to open the app in a

- [development build](https://docs.expo.dev/develop/development-builds/introduction/)
- [Android emulator](https://docs.expo.dev/workflow/android-studio-emulator/)
- [iOS simulator](https://docs.expo.dev/workflow/ios-simulator/)
- [Expo Go](https://expo.dev/go), a limited sandbox for trying out app development with Expo

You can start developing by editing the files inside the **app** directory. This project uses [file-based routing](https://docs.expo.dev/router/introduction).

## Get a fresh project

When you're ready, run:

```bash
npm run reset-project
```

This command will move the starter code to the **app-example** directory and create a blank **app** directory where you can start developing.

## Learn more

To learn more about developing your project with Expo, look at the following resources:

- [Expo documentation](https://docs.expo.dev/): Learn fundamentals, or go into advanced topics with our [guides](https://docs.expo.dev/guides).
- [Learn Expo tutorial](https://docs.expo.dev/tutorial/introduction/): Follow a step-by-step tutorial where you'll create a project that runs on Android, iOS, and the web.

## Join the community

Join our community of developers creating universal apps.

- [Expo on GitHub](https://github.com/expo/expo): View our open source platform and contribute.
- [Discord community](https://chat.expo.dev): Chat with Expo users and ask questions.
</file>

<file path="app/components/CategoryCard.jsx">
import React from 'react';
import { Animated,Text, View, TouchableOpacity, StyleSheet } from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';

const CategoryCard = ({ category, onPress }) => {
  return (
    <TouchableOpacity style={styles.categoryCard} onPress={() => onPress(category.CategoryID)}>
      <View style={styles.categoryIcon}>
        <MaterialIcons name="category" size={40} color="#d4af37" />
      </View>
      <Text style={styles.categoryName}>{category.Name}</Text>
      <Text style={styles.categoryDesc}>{category.Description}</Text>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  categoryCard: {
    width: 160,
    marginRight: 15,
    backgroundColor: '#2c2c2c',
    borderRadius: 15,
    padding: 15,
    alignItems: 'center',
    elevation: 5,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 10,
  },
  categoryIcon: {
    marginBottom: 10,
  },
  categoryName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#d4af37',
    textAlign: 'center',
  },
  categoryDesc: {
    fontSize: 12,
    color: '#bdc3c7',
    textAlign: 'center',
    marginTop: 5,
  },
});

export default CategoryCard;
</file>

<file path="app/components/CustomDrawerContent.tsx">
import React from 'react';
import { Animated,View, Text, Image, StyleSheet, TouchableOpacity } from 'react-native';
import { DrawerContentScrollView, DrawerItemList } from '@react-navigation/drawer';
import { MaterialIcons } from '@expo/vector-icons';
import { useAuth } from '../../store/useAuth';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { router } from 'expo-router';

export default function CustomDrawerContent(props) {
  const { setUser } = useAuth();

  const handleLogout = async () => {
    try {
      await AsyncStorage.removeItem('isLoggedIn');
      await AsyncStorage.removeItem('user');
      setUser(null);
      router.replace('/login');
    } catch (error) {
      console.error('Logout error:', error);
    }
  };

  // Kiểm tra nếu props.state tồn tại
  const hasRoutes = props.state && props.state.routes && props.state.routes.length > 0;

  return (
    <DrawerContentScrollView {...props} style={styles.drawerContainer}>
      {/* Header của Drawer */}
      <View style={styles.header}>
        <Image
          source={{ uri: 'https://media3.coolmate.me/cdn-cgi/image/width=672,height=990,quality=80,format=auto/uploads/January2024/AT.220.NAU.1.jpg' }}
          style={styles.logo}
        />
        <Text style={styles.title}>X Shop</Text>
      </View>

      {/* Danh sách các mục từ Drawer.Screen */}
      {hasRoutes ? (
        <DrawerItemList {...props} />
      ) : (
        <Text style={styles.errorText}>Không có mục điều hướng</Text>
      )}

      {/* Footer của Drawer */}
      <View style={styles.footer}>
        <TouchableOpacity style={styles.footerItem}>
          <MaterialIcons name="settings" size={24} color="#d4af37" />
          <Text style={styles.footerText}>Cài đặt</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.footerItem} onPress={handleLogout}>
          <MaterialIcons name="logout" size={24} color="#d4af37" />
          <Text style={styles.footerText}>Đăng xuất</Text>
        </TouchableOpacity>
      </View>
    </DrawerContentScrollView>
  );
}

const styles = StyleSheet.create({
  drawerContainer: {
    flex: 1,
    backgroundColor: '#fff',
  },
  header: {
    padding: 20,
    alignItems: 'center',
    borderBottomWidth: 1,
    borderBottomColor: '#d4af37',
  },
  logo: {
    width: 100,
    height: 100,
    borderRadius: 50,
    marginBottom: 10,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#d4af37',
  },
  errorText: {
    color: '#fff',
    textAlign: 'center',
    padding: 10,
  },
  footer: {
    marginTop: 'auto',
    borderTopWidth: 1,
    borderTopColor: '#d4af37',
    padding: 20,
  },
  footerItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 10,
  },
  footerText: {
    fontSize: 16,
    color: '#d4af37',
    marginLeft: 10,
  },
});
</file>

<file path="app/forgot-password.tsx">
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { useState } from 'react';
import {
  ActivityIndicator,
  Alert,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from 'react-native';
import AxiosInstance from '../axiosInstance/AxiosInstance';
import { router } from 'expo-router';

export default function ForgotPasswordScreen() {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSendCode = async () => {
    if (email.trim() === '') {
      Alert.alert('Lỗi', 'Vui lòng nhập email');
      return;
    }

    setLoading(true);
    try {
      const response = await AxiosInstance().post('/users/forgot-password', { email });

      if (response.message === 'Mã xác thực đã được gửi đến email') {
        Alert.alert('Thành công', 'Vui lòng kiểm tra email để nhận mã xác nhận');
        router.push({ pathname: '/reset-password', params: { email } });
      } else {
        Alert.alert('Lỗi', response.message || 'Gửi mã thất bại');
      }
    } catch (error) {
      console.log('Error object:', error);
      Alert.alert('HEHE', 'Có đăng ký mail này đâu mà giử ');
    } finally {
      setLoading(false);
    }
  };

  const handleBack = () => {
    router.back();
  };

  return (
    <View style={styles.container}>
      <TouchableOpacity style={styles.backButton} onPress={handleBack}>
        <MaterialCommunityIcons name="arrow-left" size={24} color="#8B4513" />
      </TouchableOpacity>
      <Text style={styles.title}>Quên Mật Khẩu</Text>

      <View style={styles.inputWrapper}>
        <MaterialCommunityIcons
          name="email-outline"
          size={20}
          color="#8B4513"
          style={styles.icon}
        />
        <TextInput
          placeholder="Nhập email của bạn"
          keyboardType="email-address"
          autoCapitalize="none"
          style={styles.input}
          value={email}
          onChangeText={setEmail}
          placeholderTextColor="#999"
        />
      </View>

      <TouchableOpacity
        style={[styles.sendBtn, loading && styles.disabledBtn]}
        onPress={handleSendCode}
        disabled={loading}
        activeOpacity={0.8}
      >
        {loading ? (
          <ActivityIndicator color="#fff" style={{ marginRight: 8 }} />
        ) : (
          <MaterialCommunityIcons
            name="send"
            size={24}
            color="#fff"
            style={{ marginRight: 8 }}
          />
        )}
        <Text style={styles.sendText}>{loading ? 'Đang gửi...' : 'Gửi mã xác nhận'}</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 24,
    justifyContent: 'center',
    backgroundColor: '#fff',
  },
  backButton: {
    position: 'absolute',
    top: 40,
    left: 16,
  },
  title: {
    fontSize: 28,
    fontWeight: '700',
    color: '#8B4513',
    marginBottom: 40,
    textAlign: 'center',
  },
  inputWrapper: {
    flexDirection: 'row',
    backgroundColor: '#F5F5F5',
    borderRadius: 10,
    paddingHorizontal: 16,
    paddingVertical: 12,
    alignItems: 'center',
    marginBottom: 24,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  icon: {
    marginRight: 12,
  },
  input: {
    flex: 1,
    fontSize: 16,
    color: '#333',
  },
  sendBtn: {
    flexDirection: 'row',
    backgroundColor: '#8B4513',
    paddingVertical: 14,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#8B4513',
    shadowOffset: { width: 0, height: 6 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 7,
  },
  disabledBtn: {
    backgroundColor: '#A9A9A9',
  },
  sendText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
});
</file>

<file path="app/orders.tsx">
import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView, ActivityIndicator } from 'react-native';
import { router } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';
import AxiosInstance from '../axiosInstance/AxiosInstance';
import { useAuth } from '../store/useAuth';

const Orders = () => {
  const { user, loadUser } = useAuth();
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('Tất cả');

  useEffect(() => {
    if (!user?._id) {
      loadUser();
      return;
    }

    const fetchOrders = async () => {
      setLoading(true);
      try {
        const response = await AxiosInstance().get(`/order/user/${user._id}`);
        setOrders(response || []);
        setError(null);
      } catch (err) {
        setError('Không thể tải đơn hàng. Vui lòng thử lại sau.');
        setOrders([]);
      } finally {
        setLoading(false);
      }
    };
    fetchOrders();
  }, [user]);

  const navigateToOrderDetail = (orderId) => {
    router.push({ pathname: './orderDetail', params: { orderId: orderId.toString() } });
  };

  const goBack = () => {
    router.back();
  };

  // Lọc đơn hàng theo tab
  const filteredOrders = orders.filter((order) => {
    if (activeTab === 'Tất cả') return true;
    if (activeTab === 'Hoàn thành') return order.orderStatus === 'Paid';
    if (activeTab === 'Đã hủy') return order.orderStatus === 'Cancelled';
    return false;
  });

  // Hàm định dạng ngày
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleString('vi-VN', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  // Rút gọn mã đơn hàng
  const shortenOrderId = (id) => {
    return id.slice(0, 8) + '...';
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#8B5A2B" />
        <Text style={styles.loadingText}>Đang tải đơn hàng...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error}</Text>
        <TouchableOpacity style={styles.retryButton} onPress={() => loadUser()}>
          <Text style={styles.retryButtonText}>Thử lại</Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={goBack} style={styles.backButton}>
          <Ionicons name="arrow-back" size={28} color="#ffffff" />
        </TouchableOpacity>
        <Text style={styles.title}>Đơn Hàng Của Bạn</Text>
        <View style={styles.placeholder} />
      </View>
      <View style={styles.tabContainer}>
        {['Tất cả', 'Hoàn thành', 'Đã hủy'].map((tab) => (
          <TouchableOpacity
            key={tab}
            style={[styles.tab, activeTab === tab && styles.activeTab]}
            onPress={() => setActiveTab(tab)}
          >
            <Text style={[styles.tabText, activeTab === tab && styles.activeTabText]}>{tab}</Text>
          </TouchableOpacity>
        ))}
      </View>
      {filteredOrders.length === 0 ? (
        <View style={styles.emptyContainer}>
          <Ionicons name="cart-outline" size={80} color="#ccc" />
          <Text style={styles.emptyText}>Bạn chưa có đơn hàng nào</Text>
        </View>
      ) : (
        filteredOrders.map((order) => (
          <TouchableOpacity
            key={order._id}
            style={styles.orderCard}
            onPress={() => navigateToOrderDetail(order._id)}
            activeOpacity={0.8}
          >
            <View style={styles.orderHeader}>
              <Text style={styles.orderId}>Mã: #{shortenOrderId(order._id)}</Text>
              <View style={[
                styles.statusBadge,
                order.orderStatus === 'Paid' ? styles.successBadge : styles.cancelledBadge
              ]}>
                <Ionicons
                  name={order.orderStatus === 'Paid' ? 'checkmark-circle' : 'close-circle'}
                  size={16}
                  color={order.orderStatus === 'Paid' ? '#28A745' : '#DC3545'}
                  style={styles.statusIcon}
                />
                <Text style={styles.statusText}>
                  {order.orderStatus === 'Paid' ? 'Hoàn thành' : 'Đã hủy'}
                </Text>
              </View>
            </View>
            <View style={styles.orderDetails}>
              <View style={styles.detailRow}>
                <Ionicons name="person-outline" size={18} color="#666" />
                <Text style={styles.detailText}>Người nhận: {order.name}</Text>
              </View>
              <View style={styles.detailRow}>
                <Ionicons name="call-outline" size={18} color="#666" />
                <Text style={styles.detailText}>Số điện thoại: {order.sdt}</Text>
              </View>
              <View style={styles.detailRow}>
                <Ionicons name="location-outline" size={18} color="#666" />
                <Text style={styles.detailText}>Địa chỉ: {order.shippingAddress}</Text>
              </View>
              <View style={styles.detailRow}>
                <Ionicons name="calendar-outline" size={18} color="#666" />
                <Text style={styles.detailText}>Ngày đặt: {formatDate(order.orderDate)}</Text>
              </View>
              <View style={styles.detailRow}>
                <Ionicons
                  name={order.paymentID.paymentMethod === 'Credit Card' ? 'card-outline' : 'cash-outline'}
                  size={18}
                  color="#666"
                />
                <Text style={styles.detailText}>
                  Thanh toán: {order.paymentID.paymentMethod === 'Credit Card' ? 'Thẻ tín dụng' : 'Tiền mặt'}
                </Text>
              </View>
            </View>
            <View style={styles.footer}>
              <TouchableOpacity style={styles.detailButton} onPress={() => navigateToOrderDetail(order._id)}>
                <Text style={styles.detailButtonText}>Xem chi tiết</Text>
              </TouchableOpacity>
            </View>
          </TouchableOpacity>
        ))
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#f7f7f7', padding: 16 },
  loadingContainer: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#f7f7f7' },
  loadingText: { marginTop: 10, fontSize: 16, color: '#666' },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    paddingHorizontal: 8,
    backgroundColor: '#8B5A2B',
    borderRadius: 12,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  backButton: { padding: 8 },
  title: { fontSize: 22, fontWeight: 'bold', color: '#ffffff', flex: 1, textAlign: 'center' },
  placeholder: { width: 40 },
  tabContainer: { flexDirection: 'row', marginBottom: 16 },
  tab: {
    flex: 1,
    paddingVertical: 10,
    paddingHorizontal: 12,
    borderRadius: 25,
    backgroundColor: '#ffffff',
    marginHorizontal: 4,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  activeTab: { backgroundColor: '#8B5A2B' },
  tabText: { fontSize: 14, color: '#666', fontWeight: '600' },
  activeTabText: { color: '#ffffff', fontWeight: 'bold' },
  orderCard: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    marginBottom: 12,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  orderHeader: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 },
  orderId: { fontSize: 16, fontWeight: 'bold', color: '#333' },
  statusBadge: { flexDirection: 'row', alignItems: 'center', paddingHorizontal: 8, paddingVertical: 4, borderRadius: 16 },
  successBadge: { backgroundColor: '#E8F5E9' },
  cancelledBadge: { backgroundColor: '#FFEBEE' },
  statusIcon: { marginRight: 4 },
  statusText: { fontSize: 12, fontWeight: '600', color: '#333' },
  orderDetails: { marginBottom: 12 },
  detailRow: { flexDirection: 'row', alignItems: 'center', marginBottom: 8 },
  detailText: { fontSize: 14, color: '#333', marginLeft: 8, flex: 1 },
  footer: { flexDirection: 'row', justifyContent: 'flex-end' },
  detailButton: {
    backgroundColor: '#8B5A2B',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 20,
  },
  detailButtonText: { color: '#ffffff', fontSize: 14, fontWeight: '600' },
  emptyContainer: { alignItems: 'center', marginTop: 40 },
  emptyText: { fontSize: 16, color: '#666', textAlign: 'center', marginTop: 12 },
  errorText: { fontSize: 16, color: '#D32F2F', textAlign: 'center', marginTop: 20 },
  retryButton: {
    backgroundColor: '#8B5A2B',
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 20,
    marginTop: 12,
    alignSelf: 'center',
  },
  retryButtonText: { color: '#ffffff', fontSize: 14, fontWeight: '600' },
});

export default Orders;
</file>

<file path="app/profileDetail.tsx">
import AxiosInstance from '../axiosInstance/AxiosInstance';
import { FontAwesome5, Ionicons, MaterialIcons } from '@expo/vector-icons';
import * as ImagePicker from 'expo-image-picker';
import React, { useEffect, useState } from 'react';
import {
  Alert,
  Image,
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from 'react-native';
import { router } from 'expo-router'; // Thêm import router
import { useAuth } from '../store/useAuth';

const ProfileScreen = () => {
  const { user, loadUser, setUser } = useAuth();

  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [address, setAddress] = useState('123 Lê Lợi, Q1, TP.HCM');
  const [image, setImage] = useState(null);

  useEffect(() => {
    const fetchUser = async () => {
      await loadUser();
    };
    fetchUser();
  }, []);

  useEffect(() => {
    if (user) {
      setName(user.name || '');
      setEmail(user.email || '');
      setPhone(user.phone || '');
      setImage(user.avatar || null);
    }
  }, [user]);

  const pickImage = async () => {
    const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (!permissionResult.granted) {
      Alert.alert('Quyền bị từ chối', 'Bạn cần cho phép truy cập thư viện ảnh.');
      return;
    }

    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  const handleSave = async () => {
    if (!name || !email || !phone) {
      Alert.alert('Lỗi', 'Vui lòng điền đầy đủ thông tin.');
      return;
    }

    try {
      const formData = new FormData();
      formData.append('name', name);
      formData.append('phone', phone);
      formData.append('password', user.password || '');
      if (image && image !== user.avatar) {
        formData.append('img', {
          uri: image,
          name: `avatar_${user._id}.jpg`,
          type: 'image/jpeg',
        });
      }

      const response = await AxiosInstance().put(`/users/update/${user._id}`, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });
      console.log('Cập nhật thành công:', response);

      // Lưu user mới vào useAuth, giữ lại avatar từ state nếu API không trả về
      const updatedUser = {
        ...response.user,
        avatar: image || user.avatar || null, // Giữ avatar hiện tại
      };
      setUser(updatedUser);
      Alert.alert('Thành công', 'Thông tin hồ sơ đã được cập nhật.');
    } catch (err) {
      console.error('Lỗi khi cập nhật:', err.message);
      Alert.alert('Lỗi', 'Không thể cập nhật thông tin. Vui lòng thử lại.');
    }
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
          <Ionicons name="arrow-back" size={24} color="#2c2c2c" />
        </TouchableOpacity>
        <Text style={styles.title}>Hồ sơ cá nhân</Text>
        <View style={styles.placeholder} />
      </View>

      <View style={styles.imagePicker}>
        <TouchableOpacity onPress={pickImage}>
          {image ? (
            <Image source={{ uri: image }} style={styles.avatar} />
          ) : (
            <View style={styles.avatarPlaceholder}>
              <Ionicons name="camera" size={32} color="#666" />
            </View>
          )}
        </TouchableOpacity>
        <Text style={styles.uploadText}>Tải ảnh lên</Text>
      </View>

      <View style={styles.inputCard}>
        <View style={styles.inputGroup}>
          <FontAwesome5 name="user" size={18} color="#666" style={styles.icon} />
          <TextInput
            style={styles.input}
            value={name}
            onChangeText={setName}
            placeholder="Tên đầy đủ"
            placeholderTextColor="#666"
          />
        </View>

        <View style={styles.inputGroup}>
          <MaterialIcons name="email" size={18} color="#666" style={styles.icon} />
          <TextInput
            style={styles.input}
            value={email}
            onChangeText={setEmail}
            placeholder="Email"
            keyboardType="email-address"
            placeholderTextColor="#666"
          />
        </View>

        <View style={styles.inputGroup}>
          <Ionicons name="call" size={18} color="#666" style={styles.icon} />
          <TextInput
            style={styles.input}
            value={phone}
            onChangeText={setPhone}
            placeholder="Số điện thoại"
            keyboardType="phone-pad"
            placeholderTextColor="#666"
          />
        </View>

        <View style={styles.inputGroup}>
          <Ionicons name="location" size={18} color="#666" style={styles.icon} />
          <TextInput
            style={styles.input}
            value={address}
            onChangeText={setAddress}
            placeholder="Địa chỉ"
            placeholderTextColor="#666"
          />
        </View>
      </View>

      <View style={styles.infoBox}>
        <Text style={styles.infoText}>Vai trò: {user?.role || 'N/A'}</Text>
        <Text style={styles.infoText}>
          Trạng thái: {user?.isActive ? 'Đang hoạt động' : 'Không hoạt động'}
        </Text>
        <Text style={styles.infoText}>
          Ngày tạo: {user?.createdAt ? new Date(user.createdAt).toLocaleString() : 'N/A'}
        </Text>
        <Text style={styles.infoText}>
          Cập nhật: {user?.updatedAt ? new Date(user.updatedAt).toLocaleString() : 'N/A'}
        </Text>
      </View>

      <TouchableOpacity style={styles.button} onPress={handleSave}>
        <Text style={styles.buttonText}>Lưu thông tin</Text>
      </TouchableOpacity>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#f0f2f5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 20,
  },
  backButton: {
    padding: 5,
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    color: '#2c2c2c',
    flex: 1,
    textAlign: 'center',
  },
  placeholder: {
    width: 24,
  },
  imagePicker: {
    alignItems: 'center',
    marginBottom: 20,
  },
  avatar: {
    width: 120,
    height: 120,
    borderRadius: 60,
    borderWidth: 1,
    borderColor: '#ddd',
    marginBottom: 10,
  },
  avatarPlaceholder: {
    width: 120,
    height: 120,
    borderRadius: 60,
    borderWidth: 1,
    borderColor: '#ddd',
    backgroundColor: '#f0f2f5',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 10,
  },
  uploadText: {
    fontSize: 16,
    color: '#8B5A2B',
    fontWeight: '600',
  },
  inputCard: {
    backgroundColor: '#fff',
    borderRadius: 15,
    padding: 15,
    elevation: 3,
    marginBottom: 20,
  },
  inputGroup: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 10,
    backgroundColor: '#fff',
    paddingHorizontal: 12,
    marginBottom: 15,
  },
  icon: {
    marginRight: 8,
  },
  input: {
    flex: 1,
    fontSize: 16,
    paddingVertical: 12,
    color: '#2c2c2c',
  },
  infoBox: {
    backgroundColor: '#fff',
    borderRadius: 15,
    padding: 15,
    elevation: 3,
    marginBottom: 20,
  },
  infoText: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
  },
  button: {
    backgroundColor: '#8B5A2B',
    paddingVertical: 15,
    borderRadius: 12,
    alignItems: 'center',
    marginBottom: 20,
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
});

export default ProfileScreen;
</file>

<file path="app/reset-password.tsx">
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { StyleSheet, Text, TextInput, TouchableOpacity, View, Alert, ActivityIndicator } from 'react-native';
import React, { useState, useEffect } from 'react';
import AxiosInstance from '../axiosInstance/AxiosInstance';
import { router, useLocalSearchParams } from 'expo-router';

const ResetPasswordScreen = () => {
  const { email: initialEmail } = useLocalSearchParams();
  const [email, setEmail] = useState(initialEmail || '');
  const [code, setCode] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (initialEmail) {
      setEmail(initialEmail);
    }
  }, [initialEmail]);

  const handleResetPassword = async () => {
    if (!email || !code || !newPassword) {
      Alert.alert('Lỗi', 'Vui lòng nhập đầy đủ thông tin');
      return;
    }

    setLoading(true);
    try {
      const response = await AxiosInstance().post('/users/reset-password', {
        email,
        code,
        newPassword,
      });

      if (response.message === 'Đổi mật khẩu thành công') {
        Alert.alert('Thành công', 'Mật khẩu đã được thay đổi. Vui lòng đăng nhập lại.');
        router.push('/login');
      } else {
        Alert.alert('Lỗi', response.message || 'Đổi mật khẩu thất bại');
      }
    } catch (error) {
      console.log('Reset Password Error:', error);
      Alert.alert('Lỗi', 'Có lỗi xảy ra, vui lòng thử lại sau');
    } finally {
      setLoading(false);
    }
  };

  const handleBack = () => {
    router.back();
  };

  return (
    <View style={styles.container}>
      <TouchableOpacity style={styles.backButton} onPress={handleBack}>
        <MaterialCommunityIcons name="arrow-left" size={24} color="#8B4513" />
      </TouchableOpacity>
      <Text style={styles.title}>Đặt Lại Mật Khẩu</Text>

      <TextInput
        placeholder="Email"
        keyboardType="email-address"
        style={styles.input}
        value={email}
        onChangeText={setEmail}
        editable={!!initialEmail}
      />

      <TextInput
        placeholder="Mã xác thực"
        style={styles.input}
        value={code}
        onChangeText={setCode}
      />

      <TextInput
        placeholder="Mật khẩu mới"
        secureTextEntry
        style={styles.input}
        value={newPassword}
        onChangeText={setNewPassword}
      />

      <TouchableOpacity
        style={[styles.button, loading && styles.disabledBtn]}
        onPress={handleResetPassword}
        disabled={loading}
      >
        {loading ? (
          <ActivityIndicator color="#fff" />
        ) : (
          <Text style={styles.buttonText}>Đổi mật khẩu</Text>
        )}
      </TouchableOpacity>
    </View>
  );
};

export default ResetPasswordScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 24,
    justifyContent: 'center',
    backgroundColor: '#fff',
  },
  backButton: {
    position: 'absolute',
    top: 40,
    left: 16,
  },
  title: {
    fontSize: 28,
    fontWeight: '700',
    color: '#8B4513',
    marginBottom: 40,
    textAlign: 'center',
  },
  input: {
    backgroundColor: '#F5F5F5',
    borderRadius: 10,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    marginBottom: 24,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  button: {
    backgroundColor: '#8B4513',
    borderRadius: 25,
    paddingVertical: 14,
    alignItems: 'center',
    shadowColor: '#8B4513',
    shadowOffset: { width: 0, height: 6 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 7,
  },
  disabledBtn: {
    backgroundColor: '#A9A9A9',
  },
  buttonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
});
</file>

<file path="app.json">
{
  "expo": {
    "name": "Xshop",
    "slug": "Xshop",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/images/icon.png",
    "scheme": "xshop",
    "userInterfaceStyle": "automatic",
    "newArchEnabled": true,
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/images/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      },
      "edgeToEdgeEnabled": true,
      "package": "com.hienluong2002.Xshop"
    },
    "web": {
      "bundler": "metro",
      "output": "static",
      "favicon": "./assets/images/favicon.png"
    },
    "plugins": [
      "expo-router",
      [
        "expo-splash-screen",
        {
          "image": "./assets/images/splash-icon.png",
          "imageWidth": 200,
          "resizeMode": "contain",
          "backgroundColor": "#ffffff"
        }
      ]
    ],
    "experiments": {
      "typedRoutes": true
    }
  }
}
</file>

<file path="app/components/CategorySection.jsx">
import React from 'react';
import { Animated, Text, ScrollView, StyleSheet } from 'react-native';
import CategoryCard from './CategoryCard';

const CategorySection = ({ categories, navigateToCategory, slideAnim }) => {
  // Kiểm tra categories có hợp lệ không
  if (!categories || !Array.isArray(categories)) {
    return (
      <Animated.View style={[styles.section, { transform: [{ translateY: slideAnim }] }]}>
        <Text style={styles.sectionTitle}>Không có danh mục để hiển thị</Text>
      </Animated.View>
    );
  }

  return (
    <Animated.View style={[styles.section, { transform: [{ translateY: slideAnim }] }]}>
      <Text style={styles.sectionTitle}>Danh mục cao cấp</Text>
      <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.categoryContainer}>
        {categories.map((category) => (
          <CategoryCard
            key={category.CategoryID || `category-${category.Name || Math.random()}`} // Đảm bảo key duy nhất
            category={category}
            onPress={() => navigateToCategory(category.CategoryID || '')}
          />
        ))}
      </ScrollView>
    </Animated.View>
  );
};

const styles = StyleSheet.create({
  section: {
    padding: 20,
    backgroundColor: '#fff',
    marginBottom: 15,
    marginHorizontal: 10,
    borderRadius: 20,
    shadowColor: '#000',
    shadowOpacity: 0.2,
    shadowRadius: 15,
    elevation: 10,
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: '800',
    marginBottom: 15,
    color: '#1a1a1a',
  },
  categoryContainer: {
    flexDirection: 'row',
    paddingVertical: 10,
  },
});

export default CategorySection;
</file>

<file path="app/login.tsx">
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { router } from 'expo-router';
import { useState } from 'react';
import { Alert, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';
import AxiosInstance from '../axiosInstance/AxiosInstance';
import { useAuth } from '../store/useAuth';

export default function LoginScreen() {
  const [isEmailLogin, setIsEmailLogin] = useState(true);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [phone, setPhone] = useState('');
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  const { login } = useAuth();

  const handleEmailLogin = async () => {
    if (email === '' || password === '') {
      Alert.alert('Lỗi', 'Vui lòng nhập đầy đủ email và mật khẩu');
      return;
    }

    setLoading(true);
    try {
      const response = await AxiosInstance().post('/users/login', {
        email,
        password,
      });

      if (response.message === 'Đăng nhập thành công') {
        await login(response.user);
        router.replace('/home');
      } else {
        Alert.alert('Lỗi', response.message || 'Đăng nhập thất bại');
      }
    } catch (error) {
      Alert.alert('Lỗi', 'Đăng nhập thất bại. Vui lòng kiểm tra lại email hoặc mật khẩu.');
    } finally {
      setLoading(false);
    }
  };

  const handlePhoneSubmit = async () => {
    if (phone === '') {
      Alert.alert('Lỗi', 'Vui lòng nhập số điện thoại');
      return;
    }

    const phoneRegex = /^(0|\+84)(3|5|7|8|9)[0-9]{8}$/;
    if (!phoneRegex.test(phone)) {
      Alert.alert('Lỗi', 'Số điện thoại không hợp lệ');
      return;
    }

    setLoading(true);
    try {
      const response = await AxiosInstance().post('/users/send-otp', {
        phone,
      });

      if (response.message === 'Mã OTP đã được gửi đến số điện thoại') {
        router.push({ pathname: '/OTPScreen', params: { phone } });
      } else {
        Alert.alert('Lỗi', response.message || 'Không thể gửi mã OTP');
      }
    } catch (error) {
      Alert.alert('Lỗi', 'Có lỗi xảy ra. Vui lòng thử lại.');
    } finally {
      setLoading(false);
    }
  };

  const handleSocialLogin = (platform) => {
    Alert.alert('Thông báo', `Đăng nhập bằng ${platform} đang được phát triển...`);
  };

  const goToRegister = () => {
    router.push('/register');
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Đăng nhập</Text>

      <View style={styles.toggleContainer}>
        <TouchableOpacity onPress={() => setIsEmailLogin(true)}>
          <Text style={[styles.toggleText, isEmailLogin && styles.toggleTextActive]}>Email</Text>
        </TouchableOpacity>
        <Text style={styles.toggleSeparator}> / </Text>
        <TouchableOpacity onPress={() => setIsEmailLogin(false)}>
          <Text style={[styles.toggleText, !isEmailLogin && styles.toggleTextActive]}>Số điện thoại</Text>
        </TouchableOpacity>
      </View>

      {isEmailLogin ? (
        <>
          <View style={styles.inputWrapper}>
            <TextInput
              placeholder="Email"
              value={email}
              onChangeText={setEmail}
              style={styles.input}
              placeholderTextColor="#999"
              keyboardType="email-address"
              autoCapitalize="none"
            />
          </View>
          <View style={styles.inputWrapper}>
            <TextInput
              placeholder="Password"
              value={password}
              onChangeText={setPassword}
              secureTextEntry={!showPassword}
              style={styles.input}
              placeholderTextColor="#999"
            />
            <TouchableOpacity onPress={() => setShowPassword(!showPassword)} style={styles.inputIcon}>
              <MaterialCommunityIcons
                name={showPassword ? 'eye-off-outline' : 'eye-outline'}
                size={20}
                color="#999"
              />
            </TouchableOpacity>
          </View>
          <TouchableOpacity onPress={() => router.push('/forgot-password')} style={styles.forgotPasswordBtn}>
            <Text style={styles.forgotPasswordText}>Quên mật khẩu?</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.loginBtn, loading && styles.disabledBtn]}
            onPress={handleEmailLogin}
            disabled={loading}
            activeOpacity={0.8}
          >
            <Text style={styles.loginText}>{loading ? 'Đang đăng nhập...' : 'Sign In'}</Text>
          </TouchableOpacity>
        </>
      ) : (
        <>
          <View style={styles.inputWrapper}>
            <TextInput
              placeholder="Số điện thoại"
              value={phone}
              onChangeText={setPhone}
              style={styles.input}
              placeholderTextColor="#999"
              keyboardType="phone-pad"
              autoCapitalize="none"
            />
          </View>
          <TouchableOpacity
            style={[styles.loginBtn, loading && styles.disabledBtn]}
            onPress={handlePhoneSubmit}
            disabled={loading}
            activeOpacity={0.8}
          >
            <Text style={styles.loginText}>{loading ? 'Đang xử lý...' : 'Tiếp tục'}</Text>
          </TouchableOpacity>
        </>
      )}

      <Text style={styles.dividerText}>Hoặc đăng nhập bằng</Text>

      <View style={styles.socialButtonsContainer}>
        <TouchableOpacity style={styles.socialBtn} onPress={() => handleSocialLogin('Apple')}>
          <MaterialCommunityIcons name="apple" size={24} color="#000" />
        </TouchableOpacity>
        <TouchableOpacity style={styles.socialBtn} onPress={() => handleSocialLogin('Google')}>
          <MaterialCommunityIcons name="google" size={24} color="#DB4437" />
        </TouchableOpacity>
        <TouchableOpacity style={styles.socialBtn} onPress={() => handleSocialLogin('Facebook')}>
          <MaterialCommunityIcons name="facebook" size={24} color="#3B5998" />
        </TouchableOpacity>
      </View>

      <TouchableOpacity onPress={goToRegister} style={styles.registerBtn}>
        <Text style={styles.registerText}>
          Bạn chưa có tài khoản? <Text style={styles.registerLink}>Sign Up</Text>
        </Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 24,
    justifyContent: 'center',
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    textAlign: 'center',
    marginBottom: 20,
  },
  toggleContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginBottom: 20,
  },
  toggleText: {
    fontSize: 16,
    color: '#666',
  },
  toggleTextActive: {
    color: '#8B4513',
    fontWeight: '600',
    textDecorationLine: 'underline',
  },
  toggleSeparator: {
    fontSize: 16,
    color: '#666',
    marginHorizontal: 5,
  },
  inputWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F5F5F5',
    borderRadius: 10,
    paddingHorizontal: 16,
    paddingVertical: 12,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  input: {
    flex: 1,
    fontSize: 16,
    color: '#333',
  },
  inputIcon: {
    marginLeft: 10,
  },
  forgotPasswordBtn: {
    alignSelf: 'flex-end',
    marginBottom: 20,
  },
  forgotPasswordText: {
    color: '#666',
    fontSize: 14,
  },
  loginBtn: {
    backgroundColor: '#8B4513',
    paddingVertical: 14,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 20,
  },
  disabledBtn: {
    backgroundColor: '#A9A9A9',
  },
  loginText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
  dividerText: {
    textAlign: 'center',
    color: '#666',
    fontSize: 14,
    marginVertical: 20,
  },
  socialButtonsContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginBottom: 30,
  },
  socialBtn: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: '#F5F5F5',
    justifyContent: 'center',
    alignItems: 'center',
    marginHorizontal: 10,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  registerBtn: {
    alignItems: 'center',
  },
  registerText: {
    color: '#666',
    fontSize: 14,
  },
  registerLink: {
    color: '#000',
    textDecorationLine: 'underline',
  },
});
</file>

<file path="app/register.tsx">
import { View, Text, TextInput, TouchableOpacity, StyleSheet, Alert, KeyboardAvoidingView, Platform } from 'react-native';
import { useState } from 'react';
import { router } from 'expo-router';
import { FontAwesome5, MaterialIcons } from '@expo/vector-icons';
import AxiosInstance from '../axiosInstance/AxiosInstance';

export default function RegisterScreen() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const handleRegister = async () => {
    if (!username || !password || !confirmPassword || !email || !phone) {
      Alert.alert('Lỗi', 'Vui lòng nhập đầy đủ thông tin');
      return;
    }

    if (password !== confirmPassword) {
      Alert.alert('Lỗi', 'Mật khẩu không khớp');
      return;
    }

    const phoneRegex = /^(0|\+84)(3|5|7|8|9)[0-9]{8}$/;
    if (!phoneRegex.test(phone)) {
      Alert.alert('Lỗi', 'Số điện thoại không hợp lệ');
      return;
    }

    const payload = {
      name: username,
      email,
      password,
      phone,
    };

    console.log('Dữ liệu gửi đi:', payload);

    try {
      const res = await AxiosInstance().post('/users/register', payload);
      console.log('Dữ liệu nhận về:', res);

      if (res && res._id) {
        Alert.alert('Thành công', `${res.name} đã đăng ký thành công!`);
        router.replace('/login');
      } else {
        Alert.alert('Lỗi', 'Đăng ký thất bại, vui lòng thử lại');
      }
    } catch (error: any) {
      const message =
        error.response?.data?.message ||
        error.message ||
        'Có lỗi xảy ra, vui lòng thử lại sau';
      Alert.alert('Lỗi', message);
    }
  };

  const renderInput = (iconName, iconLib, placeholder, value, onChangeText, secure = false, showSecure = false, toggleShow = null, keyboardType = 'default') => {
    const IconComponent = iconLib === 'FontAwesome5' ? FontAwesome5 : MaterialIcons;
    return (
      <View style={styles.inputWrapper}>
        <IconComponent name={iconName} size={20} color="#8B4513" style={styles.icon} />
        <TextInput
          placeholder={placeholder}
          value={value}
          onChangeText={onChangeText}
          style={styles.input}
          placeholderTextColor="#999"
          secureTextEntry={secure && !showSecure}
          keyboardType={keyboardType}
          autoCapitalize="none"
        />
        {secure && (
          <TouchableOpacity onPress={toggleShow} style={styles.eyeIcon}>
            <MaterialIcons
              name={showSecure ? 'visibility' : 'visibility-off'}
              size={20}
              color="#999"
            />
          </TouchableOpacity>
        )}
      </View>
    );
  };

  const handleBack = () => {
    router.back();
  };

  return (
    <KeyboardAvoidingView
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      keyboardVerticalOffset={Platform.OS === 'ios' ? 40 : 0}
    >
      <TouchableOpacity style={styles.backButton} onPress={handleBack}>
        <MaterialIcons name="arrow-back" size={24} color="#8B4513" />
      </TouchableOpacity>
      <Text style={styles.title}>Đăng Ký Tài Khoản</Text>

      {renderInput('user', 'FontAwesome5', 'Tài khoản', username, setUsername)}
      {renderInput('lock', 'FontAwesome5', 'Mật khẩu', password, setPassword, true, showPassword, () => setShowPassword(!showPassword))}
      {renderInput('lock', 'FontAwesome5', 'Nhập lại mật khẩu', confirmPassword, setConfirmPassword, true, showConfirmPassword, () => setShowConfirmPassword(!showConfirmPassword))}
      {renderInput('email', 'MaterialIcons', 'Email', email, setEmail, false, false, null, 'email-address')}
      {renderInput('phone', 'FontAwesome5', 'Số điện thoại', phone, setPhone, false, false, null, 'phone-pad')}

      <TouchableOpacity
        style={styles.button}
        onPress={handleRegister}
        activeOpacity={0.7}
      >
        <Text style={styles.buttonText}>Đăng ký</Text>
      </TouchableOpacity>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    paddingHorizontal: 24,
    justifyContent: 'center',
  },
  backButton: {
    position: 'absolute',
    top: 40,
    left: 16,
  },
  title: {
    fontSize: 28,
    fontWeight: '700',
    color: '#8B4513',
    marginBottom: 40,
    textAlign: 'center',
  },
  inputWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F5F5F5',
    borderRadius: 10,
    paddingHorizontal: 16,
    paddingVertical: 12,
    marginBottom: 24,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  icon: {
    marginRight: 12,
  },
  input: {
    flex: 1,
    fontSize: 16,
    color: '#333',
  },
  eyeIcon: {
    marginLeft: 10,
  },
  button: {
    backgroundColor: '#8B4513',
    borderRadius: 25,
    paddingVertical: 14,
    alignItems: 'center',
    shadowColor: '#8B4513',
    shadowOffset: { width: 0, height: 6 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 7,
  },
  buttonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
});
</file>

<file path="store/useAuth.ts">
import { create } from 'zustand';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Alert } from 'react-native';

// Định nghĩa type User với các trường từ API
type User = {
  _id: string;
  name: string;
  email: string;
  role: string;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
  __v: number;
  phone?: string;
};

type AuthState = {
  user: User | null;
  login: (user: User) => Promise<void>;
  logout: () => Promise<void>;
  loadUser: () => Promise<void>;
  setUser: (user: User | null) => void;
};

// Hàm kiểm tra dữ liệu User có hợp lệ không
const isValidUser = (data: any): data is User => {
  return (
    data &&
    typeof data === 'object' &&
    typeof data._id === 'string' &&
    typeof data.name === 'string' &&
    typeof data.email === 'string' &&
    typeof data.role === 'string' &&
    typeof data.isActive === 'boolean' &&
    typeof data.createdAt === 'string' &&
    typeof data.updatedAt === 'string' &&
    typeof data.__v === 'number'
  );
};

export const useAuth = create<AuthState>((set, get) => ({
  user: null,

  login: async (user: User) => {
    try {
      if (!isValidUser(user)) {
        throw new Error('Invalid user data');
      }
      await AsyncStorage.setItem('isLoggedIn', 'true');
      await AsyncStorage.setItem('user', JSON.stringify(user));
      set({ user });
    } catch (error) {
      console.error('Error saving user to AsyncStorage:', error);
      Alert.alert('Lỗi', 'Không thể đăng nhập. Vui lòng thử lại.');
      throw error;
    }
  },

  logout: async () => {
    try {
      const isLoggedIn = await AsyncStorage.getItem('isLoggedIn');
      if (isLoggedIn === 'true') {
        await AsyncStorage.removeItem('isLoggedIn');
        await AsyncStorage.removeItem('user');
        set({ user: null });
      }
    } catch (error) {
      console.error('Error logging out:', error);
      Alert.alert('Lỗi', 'Không thể đăng xuất. Vui lòng thử lại.');
      throw error;
    }
  },

  loadUser: async () => {
    try {
      const userData = await AsyncStorage.getItem('user');
      if (userData) {
        let parsedUser: User;
        try {
          parsedUser = JSON.parse(userData);
        } catch (parseError) {
          console.error('Error parsing user data:', parseError);
          set({ user: null });
          return;
        }

        if (!isValidUser(parsedUser)) {
          console.error('Invalid user data in AsyncStorage');
          set({ user: null });
          return;
        }

        const currentUser = get().user;
        // So sánh nông để tối ưu hiệu suất
        if (!currentUser || currentUser._id !== parsedUser._id) {
          set({ user: parsedUser });
        }
      } else {
        const currentUser = get().user;
        if (currentUser !== null) {
          set({ user: null });
        }
      }
    } catch (error) {
      console.error('Error loading user from AsyncStorage:', error);
      set({ user: null });
    }
  },

  setUser: (user) => set({ user }),
}));
</file>

<file path="app/home/profile.tsx">
import React, { useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, Image, ScrollView } from 'react-native';
import { MaterialIcons, Ionicons } from '@expo/vector-icons';
import { router } from 'expo-router';
import { useAuth } from '../../store/useAuth'; // Import useAuth

const ProfileScreen = () => {
  const { user, loadUser } = useAuth(); // Lấy user và loadUser từ useAuth

  useEffect(() => {
    const fetchUser = async () => {
      try {
        await loadUser(); // Tải thông tin user nếu chưa có
      } catch (err) {
        console.error('Lỗi khi tải user:', err.message);
      }
    };
    fetchUser();
  }, []);

  const navigateTo = (path) => {
    router.push(path);
  };

  const goBack = () => {
    router.back();
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={goBack} style={styles.backButton}>
          <Ionicons name="arrow-back" size={24} color="#2c2c2c" />
        </TouchableOpacity>
        <Text style={styles.title}>Hồ sơ</Text>
        <View style={styles.placeholder} />
      </View>
      <View style={styles.profileSection}>
        <Image
          source={{
            uri: user?.avatar || 'https://example.com/default-avatar.jpg', // Sử dụng avatar từ user hoặc mặc định
          }}
          style={styles.avatar}
         
        />
        <Text style={styles.userName}>{user?.name || 'Đang tải...'}</Text>
      </View>
      <View style={styles.menuContainer}>
        <TouchableOpacity style={styles.menuItem} onPress={() => navigateTo('/profileDetail')}>
          <MaterialIcons name="person" size={24} color="#8B5A2B" />
          <Text style={styles.menuText}>Hồ sơ cá nhân</Text>
          <Ionicons name="chevron-forward" size={20} color="#8B5A2B" />
        </TouchableOpacity>
        <TouchableOpacity style={styles.menuItem} onPress={() => navigateTo('/payment')}>
          <MaterialIcons name="payment" size={24} color="#8B5A2B" />
          <Text style={styles.menuText}>Phương thức thanh toán</Text>
          <Ionicons name="chevron-forward" size={20} color="#8B5A2B" />
        </TouchableOpacity>
        <TouchableOpacity style={styles.menuItem} onPress={() => navigateTo('/orders')}>
          <MaterialIcons name="shopping-bag" size={24} color="#8B5A2B" />
          <Text style={styles.menuText}>Đơn hàng của bạn</Text>
          <Ionicons name="chevron-forward" size={20} color="#8B5A2B" />
        </TouchableOpacity>
        <TouchableOpacity style={styles.menuItem} onPress={() => navigateTo('/settings')}>
          <MaterialIcons name="settings" size={24} color="#8B5A2B" />
          <Text style={styles.menuText}>Cài đặt</Text>
          <Ionicons name="chevron-forward" size={20} color="#8B5A2B" />
        </TouchableOpacity>
        <TouchableOpacity style={styles.menuItem} onPress={() => navigateTo('/help')}>
          <MaterialIcons name="help" size={24} color="#8B5A2B" />
          <Text style={styles.menuText}>Trợ giúp</Text>
          <Ionicons name="chevron-forward" size={20} color="#8B5A2B" />
        </TouchableOpacity>
        <TouchableOpacity style={styles.menuItem} onPress={() => navigateTo('/privacy')}>
          <MaterialIcons name="security" size={24} color="#8B5A2B" />
          <Text style={styles.menuText}>Chính sách bảo mật</Text>
          <Ionicons name="chevron-forward" size={20} color="#8B5A2B" />
        </TouchableOpacity>
        <TouchableOpacity style={styles.menuItem} onPress={() => navigateTo('/addressDetail')}>
          <MaterialIcons name="location-on" size={24} color="#8B5A2B" />
          <Text style={styles.menuText}>Địa chỉ</Text>
          <Ionicons name="chevron-forward" size={20} color="#8B5A2B" />
        </TouchableOpacity>
        <TouchableOpacity style={styles.menuItem} onPress={() => navigateTo('/contact')}>
          <MaterialIcons name="contact-mail" size={24} color="#8B5A2B" />
          <Text style={styles.menuText}>Liên hệ</Text>
          <Ionicons name="chevron-forward" size={20} color="#8B5A2B" />
        </TouchableOpacity>
        <TouchableOpacity style={styles.menuItem} onPress={() => navigateTo('../login')}>
          <MaterialIcons name="exit-to-app" size={24} color="#8B5A2B" />
          <Text style={styles.menuText}>Đăng xuất</Text>
          <Ionicons name="chevron-forward" size={20} color="#8B5A2B" />
        </TouchableOpacity>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#f0f2f5', // Đồng bộ màu nền với AddressScreen
    top : 20,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 20,
  },
  backButton: {
    padding: 5,
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    color: '#2c2c2c', // Màu tiêu đề chính
    flex: 1,
    textAlign: 'center',
  },
  placeholder: {
    width: 24,
  },
  profileSection: {
    alignItems: 'center',
    marginBottom: 20,
    backgroundColor: '#fff',
    padding: 15,
    borderRadius: 15,
    elevation: 3,
  },
  avatar: {
    width: 80,
    height: 80,
    borderRadius: 40,
    borderWidth: 1,
    borderColor: '#ddd',
    marginBottom: 10,
  },
  userName: {
    fontSize: 18,
    fontWeight: '600',
    color: '#2c2c2c',
  },
  menuContainer: {
    backgroundColor: '#fff',
    borderRadius: 15,
    padding: 15,
    elevation: 3,
  },
  menuItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  menuText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2c2c2c',
    marginLeft: 15,
    flex: 1,
  },
});

export default ProfileScreen;
</file>

<file path="app/index.tsx">
import { router } from 'expo-router';
import React, { useEffect, useRef } from 'react';
import { Animated, Easing, StyleSheet, View } from 'react-native';

// Đường dẫn ảnh logo bạn cần thay đúng với đường dẫn ảnh của bạn
const logoImage = require('../assets/images/logo.png');

export default function SplashScreen() {
  const scaleAnim = useRef(new Animated.Value(0.8)).current;  // khởi đầu scale nhỏ hơn
  const opacityAnim = useRef(new Animated.Value(0)).current;  // khởi đầu mờ

  const colorAnim = useRef(new Animated.Value(0)).current;  // cho text đổi màu

  useEffect(() => {
    // Chuỗi animation cho logo: scale từ 0.8 -> 1.2 -> 1 và opacity từ 0->1
    Animated.sequence([
      Animated.parallel([
        Animated.timing(scaleAnim, {
          toValue: 1.2,
          duration: 1500,
          useNativeDriver: true,
          easing: Easing.out(Easing.ease),
        }),
        Animated.timing(opacityAnim, {
          toValue: 1,
          duration: 1500,
          useNativeDriver: true,
        }),
      ]),
      Animated.timing(scaleAnim, {
        toValue: 1,
        duration: 800,
        useNativeDriver: true,
        easing: Easing.out(Easing.ease),
      }),
    ]).start();

    // Animation đổi màu text lặp lại
    Animated.loop(
      Animated.sequence([
        Animated.timing(colorAnim, {
          toValue: 1,
          duration: 1500,
          useNativeDriver: false,
        }),
        Animated.timing(colorAnim, {
          toValue: 0,
          duration: 1500,
          useNativeDriver: false,
        }),
      ]),
    ).start();

    const timer = setTimeout(() => {
      router.replace('/login');
    }, 3000);

    return () => clearTimeout(timer);
  }, []);

  // Nội suy màu text từ trắng sang vàng rồi trở lại trắng
  const textColor = colorAnim.interpolate({
    inputRange: [0, 1],
    outputRange: ['#ffffff', '#ffd700'], // trắng -> vàng kim
  });

  return (
    <View style={styles.container}>
      <Animated.Image
        source={logoImage}
        style={[
          styles.logo,
          {
            transform: [{ scale: scaleAnim }],
            opacity: opacityAnim,
          },
        ]}
        resizeMode="contain"
      />
      <Animated.Text style={[styles.text, { color: textColor }]}>
        Chào mừng bạn đến với Shop!
      </Animated.Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
    justifyContent: 'center',
    alignItems: 'center',
  },
  logo: {
    width: 180,
    height: 180,
    marginBottom: 20,
  },
  text: {
    fontSize: 22,
    fontWeight: '600',
    letterSpacing: 1,
  },
});
</file>

<file path="app/productDetail.tsx">
import React, { useState, useCallback } from 'react';
import { View, Text, Image, TouchableOpacity, StyleSheet, ScrollView, ActivityIndicator, TextInput, Alert } from 'react-native';
import { useLocalSearchParams, useFocusEffect, router } from 'expo-router';
import { useProducts } from '../store/useProducts';
import { useAuth } from '../store/useAuth';
import AxiosInstance from '../axiosInstance/AxiosInstance';
import { Ionicons } from '@expo/vector-icons';

// Chuẩn hóa giá
const formatPrice = (price) => {
  if (price == null) return '0';
  const numPrice = typeof price === 'string' ? parseFloat(price.replace(/[^0-9.-]+/g, '')) : price;
  return isNaN(numPrice) ? '0' : numPrice.toLocaleString('vi-VN');
};

// Hàm gọi API thêm vào giỏ hàng
const addToCartAPI = async (userID, productVariant, soluong) => {
  try {
    const res = await AxiosInstance().post('/cart', {
      userID,
      productVariant,
      soluong,
    });
    return res.data;
  } catch (error) {
    const errorMsg = error?.response?.data?.message || error.message || 'Lỗi khi thêm vào giỏ hàng';
    throw new Error(errorMsg);
  }
};

// Hàm gọi API gửi review
const sendReviewAPI = async ({ userID, productID, rating, comment }) => {
  try {
    const res = await AxiosInstance().post('/review', {
      userID,
      productID,
      rating,
      comment,
      status: 'pending', // Review mới mặc định trạng thái pending
    });
    return res.data;
  } catch (error) {
    const errorMsg = error?.response?.data?.message || error.message || 'Lỗi khi gửi đánh giá';
    throw new Error(errorMsg);
  }
};

const ProductDetail = () => {
  const { productId } = useLocalSearchParams();
  const { getProductById, addToCart, fetchProductVariants, loading, error } = useProducts();
  const [product, setProduct] = useState(null);
  const [variants, setVariants] = useState([]);
  const [selectedVariant, setSelectedVariant] = useState(null);
  const [quantity, setQuantity] = useState(1);
  const [isDataLoaded, setIsDataLoaded] = useState(false);
  const { user } = useAuth();
  const [reviews, setReviews] = useState([]);
  const [reviewTab, setReviewTab] = useState(0);

  // Review form state
  const [reviewComment, setReviewComment] = useState('');
  const [reviewRating, setReviewRating] = useState(5);
  const [sendingReview, setSendingReview] = useState(false);

  // Lấy dữ liệu sản phẩm, biến thể, review
  const loadData = useCallback(async () => {
    if (!productId || typeof productId !== 'string' || isDataLoaded) return;
    setIsDataLoaded(false);
    try {
      const fetchedProduct = getProductById(productId);
      const fetchedVariants = await fetchProductVariants(productId);

      // Gọi API lấy review
      let reviewData = [];
      try {
        reviewData = await AxiosInstance().get(`/review/product/${productId}`);
        setReviews(reviewData || []);
      } catch (err) {
        setReviews([]);
      }

      setProduct(fetchedProduct || null);
      setVariants(fetchedVariants || []);
      setSelectedVariant(fetchedVariants.length ? fetchedVariants[0] : null);
      setIsDataLoaded(true);
    } catch (err) {
      setIsDataLoaded(true);
    }
  }, [productId, getProductById, fetchProductVariants, isDataLoaded]);

  // Reload lại data sau khi gửi review thành công
  const reloadReview = async () => {
    try {
      const reviewData = await AxiosInstance().get(`/review/product/${productId}`);
      setReviews(reviewData || []);
    } catch {}
  };

  useFocusEffect(
    useCallback(() => {
      loadData();
    }, [loadData])
  );

  // Tính số lượng review theo từng sao
  const countByStar = (star) => reviews.filter((r) => r.rating === star).length;
  const totalReview = reviews.length;
  const reviewTabs = [
    { label: `Tất cả (${totalReview})`, value: 0 },
    { label: `5 Sao (${countByStar(5)})`, value: 5 },
    { label: `4 Sao (${countByStar(4)})`, value: 4 },
    { label: `3 Sao (${countByStar(3)})`, value: 3 },
    { label: `2 Sao (${countByStar(2)})`, value: 2 },
    { label: `1 Sao (${countByStar(1)})`, value: 1 },
  ];
  const filteredReviews =
    reviewTab === 0 ? reviews : reviews.filter((r) => r.rating === reviewTab);

  // Xử lý thêm vào giỏ hàng
  const handleAddToCart = useCallback(async () => {
    if (!user || !user._id) {
      alert('Bạn cần đăng nhập để thêm vào giỏ hàng!');
      return;
    }
    if (product && selectedVariant) {
      try {
        await addToCartAPI(user._id, selectedVariant._id, quantity);
        alert('Đã thêm vào giỏ hàng!');
      } catch (error) {
        alert(error?.message || 'Có lỗi xảy ra khi thêm vào giỏ hàng.');
      }
    } else {
      alert('Vui lòng chọn biến thể trước khi thêm vào giỏ hàng.');
    }
  }, [product, selectedVariant, quantity, user]);

  // Mua ngay
const handleBuyNow = useCallback(async () => {
  if (!user || !user._id) {
    alert('Bạn cần đăng nhập để mua ngay!');
    return;
  }
  if (product && selectedVariant) {
    try {
      await addToCartAPI(user._id, selectedVariant._id, quantity);
      // Chuyển qua trang giỏ hàng ngay sau khi thêm xong
      router.push('/home/cart');
    } catch (error) {
      alert(error?.message || 'Có lỗi xảy ra khi thêm vào giỏ hàng.');
    }
  } else {
    alert('Vui lòng chọn biến thể trước khi mua.');
  }
}, [product, selectedVariant, quantity, user]);

  // Gửi review
  const handleSendReview = async () => {
    if (!user || !user._id) {
      Alert.alert('Bạn cần đăng nhập để đánh giá!');
      return;
    }
    if (!reviewComment.trim()) {
      Alert.alert('Vui lòng nhập nội dung đánh giá!');
      return;
    }
    setSendingReview(true);
    try {
      await sendReviewAPI({
        userID: user._id,
        productID: productId,
        rating: reviewRating,
        comment: reviewComment.trim(),
      });
      Alert.alert('Thành công', 'Đánh giá đã gửi thành công, chờ duyệt!');
      setReviewComment('');
      setReviewRating(5);
      reloadReview();
    } catch (err) {
      Alert.alert('Lỗi', err?.message || 'Không gửi được đánh giá');
    }
    setSendingReview(false);
  };

  // UI
  if (!isDataLoaded || loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#ff6200" />
        <Text style={styles.loadingText}>Đang tải...</Text>
      </View>
    );
  }

  if (error || !product) {
    return (
      <View style={styles.loadingContainer}>
        <Text style={styles.errorText}>{error || 'Không tìm thấy sản phẩm'}</Text>
      </View>
    );
  }

  if (variants.length === 0) {
    return (
      <View style={styles.container}>
        <ScrollView contentContainerStyle={{ paddingBottom: 70 }}>
          <Image source={{ uri: product.Image }} style={styles.image} />
          <View style={styles.details}>
            <Text style={styles.name}>{product.Name}</Text>
            <Text style={styles.price}>{formatPrice(product.Price)} VNĐ</Text>
            <Text style={styles.description}>{product.Description || 'Không có mô tả'}</Text>
            <Text style={styles.discontinuedText}>Sản phẩm đã ngừng kinh doanh</Text>
          </View>
        </ScrollView>
      </View>
    );
  }

  // Nhóm biến thể theo màu sắc
  const colors = Array.from(new Set(variants.map((v) => v.color)));
  const sizesByColor = (color) =>
    variants.filter((v) => v.color === color).map((v) => v.size);

  return (
    <View style={styles.container}>
      <ScrollView contentContainerStyle={{ paddingBottom: 70 }}>
        {/* Ảnh sản phẩm */}
        <Image source={{ uri: product.Image }} style={styles.image} />
        <View style={styles.details}>
          <Text style={styles.name}>{product.Name}</Text>
          <View style={styles.priceContainer}>
            <Text style={styles.price}>{formatPrice(product.Price)} VNĐ</Text>
            <View style={styles.ratingContainer}>
              <Text style={styles.ratingText}>
                {product.Rating || '4.0'} ({totalReview} đánh giá)
              </Text>
            </View>
          </View>
          <Text style={styles.description}>{product.Description || 'Không có mô tả'}</Text>
          <Text style={styles.section}>Màu sắc</Text>
          <View style={styles.variantRow}>
            {colors.map((color) => (
              <TouchableOpacity
                key={color}
                style={[
                  styles.variantButton,
                  selectedVariant?.color === color
                    ? styles.selectedVariantButton
                    : null,
                ]}
                onPress={() => {
                  const variant = variants.find((v) => v.color === color);
                  setSelectedVariant(variant);
                }}
              >
                <Text style={styles.variantButtonText}>{color}</Text>
              </TouchableOpacity>
            ))}
          </View>
          {selectedVariant &&
            sizesByColor(selectedVariant.color).length > 0 && (
              <>
                <Text style={styles.section}>Kích thước</Text>
                <View style={styles.variantRow}>
                  {sizesByColor(selectedVariant.color).map((size) => (
                    <TouchableOpacity
                      key={size}
                      style={[
                        styles.variantButton,
                        selectedVariant?.size === size
                          ? styles.selectedVariantButton
                          : null,
                      ]}
                      onPress={() => {
                        const variant = variants.find(
                          (v) =>
                            v.color === selectedVariant.color &&
                            v.size === size
                        );
                        setSelectedVariant(variant);
                      }}
                    >
                      <Text style={styles.variantButtonText}>{size}</Text>
                    </TouchableOpacity>
                  ))}
                </View>
              </>
            )}
          {selectedVariant && (
            <>
              <Text style={styles.section}>Số lượng</Text>
              <View style={styles.quantityContainer}>
                <TouchableOpacity
                  style={styles.quantityButton}
                  onPress={() => setQuantity((prev) => Math.max(1, prev - 1))}
                  disabled={quantity <= 1}
                >
                  <Text style={styles.quantityButtonText}>-</Text>
                </TouchableOpacity>
                <TextInput
                  style={styles.quantityInput}
                  value={quantity.toString()}
                  keyboardType="numeric"
                  onChangeText={(text) => {
                    const num = parseInt(text) || 1;
                    if (num <= (selectedVariant?.stock || 1)) setQuantity(num);
                  }}
                />
                <TouchableOpacity
                  style={styles.quantityButton}
                  onPress={() =>
                    setQuantity((prev) =>
                      prev < (selectedVariant?.stock || 1) ? prev + 1 : prev
                    )
                  }
                  disabled={quantity >= (selectedVariant?.stock || 1)}
                >
                  <Text style={styles.quantityButtonText}>+</Text>
                </TouchableOpacity>
                <Text style={styles.stockText}>Tồn kho: {selectedVariant?.stock || 0}</Text>
              </View>
            </>
          )}

          {/* Form gửi review */}
          <Text style={[styles.section, { marginTop: 25 }]}>Viết đánh giá của bạn</Text>
          <View style={styles.reviewInputContainer}>
            <View style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 5 }}>
              <Text style={{ fontSize: 14, marginRight: 8 }}>Đánh giá:</Text>
              {[1, 2, 3, 4, 5].map((star) => (
                <TouchableOpacity key={star} onPress={() => setReviewRating(star)}>
                  <Ionicons
                    name={star <= reviewRating ? 'star' : 'star-outline'}
                    size={22}
                    color="#FFD700"
                  />
                </TouchableOpacity>
              ))}
            </View>
            <TextInput
              placeholder="Nhập đánh giá của bạn..."
              style={styles.reviewInput}
              value={reviewComment}
              onChangeText={setReviewComment}
              multiline
            />
            <TouchableOpacity
              style={[
                styles.sendReviewBtn,
                (sendingReview || !reviewComment.trim()) && { opacity: 0.6 },
              ]}
              onPress={handleSendReview}
              disabled={sendingReview || !reviewComment.trim()}
            >
              <Text style={styles.sendReviewText}>{sendingReview ? 'Đang gửi...' : 'Gửi đánh giá'}</Text>
            </TouchableOpacity>
          </View>

          {/* Tabs + List review */}
          <Text style={[styles.section, { marginTop: 28 }]}>Đánh giá sản phẩm</Text>
          <ScrollView horizontal showsHorizontalScrollIndicator={false} style={{ marginBottom: 10 }}>
            {reviewTabs.map((tab) => (
              <TouchableOpacity
                key={tab.value}
                style={[
                  styles.reviewTabButton,
                  reviewTab === tab.value && styles.activeReviewTab,
                ]}
                onPress={() => setReviewTab(tab.value)}
              >
                <Text
                  style={[
                    styles.reviewTabText,
                    reviewTab === tab.value && { color: '#ee4d2d', fontWeight: 'bold' },
                  ]}
                >
                  {tab.label}
                </Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
          {filteredReviews.length === 0 ? (
            <Text style={{ color: '#666', fontStyle: 'italic' }}>Chưa có đánh giá nào cho sản phẩm này.</Text>
          ) : (
            filteredReviews.map((rv) => (
              <View key={rv._id} style={styles.reviewCard}>
                <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                  <Ionicons name="person-circle" size={28} color="#bbb" />
                  <Text style={{ marginLeft: 5, fontWeight: '600', color: '#333' }}>
                    {rv.userID?.name || 'Người dùng'}
                  </Text>
                </View>
                <View style={{ flexDirection: 'row', alignItems: 'center', marginVertical: 2 }}>
                  {[1, 2, 3, 4, 5].map((star) => (
                    <Ionicons
                      key={star}
                      name={star <= rv.rating ? 'star' : 'star-outline'}
                      size={15}
                      color="#FFD700"
                    />
                  ))}
                  <Text style={{ fontSize: 12, color: '#888', marginLeft: 10 }}>
                    {new Date(rv.reviewDate || rv.createdAt).toLocaleDateString()}
                  </Text>
                </View>
                <Text style={{ color: '#222', marginTop: 2 }}>{rv.comment}</Text>
              </View>
            ))
          )}
        </View>
      </ScrollView>
      {variants.length > 0 && (
        <View style={styles.actionContainer}>
          <TouchableOpacity style={styles.addToCartButton} onPress={handleAddToCart}>
            <Text style={styles.buttonText}>Thêm vào giỏ</Text>
          </TouchableOpacity>
          <TouchableOpacity style={styles.buyNowButton} onPress={handleBuyNow}>
            <Text style={styles.buttonText}>Mua ngay</Text>
          </TouchableOpacity>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff' },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
  },
  image: { width: '100%', height: 350, resizeMode: 'contain', backgroundColor: '#f5f5f5' },
  details: { padding: 15, backgroundColor: '#fff' },
  name: { fontSize: 18, fontWeight: '700', color: '#1a1a1a', marginBottom: 10 },
  priceContainer: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 10 },
  price: { fontSize: 24, fontWeight: '700', color: '#ee4d2d' },
  ratingContainer: { flexDirection: 'row', alignItems: 'center' },
  ratingText: { fontSize: 14, color: '#666', marginLeft: 5 },
  description: { fontSize: 14, color: '#666', marginBottom: 15 },
  section: { fontSize: 16, fontWeight: '600', color: '#1a1a1a', marginTop: 10, marginBottom: 5 },
  variantRow: { flexDirection: 'row', flexWrap: 'wrap', marginBottom: 10 },
  variantButton: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
    paddingVertical: 8,
    paddingHorizontal: 15,
    marginRight: 10,
    marginBottom: 10,
  },
  selectedVariantButton: { borderColor: '#ee4d2d', backgroundColor: '#fff5f5' },
  variantButtonText: { fontSize: 14, color: '#1a1a1a' },
  quantityContainer: { flexDirection: 'row', alignItems: 'center', marginBottom: 20 },
  quantityButton: {
    width: 40,
    height: 40,
    borderWidth: 1,
    borderColor: '#ccc',
    justifyContent: 'center',
    alignItems: 'center',
  },
  quantityButtonText: { fontSize: 20, color: '#1a1a1a' },
  quantityInput: {
    width: 60,
    height: 40,
    borderWidth: 1,
    borderColor: '#ccc',
    textAlign: 'center',
    marginHorizontal: 10,
    fontSize: 16,
  },
  stockText: { fontSize: 14, color: '#666', marginLeft: 10 },
  actionContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    padding: 10,
    backgroundColor: '#fff',
    borderTopWidth: 1,
    borderTopColor: '#eee',
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
  },
  addToCartButton: {
    flex: 1,
    backgroundColor: '#ff6200',
    paddingVertical: 15,
    borderRadius: 5,
    alignItems: 'center',
    marginRight: 10,
  },
  buyNowButton: {
    flex: 1,
    backgroundColor: '#ee4d2d',
    paddingVertical: 15,
    borderRadius: 5,
    alignItems: 'center',
  },
  buttonText: { color: '#fff', fontSize: 16, fontWeight: '600' },
  loadingText: { fontSize: 16, color: '#666', textAlign: 'center', marginTop: 10 },
  errorText: { fontSize: 16, color: '#ee4d2d', textAlign: 'center', marginTop: 20 },
  discontinuedText: { fontSize: 16, color: '#ee4d2d', textAlign: 'center', marginTop: 20, fontWeight: '600' },

  // Review styles
  reviewInputContainer: {
    backgroundColor: '#faf8f7',
    borderRadius: 12,
    padding: 12,
    marginBottom: 12,
    marginTop: 5,
    borderWidth: 1,
    borderColor: '#f3d5ca',
  },
  reviewInput: {
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    padding: 10,
    minHeight: 45,
    fontSize: 15,
    marginBottom: 8,
  },
  sendReviewBtn: {
    alignSelf: 'flex-end',
    backgroundColor: '#ee4d2d',
    borderRadius: 8,
    paddingHorizontal: 16,
    paddingVertical: 8,
    marginTop: 4,
  },
  sendReviewText: { color: '#fff', fontWeight: '700', fontSize: 15 },
  reviewTabButton: {
    borderWidth: 1,
    borderColor: '#eee',
    borderRadius: 18,
    paddingHorizontal: 16,
    paddingVertical: 6,
    marginRight: 8,
    backgroundColor: '#fff',
  },
  activeReviewTab: {
    borderColor: '#ee4d2d',
    backgroundColor: '#ffe6e1',
  },
  reviewTabText: {
    fontSize: 14,
    color: '#444',
  },
  reviewCard: {
    borderWidth: 1,
    borderColor: '#eee',
    borderRadius: 10,
    padding: 12,
    marginBottom: 12,
    backgroundColor: '#fafafa',
  },
});

export default ProductDetail;
</file>

<file path="store/useProducts.tsx">
import { createContext, useContext, useState, useEffect, FC, ReactNode,} from 'react';
import {Alert} from 'react-native';
import AxiosInstance from '../axiosInstance/AxiosInstance';

interface ProductContextType {
  categories: any[];
  products: any[];
  cart: any[];
  wishlist: any[];
  loading: boolean;
  error: string | null;
  getProductById: (id: string) => any | undefined;
  getProductsByCategory: (categoryId: string) => any[];
  addToCart: (product: any, quantity: number) => void;

  // Wishlist mới:
  fetchWishlist: (userId: string) => Promise<void>;
  addToWishlist: (product: any, userId: string) => Promise<void>;
  removeFromWishlist: (wishlistId: string) => Promise<void>;
  isInWishlist: (productId: string) => boolean;
  getWishlistId: (productId: string) => string | undefined;

  fetchCategories: () => Promise<void>;
  fetchProducts: (params: { categoryId: string; page?: number; limit?: number }) => Promise<any[]>;
  fetchProductVariants: (productId: string) => Promise<any[]>;
}

const ProductContext = createContext<ProductContextType | undefined>(undefined);

export const ProductProvider: FC<{ children: ReactNode }> = ({ children }) => {
  const [categories, setCategories] = useState<any[]>([]);
  const [products, setProducts] = useState<any[]>([]);
  const [cart, setCart] = useState<any[]>([]);
  const [wishlist, setWishlist] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Fetch Wishlist từ API
  const fetchWishlist = async (userId: string) => {
    setLoading(true);
    try {
      const response = await AxiosInstance().get(`/wishlist?userID=${userId}`);
      const newWishlist = (response || []).map(item => ({
        WishlistID: item._id,
        ProductID: item.productID._id,
        ...item.productID,
      }));
      setWishlist(newWishlist);
      setError(null);
    } catch (err) {
      setError('Không thể tải danh sách yêu thích.');
      setWishlist([]);
    } finally {
      setLoading(false);
    }
  };

  // Thêm vào wishlist
const addToWishlist = async (product, userId) => {
  // Nếu đã có rồi thì KHÔNG gọi API, và không thêm vào state nữa!
  if (wishlist.some(item => item.ProductID === product.ProductID)) return;

  setLoading(true);
  try {
    const response = await AxiosInstance().post(`/wishlist`, {
      userID: userId,
      productID: product.ProductID,
    });

    // Nếu API trả về đúng định dạng:
    // response._id: ID wishlist vừa tạo
    // response.productID: object sản phẩm hoặc chỉ ID sản phẩm
    setWishlist(prev => [
      ...prev,
      {
        WishlistID: response._id, // hoặc response.WishlistID nếu backend trả về vậy
        ProductID: response.productID?._id || response.productID, // phòng trường hợp trả về object hoặc chỉ ID
        ...(typeof response.productID === 'object' ? response.productID : product),
      }
    ]);

    setError(null);
  } catch (err) {
    // Kiểm tra lỗi trả về từ server (đã có trong wishlist)
    const serverMsg = err?.response?.data?.message || err?.message || '';
    if (serverMsg === 'Sản phẩm đã có trong wishlist.') {
      // KHÔNG cần báo lỗi, KHÔNG setError, để tránh hiện message đỏ ở UI
      // Có thể cho Alert nhẹ nhàng nếu thích:
       Alert.alert('Thông báo', 'Sản phẩm đã có trong danh sách yêu thích!');
    } else {
      setError('Không thể thêm vào danh sách yêu thích.');
      Alert.alert('Lỗi', 'Không thể thêm vào danh sách yêu thích.');
    }
    // Optional: log lỗi để debug khi cần
    // console.error('addToWishlist ERROR:', serverMsg, err);
  } finally {
    setLoading(false);
  }
};

const fetchProductVariants = async (productId: string) => {
  setLoading(true);
  try {
    const response = await AxiosInstance().get(`/productvariant/byproduct/${productId}`);
    console.log("Du lieu productdetai", response)
    // response là mảng các variant
    setError(null);
    return response; // Trả về mảng variant
  } catch (err) {
    setError('Không thể tải các biến thể sản phẩm.');
    return [];
  } finally {
    setLoading(false);
  }
};


  // Xoá khỏi wishlist
const removeFromWishlist = async (wishlistId) => {
  setLoading(true);
  try {
    await AxiosInstance().delete(`/wishlist/${wishlistId}`);
    setWishlist(prev => prev.filter(item => item.WishlistID !== wishlistId));
  } catch (err) {
    setError('Không thể xoá khỏi danh sách yêu thích.');
  } finally {
    setLoading(false);
  }
};


  // Kiểm tra sản phẩm đã có trong wishlist chưa
  const isInWishlist = (productId: string) =>
    wishlist.some(item => item.ProductID === productId);

  // Lấy WishlistID theo ProductID
  const getWishlistId = (productId: string) =>
    wishlist.find(item => item.ProductID === productId)?.WishlistID;

  // ...Các hàm fetchCategories, fetchProducts, addToCart như bạn đang có...
  const fetchCategories = async () => {
    setLoading(true);
    try {
      const categoryResponse = await AxiosInstance().get('/category');
      setCategories(categoryResponse.map((category) => ({
        CategoryID: category._id,
        Name: category.name,
        Icon: getIconForCategory(category.name),
        Description: category.description || '',
        Status: category.status || true,
      })));
      return categoryResponse;
    } catch (err) {
      setError('Không thể tải danh mục. Vui lòng thử lại sau.');
      setCategories([]);
      return [];
    } finally {
      setLoading(false);
    }
  };

  const fetchProducts = async ({ categoryId, page = 1, limit = 10 }) => {
    setLoading(true);
    setError(null);
    try {
      const query = categoryId === 'all'
        ? `/products?page=${page}&limit=${limit}`
        : `/products?categoryID=${categoryId}&page=${page}&limit=${limit}`;
      const productResponse = await AxiosInstance().get(query);

      const fetchedProducts = await Promise.all(
        (productResponse.products || []).map(async (product) => {
          if (!product._id) return null;
          let imageURLs = ['https://via.placeholder.com/150'];
          try {
            const imageResponse = await AxiosInstance().get(`/img?productID=${product._id}`);
            imageURLs = imageResponse[0]?.imageURL || imageURLs;
          } catch { /* ignore image fetch error */ }
          return {
            ProductID: product._id,
            CategoryID: product.categoryID || '',
            Name: product.name,
            Description: product.description || '',
            Price: product.price.toLocaleString('vi-VN'),
            Image: imageURLs[0],
            Rating: 4.0,
          };
        })
      );

      const validProducts = fetchedProducts.filter((p) => p !== null);
      setProducts((prev) => page === 1 ? validProducts : [...prev, ...validProducts]);
      return validProducts;
    } catch (err) {
      setError('Không thể tải sản phẩm. Vui lòng thử lại sau.');
      return [];
    } finally {
      setLoading(false);
    }
  };

  const getIconForCategory = (name: string) => {
    switch (name) {
      case 'Áo Khoác':
      case 'Áo Polo':
      case 'Áo Thun':
      case 'Áo Sơ Mi':
        return 'shirt';
      case 'Quần Dài':
      case 'Quần Đùi':
        return 'person';
      default:
        return 'cube';
    }
  };

  const getProductById = (id: string) => products.find((p) => p.ProductID === id);

  const getProductsByCategory = (categoryId: string) =>
    products.filter((p) => p.CategoryID === categoryId);

  const addToCart = (product: any, quantity: number) => {
    setCart((prev) => {
      const existingItemIndex = prev.findIndex((item) => item.ProductID === product.ProductID);
      if (existingItemIndex !== -1) {
        const updatedCart = [...prev];
        updatedCart[existingItemIndex] = {
          ...updatedCart[existingItemIndex],
          Quantity: updatedCart[existingItemIndex].Quantity + quantity,
        };
        return updatedCart;
      }
      return [
        ...prev,
        { ...product, CartID: `${product.ProductID}-${Date.now()}`, Quantity: quantity },
      ];
    });
  };

  useEffect(() => {
    const initializeData = async () => {
      const fetchedCategories = await fetchCategories();
      if (fetchedCategories.length > 0) {
        await fetchProducts({ categoryId: fetchedCategories[0].CategoryID, page: 1, limit: 10 });
      } else {
        await fetchProducts({ categoryId: 'all', page: 1, limit: 10 });
      }
    };
    initializeData();
  }, []);

  return (
    <ProductContext.Provider
      value={{
        categories,
        products,
        cart,
        wishlist,
        loading,
        error,
        getProductById,
        getProductsByCategory,
        addToCart,
        fetchWishlist,
        addToWishlist,
        removeFromWishlist,
        isInWishlist,
        getWishlistId,
        fetchCategories,
        fetchProducts,
        fetchProductVariants,
      }}
    >
      {children}
    </ProductContext.Provider>
  );
};

export const useProducts = () => {
  const context = useContext(ProductContext);
  if (!context) {
    throw new Error('useProducts must be used within a ProductProvider');
  }
  return context;
};
</file>

<file path="app/home/_layout.tsx">
import { Ionicons } from '@expo/vector-icons';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import React from 'react';
import { StyleSheet, View } from 'react-native';
import ReviewsScreen from '../reviews';
import CartScreen from './cart';
import IndexScreen from './index';
import ProfileScreen from './profile';
import WishlistScreen from './wishlist';

const Tab = createBottomTabNavigator();

export default function HomeLayout() {
  return (
    <Tab.Navigator
      screenOptions={({ route }) => ({
        tabBarShowLabel: false,
        tabBarStyle: styles.tabBar,
        tabBarItemStyle: styles.tabItem,
        headerShown: false,
        tabBarIcon: ({ focused, color, size }) => {
          let iconName;

          if (route.name === 'index') iconName = 'home-outline';
          else if (route.name === 'cart') iconName = 'cart-outline';
          else if (route.name === 'reviews') iconName = 'chatbox-ellipses-outline';
          else if (route.name === 'profile') iconName = 'person-outline';
          else if (route.name === 'wishlist') iconName = 'heart-outline';

          return (
            <View style={[styles.iconContainer, focused && styles.focusedIconContainer]}>
              <Ionicons name={iconName} size={24} color={focused ? '#8B4513' : '#fff'} />
            </View>
          );
        },
      })}
    >
      <Tab.Screen name="index" component={IndexScreen} options={{ title: 'Trang chủ' }} />
      <Tab.Screen name="cart" component={CartScreen} options={{ title: 'Giỏ hàng' }} />
      <Tab.Screen name="reviews" component={ReviewsScreen} options={{ title: 'Đánh giá' }} />
      <Tab.Screen name="profile" component={ProfileScreen} options={{ title: 'Hồ sơ' }} />
      <Tab.Screen name="wishlist" component={WishlistScreen} options={{ title: 'Yêu thích' }} />
    </Tab.Navigator>
  );
}

const styles = StyleSheet.create({
  tabBar: {
    position: 'absolute',
    bottom: 20,
    left: 40,
    right: 40,
    height: 70,
    borderRadius: 35,
    backgroundColor: '#8B4513',
    borderTopWidth: 0,
    elevation: 10,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 15,
  },
  tabItem: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    marginHorizontal: 5,
  },
  iconContainer: {
    padding: 12,
    borderRadius: 30,
    alignItems: 'center',
    justifyContent: 'center',
    width: 50,
    height: 50,
  },
  focusedIconContainer: {
    backgroundColor: '#fff',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 5,
  },
});
</file>

<file path="app/home/wishlist.tsx">
import { router } from 'expo-router';
import React, { useEffect, useState } from 'react';
import {
  ActivityIndicator,
  Image,
  ScrollView,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
  RefreshControl,
  Alert,
} from 'react-native';
import { useAuth } from '../../store/useAuth';
import AxiosInstance from '../../axiosInstance/AxiosInstance';
import { Ionicons } from '@expo/vector-icons'; 
import { useFocusEffect } from 'expo-router';

const Wishlist = () => {
  const { user } = useAuth();
  const [wishlist, setWishlist] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [refreshing, setRefreshing] = useState(false);

   useFocusEffect(
    React.useCallback(() => {
      fetchWishlist(); // mỗi lần vào lại tab/trang là fetch lại liền
    }, [user])
  );
  // Hàm lấy danh sách yêu thích từ API
  const fetchWishlist = async () => {
    if (!user?._id) {
      console.log('User ID không tồn tại:', user);
      setError('Vui lòng đăng nhập để xem danh sách yêu thích.');
      setLoading(false);
      setRefreshing(false);
      return;
    }

    try {
      setLoading(true);
      const response = await AxiosInstance().get(`/wishlist?userID=${user._id}`);
      console.log('Dữ liệu từ API /wishlist:', response);

      const mappedWishlist = await Promise.all(
        (Array.isArray(response) ? response : []).map(async (item) => {
          let imageURLs = ['https://via.placeholder.com/100/cccccc?text=No+Image'];
          try {
            const imageResponse = await AxiosInstance().get(`/img?productID=${item.productID._id}`);
            console.log(`Dữ liệu từ API /img cho sản phẩm ${item.productID._id}:`, imageResponse);
            imageURLs = imageResponse[0]?.imageURL || imageURLs;
          } catch (imgError) {
            console.warn(`Không thể lấy hình ảnh cho sản phẩm ${item.productID._id}:`, imgError);
          }
          return {
            WishlistID: item._id,
            ProductID: item.productID._id,
            Name: item.productID.name,
            Image: imageURLs[0],
            Price: item.productID.price,
            Description: item.productID.description || '', // Thêm mô tả
          };
        })
      );

      console.log('Dữ liệu mappedWishlist:', mappedWishlist);
      setWishlist(mappedWishlist);
      setError(null);
    } catch (err) {
      console.error('Lỗi khi tải danh sách yêu thích:', err);
      setError('Không thể tải danh sách yêu thích. Vui lòng thử lại.');
      setWishlist([]);
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };

  // Hàm xóa sản phẩm khỏi danh sách yêu thích
  const removeFromWishlist = async (wishlistId: string) => {
  try {
    await AxiosInstance().delete(`/wishlist/${wishlistId}`);
    setWishlist(wishlist.filter((item) => item.WishlistID !== wishlistId));
    Alert.alert('Thành công', 'Đã xóa sản phẩm khỏi danh sách yêu thích.');
  } catch (err) {
    console.error('Lỗi khi xóa yêu thích:', err);
    Alert.alert('Lỗi', 'Không thể xóa sản phẩm khỏi danh sách yêu thích.');
  }
};

  // Gọi API khi component mount hoặc user thay đổi
  useEffect(() => {
    console.log('User hiện tại:', user);
    fetchWishlist();
  }, [user]);

  // Hàm xử lý pull-to-refresh
  const onRefresh = async () => {
    setRefreshing(true);
    await fetchWishlist();
  };

  const navigateToProductDetail = (productId: string) =>
    router.push({ pathname: '../productDetail', params: { productId } });

  if (loading && !refreshing) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#d4af37" />
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  return (
    <ScrollView
      style={styles.container}
      refreshControl={
        <RefreshControl
          refreshing={refreshing}
          onRefresh={onRefresh}
          colors={['#d4af37']}
          tintColor="#d4af37"
        />
      }
      contentContainerStyle={styles.scrollContent}
    >
      <Text style={styles.title}>Danh Sách Yêu Thích</Text>
      {wishlist.length === 0 ? (
        <View style={styles.emptyContainer}>
          <Ionicons name="heart-outline" size={50} color="#999" />
          <Text style={styles.emptyText}>Danh sách yêu thích trống</Text>
          <Text style={styles.emptySubText}>Thêm sản phẩm vào danh sách để xem tại đây!</Text>
        </View>
      ) : (
        wishlist.map((item) => (
          <TouchableOpacity
            key={item.WishlistID}
            style={styles.card}
            onPress={() => navigateToProductDetail(item.ProductID)}
            activeOpacity={0.8}
          >
            <Image
              source={{ uri: item.Image }}
              style={styles.image}
              defaultSource={{ uri: 'https://via.placeholder.com/100/cccccc?text=Loading' }}
            />
            <View style={styles.info}>
              <Text style={styles.name} numberOfLines={2} ellipsizeMode="tail">
                {item.Name}
              </Text>
              <Text style={styles.description} numberOfLines={2} ellipsizeMode="tail">
                {item.Description}
              </Text>
              <Text style={styles.price}>{item.Price.toLocaleString('vi-VN')}đ</Text>
            </View>
            <TouchableOpacity
                  style={styles.removeButton}
                  onPress={() => removeFromWishlist(item.WishlistID)}
                  activeOpacity={0.7}
                >
                  <Ionicons name="trash-outline" size={20} color="#fff" />
                </TouchableOpacity>

          </TouchableOpacity>
        ))
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  loadingContainer: {
  flex: 1,
  justifyContent: 'center',
  alignItems: 'center',
  backgroundColor: '#f5f5f5', // cùng màu với container
},
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  scrollContent: {
    padding: 15,
    paddingBottom: 20,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#1a1a1a',
    marginBottom: 15,
    textAlign: 'center',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 50,
  },
  emptyText: {
    fontSize: 18,
    color: '#666',
    textAlign: 'center',
    marginTop: 10,
  },
  emptySubText: {
    fontSize: 14,
    color: '#999',
    textAlign: 'center',
    marginTop: 5,
  },
  card: {
    flexDirection: 'row',
    backgroundColor: '#fff',
    borderRadius: 12,
    marginBottom: 15,
    padding: 10,
    elevation: 4,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 6,
    shadowOffset: { width: 0, height: 2 },
  },
  image: {
    width: 100,
    height: 100,
    borderRadius: 10,
    backgroundColor: '#eee', // Màu nền khi hình ảnh đang tải
  },
  info: {
    flex: 1,
    marginLeft: 15,
    justifyContent: 'center',
  },
  name: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1a1a1a',
    marginBottom: 5,
  },
  description: {
    fontSize: 14,
    color: '#666',
    marginBottom: 5,
  },
  price: {
    fontSize: 16,
    fontWeight: '700',
    color: '#c0392b',
  },
  removeButton: {
    position: 'absolute',
    top: 10,
    right: 10,
    backgroundColor: '#c0392b',
    borderRadius: 15,
    padding: 8,
    justifyContent: 'center',
    alignItems: 'center',
  },
  errorText: {
    fontSize: 16,
    color: '#c0392b',
    textAlign: 'center',
    marginTop: 20,
  },
});

export default Wishlist;
</file>

<file path="app/_layout.tsx">
import { Stack } from 'expo-router';
import { useEffect, useState } from 'react';
import { ActivityIndicator, View } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { ProductProvider } from '../store/useProducts';
import { GestureHandlerRootView } from 'react-native-gesture-handler'; // Thêm import này

export default function RootLayout() {
  const [checkingLogin, setCheckingLogin] = useState(true);
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  useEffect(() => {
    const checkLoginStatus = async () => {
      try {
        const loginStatus = await AsyncStorage.getItem('isLoggedIn');
        setIsLoggedIn(loginStatus === 'true');
      } catch (error) {
        console.error('Error checking login status:', error);
        setIsLoggedIn(false);
      } finally {
        setCheckingLogin(false);
      }
    };

    checkLoginStatus();
  }, []);

  if (checkingLogin) {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <ActivityIndicator size="large" color="#000" />
      </View>
    );
  }

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <ProductProvider>
        <Stack
          initialRouteName={isLoggedIn ? 'home' : 'index'}
          screenOptions={{
            headerShown: false,
          }}
        >
          <Stack.Screen name="index" />
          <Stack.Screen name="home" />
          <Stack.Screen name="login" />
          <Stack.Screen name="register" />
          <Stack.Screen name="forgot-password" />
          <Stack.Screen name="reset-password" />
          <Stack.Screen name="OTPScreen" />
        </Stack>
      </ProductProvider>
    </GestureHandlerRootView>
  );
}
</file>

<file path="app/products.tsx">
import React, { useEffect, useMemo, useState } from 'react';
import {
  View, Text, StyleSheet, TouchableOpacity,
  FlatList, Image, ActivityIndicator, RefreshControl, ScrollView
} from 'react-native';
import { useLocalSearchParams, router } from 'expo-router';
import { MaterialIcons } from '@expo/vector-icons';
import { useProducts } from '../store/useProducts';

const ProductCard = ({ product, onPress }) => (
  <TouchableOpacity style={styles.productCard} onPress={onPress}>
    <Image
      source={{ uri: product.Image || 'https://via.placeholder.com/120' }}
      style={styles.productImage}
    />
    <Text style={styles.productName}>{product.Name || 'Sản phẩm không tên'}</Text>
    <View style={styles.ratingContainer}>
      <MaterialIcons name="star" size={16} color="#FFD700" />
      <Text style={styles.ratingText}>{product.Rating || '4.0'}</Text>
    </View>
    <Text style={styles.productPrice}>{(product.Price || 0).toLocaleString()}đ</Text>
  </TouchableOpacity>
);

const Products = () => {
  const { categoryId } = useLocalSearchParams();
  const {
    categories,
    products,
    getProductsByCategory,
    fetchProducts,
    fetchCategories,
    loading,
    error
  } = useProducts();

  const [page, setPage] = useState(1);
  const [limit] = useState(10);
  const [hasMore, setHasMore] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [isLoadingMore, setIsLoadingMore] = useState(false);

  // Danh sách tất cả category cho thanh tab ngang
  const categoryList = useMemo(
    () => [{ CategoryID: 'all', Name: 'Tất cả' }, ...(categories || [])],
    [categories]
  );

  // Lấy index category đang chọn dựa vào params truyền từ router
  const selectedCategoryIndex = useMemo(() => {
    if (!categoryId) return 0;
    const idx = categoryList.findIndex((cat) => cat.CategoryID === categoryId);
    return idx !== -1 ? idx : 0;
  }, [categoryId, categoryList]);

  // Lấy đúng danh mục theo index
  const selectedCategory = categoryList[selectedCategoryIndex] || categoryList[0];

  // Danh sách sản phẩm theo danh mục (filter client hoặc lấy hết từ server)
  const filteredProducts =
    selectedCategory.CategoryID === 'all'
      ? products
      : getProductsByCategory(selectedCategory.CategoryID);

  // Fetch categories 1 lần khi vào trang
  useEffect(() => {
    fetchCategories();
  }, []);

  // Fetch lại sản phẩm mỗi lần đổi categoryId
  useEffect(() => {
    fetchProducts({ categoryId: categoryId || 'all', page: 1, limit });
    setPage(2);
    setHasMore(true);
  }, [categoryId]);

  // Kéo xuống để refresh
  const onRefresh = async () => {
    setRefreshing(true);
    try {
      await fetchCategories();
      await fetchProducts({ categoryId: categoryId || 'all', page: 1, limit });
      setPage(2);
      setHasMore(true);
    } finally {
      setRefreshing(false);
    }
  };

  // Load thêm sản phẩm (phân trang)
  const loadMoreProducts = async () => {
    if (!hasMore || isLoadingMore) return;
    setIsLoadingMore(true);
    try {
      const newProducts = await fetchProducts({
        categoryId: selectedCategory.CategoryID,
        page,
        limit,
      });
      setHasMore(newProducts.length === limit);
      setPage(prev => prev + 1);
    } finally {
      setIsLoadingMore(false);
    }
  };

  // Đi tới trang chi tiết sản phẩm
  const navigateToProductDetail = (productId) => {
    router.push({ pathname: './productDetail', params: { productId } });
  };

  // Nếu đang loading lần đầu (page 1)
  if (loading && !refreshing && page === 1) {
    return (
      <View style={styles.fullScreenLoadingContainer}>
        <ActivityIndicator size={50} color="#d4af37" />
        <Text style={styles.loadingText}>Đang tải...</Text>
      </View>
    );
  }

  // Nếu lỗi
  if (error) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error || 'Đã xảy ra lỗi'}</Text>
      </View>
    );
  }

 return (
  <View style={styles.container}>
    {/* FlatList với header sticky */}
    <FlatList
      data={filteredProducts}
      renderItem={({ item }) => (
        <ProductCard
          product={item}
          onPress={() => navigateToProductDetail(item.ProductID)}
        />
      )}
      keyExtractor={(item, index) => item.ProductID || `fallback-${index}`}
      numColumns={2}
      columnWrapperStyle={styles.productRow}
      showsVerticalScrollIndicator={false}
      contentContainerStyle={styles.productList}
      refreshControl={
        <RefreshControl
          refreshing={refreshing}
          onRefresh={onRefresh}
          colors={['#d4af37']}
          tintColor="#d4af37"
        />
      }
      onEndReached={loadMoreProducts}
      onEndReachedThreshold={0.5}
      ListFooterComponent={
        isLoadingMore ? (
          <ActivityIndicator size="small" color="#d4af37" style={styles.loadingMore} />
        ) : null
      }
      ListEmptyComponent={
        <View style={styles.emptyContainer}>
          <Text style={styles.emptyText}>Không có sản phẩm trong danh mục này</Text>
        </View>
      }
      ListHeaderComponent={
        <View>
          {/* Header với nút back */}
          <View style={styles.header}>
            <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>
              <MaterialIcons name="arrow-back" size={24} color="#000" />
            </TouchableOpacity>
            <Text style={styles.title}>Danh Mục</Text>
          </View>

          {/* Thanh tab danh mục */}
          <ScrollView
            horizontal
            showsHorizontalScrollIndicator={false}
            style={styles.categoryContainer}
            contentContainerStyle={styles.categoryContent}
          >
            {categoryList.map((cat, index) => (
              <TouchableOpacity
                key={cat.CategoryID}
                style={[
                  styles.categoryTab,
                  index === selectedCategoryIndex && styles.selectedCategoryTab,
                ]}
                onPress={() => {
                  router.setParams({ categoryId: cat.CategoryID });
                }}
              >
                <Text style={styles.categoryName}>{cat.Name || 'Không tên'}</Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>
      }
      stickyHeaderIndices={[0]} // Sticky header (header là phần đầu tiên)
    />
  </View>
);


};

const styles = StyleSheet.create({
  categoryContainer: {
  marginTop: 0,
  marginBottom: 4,
  backgroundColor: '#fff', // màu nền cố định
  borderBottomWidth: 1,
  borderColor: '#f0f0f0',
  paddingVertical: 4,
  zIndex: 2,
},
categoryContent: {
  paddingHorizontal: 10,
  alignItems: 'center',
},
  fullScreenLoadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
  },
  loadingText: {
    marginTop: 10,
    fontSize: 18,
    color: '#2c2c2c',
    fontWeight: '500',
  },
  container: {
    flex: 1,
    backgroundColor: '#fff',
    paddingTop: 20,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 10,
    height: 50,
    backgroundColor: '#fff',
    zIndex: 1,
  },
  backButton: {
    padding: 5,
  },
  title: {
    flex: 1,
    fontSize: 20,
    fontWeight: 'bold',
    color: '#000',
    textAlign: 'center',
  },
  categoryContainer: {
    marginTop: 5,
    marginBottom: 6,
  },
  categoryContent: {
    paddingHorizontal: 10,
    alignItems: 'center',
  },
  categoryTab: {
    paddingVertical: 8,
    paddingHorizontal: 15,
    marginRight: 10,
    backgroundColor: '#f0f0f0',
    borderRadius: 20,
    justifyContent: 'center',
  },
  selectedCategoryTab: {
    backgroundColor: '#d4af37',
  },
  categoryName: {
    fontSize: 14,
    color: '#000',
    fontWeight: '500',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingTop: 10,
  },
  emptyText: {
    fontSize: 16,
    color: '#2c2c2c',
    textAlign: 'center',
  },
  errorText: {
    fontSize: 16,
    color: '#c0392b',
    textAlign: 'center',
    marginTop: 20,
  },
  productList: {
    paddingTop: 10,
    paddingBottom: 30,
  },
  productRow: {
    justifyContent: 'space-between',
    paddingHorizontal: 10,
    marginBottom: 10,
  },
  productCard: {
    flex: 1,
    margin: 5,
    backgroundColor: '#fff',
    borderRadius: 10,
    padding: 10,
    alignItems: 'center',
    elevation: 2,
  },
  productImage: {
    width: 120,
    height: 120,
    resizeMode: 'contain',
    marginBottom: 10,
  },
  productName: {
    fontSize: 14,
    fontWeight: '500',
    color: '#000',
    textAlign: 'center',
  },
  ratingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 5,
  },
  ratingText: {
    fontSize: 12,
    color: '#000',
    marginLeft: 5,
  },
  productPrice: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#c0392b',
  },
  loadingMore: {
    marginVertical: 20,
  },
});

export default Products;
</file>

<file path="tsconfig.json">
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "paths": {
      "@/*": [
        "./*"
      ]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".expo/types/**/*.ts",
    "expo-env.d.ts"
, "app/register.tsx", "app/home/(tabs)/index.tsx", "app/addressDetail.jsx", "app/home/wishlist.tsx", "app/home/cart.tsx", "app/productDetail.tsx"  ]
}
</file>

<file path="package.json">
{
  "name": "xshop",
  "main": "expo-router/entry",
  "version": "1.0.0",
  "scripts": {
    "start": "expo start",
    "reset-project": "node ./scripts/reset-project.js",
    "android": "expo run:android",
    "ios": "expo run:ios",
    "web": "expo start --web",
    "lint": "expo lint"
  },
  "dependencies": {
    "@expo/vector-icons": "^14.1.0",
    "@react-native-async-storage/async-storage": "2.1.2",
    "@react-native-community/masked-view": "^0.1.11",
    "@react-native-community/slider": "^4.5.7",
    "@react-navigation/bottom-tabs": "^7.3.13",
    "@react-navigation/drawer": "^7.3.12",
    "@react-navigation/elements": "^2.3.8",
    "@react-navigation/native": "^7.1.9",
    "@shopify/flash-list": "1.7.6",
    "axios": "^1.9.0",
    "expo": "~53.0.9",
    "expo-blur": "~14.1.4",
    "expo-constants": "~17.1.6",
    "expo-font": "~13.3.1",
    "expo-haptics": "~14.1.4",
    "expo-image": "~2.1.7",
    "expo-image-picker": "~16.1.4",
    "expo-linear-gradient": "~14.1.4",
    "expo-linking": "~7.1.5",
    "expo-router": "~5.0.6",
    "expo-splash-screen": "~0.30.8",
    "expo-status-bar": "~2.2.3",
    "expo-symbols": "~0.4.4",
    "expo-system-ui": "~5.0.7",
    "expo-web-browser": "~14.1.6",
    "lucide-react-native": "^0.513.0",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "react-native": "0.79.2",
    "react-native-gesture-handler": "~2.24.0",
    "react-native-reanimated": "~3.17.4",
    "react-native-safe-area-context": "5.4.0",
    "react-native-screens": "~4.10.0",
    "react-native-web": "~0.20.0",
    "react-native-webview": "13.13.5",
    "zustand": "^5.0.4"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@types/react": "~19.0.10",
    "eslint": "^9.25.0",
    "eslint-config-expo": "~9.2.0",
    "typescript": "~5.8.3"
  },
  "private": true
}
</file>

<file path="app/home/cart.tsx">
import React, { useEffect, useState, useCallback } from 'react';
import { View, Text, ActivityIndicator, Image, ScrollView, StyleSheet, TouchableOpacity, Alert } from 'react-native';
import Swipeable from 'react-native-gesture-handler/Swipeable';
import { Trash2 } from 'lucide-react-native';
import { useAuth } from '../../store/useAuth';
import { useProducts } from '../../store/useProducts';
import AxiosInstance from '../../axiosInstance/AxiosInstance';
import { router, useFocusEffect } from 'expo-router';

const Cart = () => {
  const { user } = useAuth();
  const { products } = useProducts();
  const [cart, setCart] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedItems, setSelectedItems] = useState([]);

  const fetchCart = useCallback(async () => {
    if (!user?._id) {
      setCart([]);
      setLoading(false);
      setError('Bạn cần đăng nhập để xem giỏ hàng!');
      return;
    }
    setLoading(true);
    try {
      const response = await AxiosInstance().get(`/cart/${user._id}`);
      setCart(response || []);
      setError(null);
      setSelectedItems(new Array(response.length).fill(false));
    } catch (err) {
      setError('Không thể tải giỏ hàng. Vui lòng thử lại.');
      setCart([]);
    } finally {
      setLoading(false);
    }
  }, [user?._id]);

  useFocusEffect(
    useCallback(() => {
      fetchCart();
    }, [fetchCart])
  );

  useEffect(() => {
    if (user?._id) {
      fetchCart();
    } else {
      setCart([]);
      setLoading(false);
      setError('Bạn cần đăng nhập để xem giỏ hàng!');
    }
  }, [user?._id, fetchCart]);

  const removeFromCart = async (cartId) => {
    Alert.alert(
      "Xác nhận",
      "Bạn muốn xóa sản phẩm này khỏi giỏ hàng?",
      [
        { text: "Hủy", style: "cancel" },
        {
          text: "Xóa",
          style: "destructive",
          onPress: async () => {
            try {
              await AxiosInstance().delete(`/cart/${cartId}`);
              setCart(prev => prev.filter(item => item._id !== cartId));
              setSelectedItems(prev => prev.filter((_, i) => cart[i]?._id !== cartId));
            } catch (err) {
              Alert.alert('Lỗi', 'Không thể xóa sản phẩm khỏi giỏ hàng.');
            }
          }
        }
      ]
    );
  };

  const updateQuantity = async (cartId, value) => {
    const cartItem = cart.find(item => item._id === cartId);
    if (!cartItem) return;
    if (value === -1 && cartItem.soluong <= 1) return;
    try {
      const endpoint = value === -1 ? `/cart/${cartId}/decrease` : `/cart/${cartId}/increase`;
      await AxiosInstance().patch(endpoint);
      setCart(prev =>
        prev.map(item =>
          item._id === cartId ? { ...item, soluong: item.soluong + value } : item
        )
      );
    } catch (err) {
      Alert.alert('Lỗi', 'Số lượng vượt quá tồn kho.');
    }
  };

  const navigateToProductDetail = (productId) => {
    if (productId) {
      router.push({
        pathname: '/productDetail',
        params: { productId },
      });
    }
  };

  const toggleSelectItem = (index) => {
    setSelectedItems(prev => {
      const newSelected = [...prev];
      newSelected[index] = !newSelected[index];
      return newSelected;
    });
  };

  const getTotal = () => {
    return cart.reduce(
      (sum, item, index) =>
        selectedItems[index]
          ? sum + (item.productVariant?.productID?.price || 0) * (item.soluong || 1)
          : sum,
      0
    );
  };

  const navigateToCheckout = () => {
    if (cart.length === 0 || !selectedItems.some(item => item)) {
      Alert.alert('Thông báo', 'Vui lòng chọn ít nhất một sản phẩm để thanh toán!');
      return;
    }
    const selectedProducts = cart
      .filter((_, index) => selectedItems[index])
      .map(item => ({
        cartId: item._id,
        productId: item.productVariant?.productID?._id,
        name: item.productVariant?.productID?.name,
        color: item.productVariant?.color,
        size: item.productVariant?.size,
        price: item.productVariant?.productID?.price,
        quantity: item.soluong,
        image: products.find(p => p.ProductID === item.productVariant?.productID?._id)?.Image || 'https://via.placeholder.com/120',
      }));

    router.push({
      pathname: '../address',
      params: { selectedProducts: JSON.stringify(selectedProducts) },
    });
  };

  if (loading) {
    return (
      <View style={[styles.container, { justifyContent: 'center', alignItems: 'center' }]}>
        <ActivityIndicator size="large" color="#ee4d2d" />
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  return (
    <View style={styles.root}>
      <Text style={styles.title}>Giỏ hàng</Text>
      {cart.length === 0 ? (
        <Text style={styles.emptyText}>Giỏ hàng trống</Text>
      ) : (
        <ScrollView style={styles.container} contentContainerStyle={{ paddingBottom: 90 }}>
          {cart.map((item, idx) => {
            const productId = item.productVariant?.productID?._id;
            const productInList = products.find(p => p.ProductID === productId);
            const imgUrl = productInList?.Image || 'https://via.placeholder.com/120';

            return (
              <Swipeable
                key={item._id}
                renderRightActions={() => (
                  <TouchableOpacity
                    style={styles.deleteButton}
                    onPress={() => removeFromCart(item._id)}
                  >
                    <Trash2 color="white" size={22} />
                  </TouchableOpacity>
                )}
              >
                <View style={styles.card}>
                  <TouchableOpacity
                    style={[styles.checkbox, selectedItems[idx] ? styles.checkboxSelected : null]}
                    onPress={() => toggleSelectItem(idx)}
                  >
                    {selectedItems[idx] && <Text style={styles.checkboxText}>✓</Text>}
                  </TouchableOpacity>
                  <Image
                    source={{ uri: imgUrl }}
                    style={styles.image}
                  />
                  <View style={styles.info}>
                    <TouchableOpacity onPress={() => navigateToProductDetail(productId)}>
                      <Text style={styles.name} numberOfLines={2}>
                        {item.productVariant?.productID?.name || 'Tên sản phẩm'}
                      </Text>
                    </TouchableOpacity>
                    <Text style={styles.variant}>
                      Màu: <Text style={styles.bold}>{item.productVariant?.color}</Text> | Size: <Text style={styles.bold}>{item.productVariant?.size}</Text>
                    </Text>
                    <View style={styles.rowBetween}>
                      <Text style={styles.price}>
                        {(item.productVariant?.productID?.price || 0).toLocaleString('vi-VN')}đ
                      </Text>
                      <View style={styles.quantityContainer}>
                        <TouchableOpacity
                          style={styles.quantityButton}
                          onPress={() => updateQuantity(item._id, -1)}
                        >
                          <Text style={styles.quantityText}>-</Text>
                        </TouchableOpacity>
                        <Text style={styles.quantity}>{item.soluong}</Text>
                        <TouchableOpacity
                          style={styles.quantityButton}
                          onPress={() => updateQuantity(item._id, 1)}
                        >
                          <Text style={styles.quantityText}>+</Text>
                        </TouchableOpacity>
                      </View>
                    </View>
                  </View>
                </View>
              </Swipeable>
            );
          })}
          <View style={styles.bottomSection}>
            <View style={styles.summaryRow}>
              <Text style={styles.summaryText}>Tổng tiền</Text>
              <Text style={styles.summaryValue}>{getTotal().toLocaleString('vi-VN')}đ</Text>
            </View>
            <TouchableOpacity style={styles.checkoutButton} onPress={navigateToCheckout}>
              <Text style={styles.checkoutButtonText}>Thanh toán</Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  root: {
    flex: 1,
    backgroundColor: '#f7f7f8',
    paddingTop: 8,
  },
  container: {
    flex: 1,
    backgroundColor: '#f7f7f8',
    paddingHorizontal: 8,
  },
  title: {
    fontSize: 26,
    fontWeight: '800',
    color: '#222',
    marginLeft: 14,
    marginBottom: 10,
    marginTop: 14,
  },
  card: {
    flexDirection: 'row',
    backgroundColor: '#fff',
    borderRadius: 16,
    marginBottom: 14,
    padding: 14,
    shadowColor: '#222',
    shadowOpacity: 0.07,
    shadowOffset: { width: 0, height: 6 },
    shadowRadius: 14,
    elevation: 3,
    alignItems: 'center',
  },
  checkbox: {
    marginRight: 10,
    width: 24,
    height: 24,
    borderWidth: 2,
    borderColor: '#888',
    borderRadius: 4,
    justifyContent: 'center',
    alignItems: 'center',
  },
  checkboxSelected: {
    backgroundColor: '#ee4d2d',
    borderColor: '#ee4d2d',
  },
  checkboxText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  image: {
    width: 90,
    height: 90,
    borderRadius: 12,
    backgroundColor: '#f2f2f2',
  },
  info: {
    flex: 1,
    marginLeft: 14,
    justifyContent: 'space-between',
  },
  name: {
    fontSize: 16,
    color: '#222',
    fontWeight: '600',
    marginBottom: 2,
  },
  variant: {
    fontSize: 13,
    color: '#888',
    marginBottom: 6,
  },
  bold: { fontWeight: '700', color: '#111' },
  price: {
    fontSize: 16 ,
    color: '#ee4d2d',
    fontWeight: '700',
    marginBottom: 0,
  },
  rowBetween: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  quantityContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f6f6f6',
    borderRadius: 8,
    overflow: 'hidden',
  },
  quantityButton: {
    width: 32,
    height: 32,
    justifyContent: 'center',
    alignItems: 'center',
  },
  quantityText: {
    fontSize: 22,
    color: '#222',
    fontWeight: '600',
  },
  quantity: {
    minWidth: 28,
    textAlign: 'center',
    fontSize: 15,
    fontWeight: '500',
    color: '#222',
  },
  deleteButton: {
    backgroundColor: '#ee4d2d',
    justifyContent: 'center',
    alignItems: 'center',
    width: 54,
    height: 90,
    borderRadius: 12,
    marginVertical: 6,
  },
  bottomSection: {
    marginTop: 8,
    marginBottom: 14,
    paddingHorizontal: 8,
    paddingVertical: 16,
    backgroundColor: '#fff',
    borderRadius: 18,
    elevation: 4,
  },
  summaryRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  summaryText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
  },
  summaryValue: {
    fontSize: 18,
    color: '#ee4d2d',
    fontWeight: '700',
  },
  checkoutButton: {
    backgroundColor: '#ee4d2d',
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: 'center',
    marginTop: 8,
    shadowColor: '#ee4d2d',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.13,
    shadowRadius: 3,
    elevation: 2,
  },
  checkoutButtonText: {
    color: '#fff',
    fontSize: 17,
    fontWeight: '700',
    letterSpacing: 1,
  },
  emptyText: {
    fontSize: 16,
    color: '#444',
    textAlign: 'center',
    marginTop: 50,
  },
  errorText: { fontSize: 16, color: '#c0392b', textAlign: 'center', marginTop: 20 },
});

export default Cart;
</file>

<file path="app/home/index.tsx">
import { Ionicons, MaterialIcons } from '@expo/vector-icons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { router } from 'expo-router';
import React, { useEffect, useRef, useState, useMemo,useCallback } from 'react';
import {
  ActivityIndicator,
  Alert,
  Animated,
  Easing,
  Image,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
  ScrollView,
} from 'react-native';
import { FlashList } from '@shopify/flash-list';
import { useAuth } from '../../store/useAuth';
import { useProducts } from '../../store/useProducts';
import AdvancedFilterModal from '../components/AdvancedFilterModal';
import { useFocusEffect } from 'expo-router';
import AxiosInstance from '../../axiosInstance/AxiosInstance';
export default function HomeScreen() {

  const { user, loadUser, setUser } = useAuth();
  const { categories, products, fetchProducts, loading, error } = useProducts();
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const slideAnim = useRef(new Animated.Value(50)).current;
  const [favorites, setFavorites] = useState<string[]>([]);
  const [filterModalVisible, setFilterModalVisible] = useState(false);
  const [priceRange, setPriceRange] = useState([0, 1000000]);
  const [selectedRating, setSelectedRating] = useState(0);
  const [selectedCategory, setSelectedCategory] = useState('');
  const [refreshing, setRefreshing] = useState(false);
  const { fetchCategories, fetchWishlist } = useProducts();
  const [page, setPage] = useState(1); 
  const { wishlist, addToWishlist, removeFromWishlist, isInWishlist, getWishlistId } = useProducts(); 
  const { fetchProductVariants } = useProducts(); 
  useFocusEffect(
    useCallback(() => {
      fetchCategories(),
    fetchProducts({ categoryId: 'all', page: 1, limit: 10 }),
    loadFavorites(),
    user?._id ? fetchWishlist(user._id) : Promise.resolve()
    }, [user])
  );
  const onRefresh = async () => {
  setRefreshing(true);
  await Promise.all([
    fetchCategories(),
    fetchProducts({ categoryId: 'all', page: 1, limit: 10 }),
    loadFavorites(),
    user?._id ? fetchWishlist(user._id) : Promise.resolve(),
  ]);
  setSelectedCategory('');
  setSelectedRating(0);
  setPriceRange([0, 1000000]);
  setPage(1);
  setRefreshing(false);
};
  useEffect(() => {
    loadUser();
    loadFavorites();
    fetchProducts({ categoryId: 'all', page: 1, limit: 10 });

    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 1200,
      easing: Easing.ease,
      useNativeDriver: true,
    }).start();

    Animated.timing(slideAnim, {
      toValue: 0,
      duration: 1000,
      delay: 400,
      easing: Easing.out(Easing.exp),
      useNativeDriver: true,
    }).start();
  }, []);

  const loadFavorites = async () => {
    try {
      const storedFavorites = await AsyncStorage.getItem('favorites');
      if (storedFavorites) {
        setFavorites(JSON.parse(storedFavorites));
      }
    } catch (err) {
      console.error('Lỗi khi tải danh sách yêu thích:', err);
    }
  };
  const toggleFavorite = async (productId: string) => {
    if (!user?._id) {
      Alert.alert('Lỗi', 'Vui lòng đăng nhập để thêm vào danh sách yêu thích.');
      return;
    }

    const isFavorited = favorites.includes(productId);
    try {
      const response = await fetch('https://datn-sever.onrender.com/wishlist', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userID: user._id,
          productID: productId,
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const updatedFavorites = isFavorited
        ? favorites.filter((id) => id !== productId)
        : [...favorites, productId];
      await AsyncStorage.setItem('favorites', JSON.stringify(updatedFavorites));
      setFavorites(updatedFavorites);
      Alert.alert('Thành công', isFavorited ? 'Đã xóa khỏi danh sách yêu thích.' : 'Đã thêm vào danh sách yêu thích.');
    } catch (error) {
      console.error('Lỗi khi thêm/xóa yêu thích:', error);
      Alert.alert('Lỗi', 'Không thể cập nhật danh sách yêu thích.');
    }
  };

 const addToCartServer = async (product: any) => {
  if (!user?._id) {
    Alert.alert('Lỗi', 'Vui lòng đăng nhập để thêm vào giỏ hàng!');
    return;
  }

  // Gọi hàm fetchProductVariants lấy variant theo ProductID
  let variants = [];
  try {
    variants = await fetchProductVariants(product.ProductID);
  } catch (err) {
    Alert.alert('Lỗi', 'Không thể lấy biến thể sản phẩm!');
    return;
  }

  if (!variants || variants.length === 0) {
    Alert.alert('Lỗi', 'Sản phầm này đã dừng kinh doanh!');
    return;
  }

  // Lấy variant đầu tiên hoặc cho user chọn nếu muốn
  const variantId = variants[0]._id;

  try {
    await AxiosInstance().post('/cart', {
      userID: user._id,
      productVariant: variantId,
      soluong: 1,
    });
    Alert.alert('Thành công', `${product.Name} đã được thêm vào giỏ hàng!`);
  } catch (err: any) {
    Alert.alert('Lỗi', err?.response?.data?.message || 'Không thể thêm vào giỏ hàng.');
    console.log('Cart API error:', err?.response || err);
  }
};


const handleToggleWishlist = (product) => {
  if (!user?._id) {
    Alert.alert('Lỗi', 'Vui lòng đăng nhập để thêm vào danh sách yêu thích.');
    return;
  }
  if (isInWishlist(product.ProductID)) {
    // Nếu đã có, bấm sẽ xoá
    const wishId = getWishlistId(product.ProductID);
    if (wishId) removeFromWishlist(wishId);
  } else {
    // Nếu chưa có, bấm sẽ thêm
    addToWishlist(product, user._id);
  }
};


  const navigateToCategory = async (categoryId: string) => {
    try {
      await fetchProducts({ categoryId: categoryId || 'all', page: 1, limit: 10 });
      setPage(1);
      router.push({ pathname: './products', params: { categoryId } });
    } catch (err) {
      console.error('Lỗi khi tải sản phẩm:', err);
      Alert.alert('Lỗi', 'Không thể tải sản phẩm.');
    }
  };

  const navigateToProductDetail = (productId: string) =>
    router.push({ pathname: './productDetail', params: { productId } });

  const applyFilters = () => {
    setFilterModalVisible(false);
    fetchProducts({ categoryId: selectedCategory || 'all', page: 1, limit: 10 });
    setPage(1);
  };

  const filteredProducts = useMemo(() => {
    return products.filter((product) => {
      const price = product.NumericPrice || parseFloat(product.Price.replace(/[^0-9.-]+/g, ''));
      const matchesPrice = price >= priceRange[0] && price <= priceRange[1];
      const matchesRating = product.Rating >= selectedRating;
      const matchesCategory = selectedCategory ? product.CategoryID === selectedCategory : true;
      return matchesPrice && matchesRating && matchesCategory;
    });
  }, [products, priceRange, selectedRating, selectedCategory]);

  const loadMoreProducts = async () => {
    const nextPage = page + 1;
    try {
      await fetchProducts({ categoryId: selectedCategory || 'all', page: nextPage, limit: 10 });
      setPage(nextPage);
    } catch (err) {
      console.error('Lỗi khi tải thêm sản phẩm:', err);
      Alert.alert('Lỗi', 'Không thể tải thêm sản phẩm.');
    }
  };

  const renderSkeletonItem = () => (
    <View style={styles.productCard}>
      <View style={[styles.productImage, styles.skeletonImage]} />
      <View style={styles.productInfo}>
        <View style={[styles.skeletonText, { width: '80%', height: 14, marginBottom: 5 }]} />
        <View style={styles.ratingContainer}>
          <View style={[styles.skeletonText, { width: 40, height: 12 }]} />
        </View>
        <View style={[styles.skeletonText, { width: '60%', height: 14 }]} />
      </View>
      <View style={[styles.addToCartButton, styles.skeletonButton]} />
    </View>
  );

  if (error) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error}</Text>
        <TouchableOpacity
          style={styles.retryButton}
          onPress={() => fetchProducts({ categoryId: selectedCategory || 'all', page: 1, limit: 10 })}
        >
          <Text style={styles.retryButtonText}>Thử lại</Text>
        </TouchableOpacity>
      </View>
    );
  }

  const data = [
    { type: 'search', id: 'search' },
    { type: 'banner', id: 'banner' },
    { type: 'categories', id: 'categories' },
    { type: 'quickAccess', id: 'quickAccess' },
    { type: 'products', id: 'all_products' },
  ];

  const renderItem = ({ item }: any) => {
    switch (item.type) {
      case 'search':
        return (
          <View style={styles.searchContainer}>
            <TextInput style={styles.searchInput} placeholder="Tìm kiếm" placeholderTextColor="#999" />
            <MaterialIcons name="search" size={24} color="#8B4513" style={styles.searchIcon} />
            <TouchableOpacity onPress={() => setFilterModalVisible(true)}>
              <MaterialIcons name="filter-list" size={24} color="#8B4513" style={styles.filterIcon} />
            </TouchableOpacity>
          </View>
        );
      case 'banner':
  return (
    <Animated.View style={[styles.bannerCarouselContainer, { opacity: fadeAnim }]}>
      <ScrollView
        horizontal
        pagingEnabled
        showsHorizontalScrollIndicator={false}
        style={{ flex: 1 }}
      >
        {/* Banner 1 */}
        <View style={styles.bannerItem}>
          <Image
            source={{ uri: 'https://theme.hstatic.net/1000090364/1001154354/14/slider_1.jpg?v=739' }}
            style={styles.bannerImage}
          />
          <View style={styles.bannerOverlay}>
            <Text style={styles.bannerTitle}>Big Sale</Text>
            <Text style={styles.bannerSubtitle}>Giảm đến 50%</Text>
            <TouchableOpacity
              style={styles.bannerButton}
              onPress={() => navigateToCategory(categories[0]?.CategoryID || '')}
            >
              <Text style={styles.bannerButtonText}>SHOP NOW</Text>
          </TouchableOpacity>
          </View>
        </View>
        {/* Banner 2 */}
        <View style={styles.bannerItem}>
          <Image
            source={{ uri: 'https://theme.hstatic.net/1000090364/1001154354/14/slider_1.jpg?v=739' }}
            style={styles.bannerImage}
          />
          <View style={styles.bannerOverlay}>
            <Text style={styles.bannerTitle}>Hàng Mới Về</Text>
            <Text style={styles.bannerSubtitle}>Nhiều mẫu đẹp</Text>
            <TouchableOpacity
              style={styles.bannerButton}
              onPress={() => navigateToCategory(categories[0]?.CategoryID || '')}
            >
            <Text style={styles.bannerButtonText}>SHOP NOW</Text>
          </TouchableOpacity>
          </View>
        </View>
        {/* Banner 3 */}
        <View style={styles.bannerItem}>
          <Image
            source={{ uri: 'https://theme.hstatic.net/1000090364/1001154354/14/slider_1.jpg?v=739' }}
            style={styles.bannerImage}
          />
          <View style={styles.bannerOverlay}>
            <Text style={styles.bannerTitle}>Voucher Tháng 6</Text>
            <Text style={styles.bannerSubtitle}>Săn deal cực sốc</Text>
            <TouchableOpacity
              style={styles.bannerButton}
              onPress={() => navigateToCategory(categories[0]?.CategoryID || '')}
            >
              <Text style={styles.bannerButtonText}>SHOP NOW</Text>
            </TouchableOpacity>
          </View>
        </View>
        
      </ScrollView>
    </Animated.View>
  );
      case 'categories':
        return (
          <Animated.View style={[styles.section, { transform: [{ translateY: slideAnim }] }]}>
            <View style={styles.categoryHeader}>
              <Text style={styles.sectionTitle}>Danh Mục</Text>
              <TouchableOpacity onPress={() =>router.push({ pathname: './categoryDetail' })}>
                <Text style={styles.viewAllText}>Xem tất cả</Text>
              </TouchableOpacity>
            </View>
            <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.categoryContainer}>
              {categories.map((category) => (
                <TouchableOpacity
                  key={category.CategoryID}
                  style={styles.categoryCard}
                  onPress={() => navigateToCategory(category.CategoryID)}
                >
                  <View style={styles.categoryIcon}>
                    <Ionicons name={category.Icon} size={30} color="#8B4513" />
                  </View>
                  <Text style={styles.categoryName}>{category.Name}</Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
          </Animated.View>
        );
      case 'quickAccess':
        return (
          <View style={styles.quickAccessContainer}>
            <TouchableOpacity style={styles.quickAccessItem} onPress={() => router.push('../home/cart')}>
              <Ionicons name="cart" size={28} color="#FF8500" />
              <Text style={styles.quickAccessLabel}>Giỏ hàng</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.quickAccessItem} onPress={() => router.push('/home/wishlist')}>
              <Ionicons name="heart" size={28} color="#FF5161" />
              <Text style={styles.quickAccessLabel}>Yêu thích</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.quickAccessItem} onPress={() => router.push('/orders')}>
              <Ionicons name="receipt" size={28} color="#4287f5" />
              <Text style={styles.quickAccessLabel}>Đơn mua</Text>
            </TouchableOpacity>
          </View>
        );
      case 'products':
        const allProducts = filteredProducts;
        if (loading && !allProducts.length) {
          return (
            <Animated.View style={[styles.section, { transform: [{ translateY: slideAnim }] }]}>
              <View style={styles.categoryHeader}>
                <Text style={styles.sectionTitle}>Tất cả sản phẩm</Text>
              </View>
              <View style={styles.gridContainer}>
                {[...Array(6)].map((_, index) => (
                  <View key={`skeleton-${index}`}>{renderSkeletonItem()}</View>
                ))}
              </View>
            </Animated.View>
          );
        }
        if (!allProducts.length) {
          return (
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Tất cả sản phẩm</Text>
              <Text style={styles.noProductsText}>Không có sản phẩm nào.</Text>
            </View>
          );
        }

        return (
          <Animated.View style={[styles.section, { transform: [{ translateY: slideAnim }] }]}>
            <View style={styles.categoryHeader}>
              <Text style={styles.sectionTitle}>Tất cả sản phẩm</Text>
            </View>
            <View style={styles.gridContainer}>
              {allProducts.map((product) => (
                <TouchableOpacity
                  key={product.ProductID}
                  style={styles.productCard}
                  onPress={() => navigateToProductDetail(product.ProductID)}
                >
                  <View style={styles.imageContainer}>
                    <Image
                      source={{ uri: product.Image }}
                      style={styles.productImage}
                      defaultSource={{ uri: 'https://via.placeholder.com/150' }}
                    />
                 <TouchableOpacity
                    style={styles.favoriteButton}
                    onPress={() => handleToggleWishlist(product)}
                  >
                    <Ionicons
                      name={isInWishlist(product.ProductID) ? 'heart' : 'heart-outline'}
                      size={20}
                      color={isInWishlist(product.ProductID) ? '#FF0000' : '#8B4513'}
                    />
                  </TouchableOpacity>

                  </View>
                  <View style={styles.productInfo}>
                    <Text style={styles.productName} numberOfLines={1} ellipsizeMode="tail">
                      {product.Name}
                    </Text>
                    <View style={styles.ratingContainer}>
                      <Ionicons name="star" size={14} color="#FFD700" />
                      <Text style={styles.ratingText}>{product.Rating}</Text>
                    </View>
                    <Text style={styles.productPrice}>{product.Price}đ</Text>
                  </View>
                  <TouchableOpacity
                    style={styles.addToCartButton}
                    onPress={() => addToCartServer(product)}
                  >
                    <Text style={styles.addToCartText}>Thêm vào giỏ</Text>
                  </TouchableOpacity>
                </TouchableOpacity>
              ))}
            </View>
            {allProducts.length >= page * 10 && (
              <TouchableOpacity
                style={styles.loadMoreButton}
                onPress={loadMoreProducts}
              >
                <Text style={styles.loadMoreText}>Tải thêm sản phẩm</Text>
              </TouchableOpacity>
            )}
          </Animated.View>
        );
      default:
        return null;
    }
  };

  return (
    <View style={styles.container}>
      <FlashList
        data={data}
        renderItem={renderItem}
        keyExtractor={(item) => item.id}
        estimatedItemSize={220}
        contentContainerStyle={styles.scrollContent}
        refreshing={refreshing}
        onRefresh={onRefresh}
      />
      <AdvancedFilterModal
        visible={filterModalVisible}
        onClose={() => setFilterModalVisible(false)}
        priceRange={priceRange}
        setPriceRange={setPriceRange}
        selectedRating={selectedRating}
        setSelectedRating={setSelectedRating}
        selectedCategory={selectedCategory}
        setSelectedCategory={setSelectedCategory}
        categories={categories}
        onApplyFilters={applyFilters}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  bannerCarouselContainer: {
    height: 150,
    marginHorizontal: 15,
    borderRadius: 15,
    overflow: 'hidden',
    marginBottom: 20,
  },
  bannerItem: {
    width: 340, // hoặc Dimensions.get('window').width - margin*2
    height: 150,
    position: 'relative',
    marginRight: 12,
  },
  bannerImage: {
    width: '100%',
    height: '100%',
    resizeMode: 'cover',
  },
  bannerOverlay: {
    position: 'absolute',
    top: 0, left: 0, right: 0, bottom: 0,
    backgroundColor: 'rgba(0,0,0,0.25)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  bannerTitle: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: 19,
    marginBottom: 4,
  },
  bannerSubtitle: {
    color: '#fff',
    fontSize: 13,
  },

    quickAccessContainer: {
    flexDirection: 'row',
    backgroundColor: '#fff',
    marginHorizontal: 15,
    marginVertical: 12,
    borderRadius: 12,
    padding: 12,
    justifyContent: 'space-around',
    shadowColor: '#000',
    shadowOpacity: 0.08,
    shadowRadius: 8,
    elevation: 2,
  },
  quickAccessItem: {
    alignItems: 'center',
    flex: 1,
  },
  quickAccessLabel: {
    fontSize: 13,
    color: '#444',
    marginTop: 5,
    fontWeight: '500',
  },
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  scrollContent: {
    paddingBottom: 80,
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    margin: 15,
    backgroundColor: '#f0f0f0',
    borderRadius: 25,
    paddingHorizontal: 15,
  },
  searchInput: {
    flex: 1,
    fontSize: 16,
    paddingVertical: 10,
    color: '#333',
  },
  searchIcon: {
    marginLeft: 10,
  },
  filterIcon: {
    marginLeft: 10,
  },
  bannerContainer: {
    height: 150,
    marginHorizontal: 15,
    borderRadius: 15,
    overflow: 'hidden',
    marginBottom: 20,
  },
  bannerImage: {
    width: '100%',
    height: '100%',
    resizeMode: 'cover',
  },
  bannerOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  bannerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#fff',
  },
  bannerSubtitle: {
    fontSize: 14,
    color: '#fff',
    marginVertical: 5,
  },
  bannerButton: {
    backgroundColor: '#fff',
    paddingHorizontal: 20,
    paddingVertical: 8,
    borderRadius: 20,
  },
  bannerButtonText: {
    color: '#8B4513',
    fontSize: 14,
    fontWeight: '600',
  },
  section: {
    paddingHorizontal: 15,
    marginBottom: 20,
  },
  categoryHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  viewAllText: {
    fontSize: 14,
    color: '#8B4513',
  },
  categoryContainer: {
    flexDirection: 'row',
  },
  categoryCard: {
    alignItems: 'center',
    marginRight: 20,
  },
  categoryIcon: {
    backgroundColor: '#f0f0f0',
    borderRadius: 50,
    padding: 15,
    marginBottom: 5,
  },
  categoryName: {
    fontSize: 14,
    color: '#333',
    textAlign: 'center',
  },
  gridContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  productCard: {
    width: '48%',
    marginBottom: 15,
    backgroundColor: '#fff',
    borderRadius: 10,
    padding: 10,
    elevation: 3,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 5,
  },
  imageContainer: {
    position: 'relative',
  },
  productImage: {
    width: '100%',
    height: 150,
    resizeMode: 'cover',
    borderRadius: 10,
  },
  favoriteButton: {
    position: 'absolute',
    top: 8,
    right: 8,
    backgroundColor: 'rgba(255, 255, 255, 0.8)',
    borderRadius: 15,
    padding: 5,
  },
  productInfo: {
    marginTop: 10,
  },
  productName: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333',
    textAlign: 'center',
  },
  ratingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginVertical: 5,
  },
  ratingText: {
    fontSize: 12,
    color: '#333',
    marginLeft: 5,
  },
  productPrice: {
    fontSize: 14,
    color: '#8B4513',
    fontWeight: '600',
    textAlign: 'center',
  },
  addToCartButton: {
    backgroundColor: '#8B4513',
    paddingVertical: 8,
    paddingHorizontal: 15,
    borderRadius: 20,
    marginTop: 10,
    alignItems: 'center',
  },
  addToCartText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '600',
  },
  errorText: {
    fontSize: 16,
    color: 'red',
    textAlign: 'center',
    marginTop: 20,
  },
  noProductsText: {
    fontSize: 16,
    color: '#333',
    textAlign: 'center',
    marginTop: 10,
  },
  retryButton: {
    backgroundColor: '#8B4513',
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 20,
    marginTop: 10,
  },
  retryButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
  },
  loadMoreButton: {
    backgroundColor: '#8B4513',
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 20,
    alignItems: 'center',
    marginTop: 10,
    alignSelf: 'center',
  },
  loadMoreText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
  },
  skeletonImage: {
    backgroundColor: '#e0e0e0',
  },
  skeletonText: {
    backgroundColor: '#e0e0e0',
    borderRadius: 4,
  },
  skeletonButton: {
    backgroundColor: '#e0e0e0',
  },
});
</file>

</files>
