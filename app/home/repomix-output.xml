This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
(tabs)/
  _layout.tsx
  cart.tsx
  index.tsx
  profile.tsx
  reviews.tsx
_layout.tsx
checkout.tsx
orderDetail.tsx
orders.tsx
productDetail.tsx
products.tsx
wishlist.tsx
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="(tabs)/_layout.tsx">
import { Ionicons } from '@expo/vector-icons';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import React from 'react';
import { StyleSheet, View } from 'react-native';
import CartScreen from './cart';
import IndexScreen from './index';
import ProfileScreen from './profile';
import ReviewsScreen from './reviews';

const Tab = createBottomTabNavigator();

export default function TabLayout() {
  return (
    <Tab.Navigator
      screenOptions={({ route }) => ({
        tabBarShowLabel: false,
        tabBarStyle: styles.tabBar,
        tabBarItemStyle: styles.tabItem,
        headerShown: false,
        tabBarIcon: ({ focused, color, size }) => {
          let iconName;

          if (route.name === 'index') iconName = 'home-outline';
          else if (route.name === 'cart') iconName = 'cart-outline';
          else if (route.name === 'reviews') iconName = 'chatbox-ellipses-outline';
          else if (route.name === 'profile') iconName = 'person-outline';

          return (
            <View style={[styles.iconContainer, focused && styles.focusedIconContainer]}>
              <Ionicons name={iconName} size={24} color={focused ? '#8B4513' : '#fff'} />
            </View>
          );
        },
      })}
    >
      <Tab.Screen name="index" component={IndexScreen} options={{ title: 'Trang chủ' }} />
      <Tab.Screen name="cart" component={CartScreen} options={{ title: 'Giỏ hàng' }} />
      <Tab.Screen name="reviews" component={ReviewsScreen} options={{ title: 'Đánh giá' }} />
      <Tab.Screen name="profile" component={ProfileScreen} options={{ title: 'Hồ sơ' }} />
    </Tab.Navigator>
  );
}

const styles = StyleSheet.create({
  tabBar: {
    position: 'absolute',
    bottom: 20,
    left: 40,
    right: 40,
    height: 70,
    borderRadius: 35,
    backgroundColor: '#8B4513',
    borderTopWidth: 0,
    elevation: 10,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 15,
  },
  tabItem: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    marginHorizontal: 5,
  },
  iconContainer: {
    padding: 12,
    borderRadius: 30,
    alignItems: 'center',
    justifyContent: 'center',
    width: 50,
    height: 50,
  },
  focusedIconContainer: {
    backgroundColor: '#fff',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 5,
  },
});
</file>

<file path="(tabs)/cart.tsx">
// app/home/cart.tsx
import { router } from 'expo-router';
import React from 'react';
import { ActivityIndicator, Image, ScrollView, StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { useProducts } from '../../../store/useProducts';

const Cart = () => {
  const { cart, loading, error } = useProducts();

  const navigateToCheckout = () => router.push('./checkout');

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#d4af37" />
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Giỏ hàng</Text>
      {cart.length === 0 ? (
        <Text style={styles.emptyText}>Giỏ hàng trống</Text>
      ) : (
        cart.map((item) => (
          <View key={item.CartID} style={styles.card}>
            <Image source={{ uri: item.Image }} style={styles.image} />
            <View style={styles.info}>
              <Text style={styles.name}>{item.Name}</Text>
              <Text style={styles.price}>
                {item.Price} x {item.Quantity}
              </Text>
            </View>
          </View>
        ))
      )}
      {cart.length > 0 && (
        <TouchableOpacity style={styles.button} onPress={navigateToCheckout}>
          <Text style={styles.buttonText}>Thanh toán</Text>
        </TouchableOpacity>
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10, backgroundColor: '#f0f2f5' },
  title: { fontSize: 24, fontWeight: '800', margin: 10, color: '#1a1a1a' },
  card: { flexDirection: 'row', backgroundColor: '#fff', padding: 10, marginBottom: 10, borderRadius: 15, elevation: 5 },
  image: { width: 100, height: 100, resizeMode: 'cover', borderRadius: 10 },
  info: { marginLeft: 10, justifyContent: 'center' },
  name: { fontSize: 16, fontWeight: '600', color: '#2c2c2c' },
  price: { fontSize: 14, color: '#c0392b', fontWeight: '700' },
  button: { backgroundColor: '#d4af37', padding: 12, borderRadius: 12, alignItems: 'center', margin: 10 },
  buttonText: { color: '#fff', fontSize: 16, fontWeight: '600' },
  emptyText: { fontSize: 16, color: '#2c2c2c', textAlign: 'center', marginTop: 20 },
  errorText: { fontSize: 16, color: '#c0392b', textAlign: 'center', marginTop: 20 },
});

export default Cart;
</file>

<file path="(tabs)/index.tsx">
import { Ionicons, MaterialIcons } from '@expo/vector-icons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { router } from 'expo-router';
import React, { useEffect, useRef, useState } from 'react';
import {
  ActivityIndicator,
  Alert,
  Animated,
  Easing,
  Image,
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from 'react-native';
import { useAuth } from '../../../store/useAuth';
import { useProducts } from '../../../store/useProducts';

export default function HomeScreen() {
  const { user, loadUser, setUser } = useAuth();
  const { categories, products, getProductsByCategory, loading, error } = useProducts();
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const slideAnim = useRef(new Animated.Value(50)).current;
  const [favorites, setFavorites] = useState<string[]>([]); // Lưu danh sách ProductID yêu thích

  useEffect(() => {
    loadUser();
    loadFavorites(); // Tải danh sách yêu thích

    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 1200,
      easing: Easing.ease,
      useNativeDriver: true,
    }).start();

    Animated.timing(slideAnim, {
      toValue: 0,
      duration: 1000,
      delay: 400,
      easing: Easing.out(Easing.exp),
      useNativeDriver: true,
    }).start();
  }, []);

  // Tải danh sách yêu thích từ AsyncStorage
  const loadFavorites = async () => {
    try {
      const storedFavorites = await AsyncStorage.getItem('favorites');
      if (storedFavorites) {
        setFavorites(JSON.parse(storedFavorites));
      }
    } catch (err) {
      console.error('Lỗi khi tải danh sách yêu thích:', err);
    }
  };

  // Lưu danh sách yêu thích vào AsyncStorage
  const saveFavorites = async (updatedFavorites: string[]) => {
    try {
      await AsyncStorage.setItem('favorites', JSON.stringify(updatedFavorites));
      setFavorites(updatedFavorites);
    } catch (err) {
      console.error('Lỗi khi lưu danh sách yêu thích:', err);
    }
  };

  // Thêm/xóa sản phẩm khỏi danh sách yêu thích
  const toggleFavorite = (productId: string) => {
    if (!user?._id) {
      Alert.alert('Lỗi', 'Vui lòng đăng nhập để thêm vào danh sách yêu thích.');
      return;
    }
    const isFavorited = favorites.includes(productId);
    const updatedFavorites = isFavorited
      ? favorites.filter((id) => id !== productId)
      : [...favorites, productId];
    saveFavorites(updatedFavorites);
    Alert.alert('Thành công', isFavorited ? 'Đã xóa khỏi danh sách yêu thích.' : 'Đã thêm vào danh sách yêu thích.');
  };

  // Thêm sản phẩm vào giỏ hàng
  const addToCart = async (product: any) => {
    try {
      const cart = await AsyncStorage.getItem('cart');
      let cartItems = cart ? JSON.parse(cart) : [];
      const existingItem = cartItems.find((item: any) => item.ProductID === product.ProductID);

      if (existingItem) {
        existingItem.quantity = (existingItem.quantity || 1) + 1;
      } else {
        cartItems.push({ ...product, quantity: 1 });
      }

      await AsyncStorage.setItem('cart', JSON.stringify(cartItems));
      Alert.alert('Thành công', `${product.Name} đã được thêm vào giỏ hàng!`);
    } catch (err) {
      console.error('Lỗi khi thêm vào giỏ hàng:', err);
      Alert.alert('Lỗi', 'Không thể thêm sản phẩm vào giỏ hàng.');
    }
  };

  const handleLogout = async () => {
    await AsyncStorage.removeItem('isLoggedIn');
    setUser(null);
    router.replace('./login');
    Alert.alert('Đăng xuất', 'Bạn đã đăng xuất thành công.');
  };

  const navigateToCategory = (categoryId: string) =>
    router.push({ pathname: './products', params: { categoryId } });
  const navigateToProductDetail = (productId: string) =>
    router.push({ pathname: './productDetail', params: { productId } });

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#d4af37" />
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <ScrollView style={styles.scrollContainer} contentContainerStyle={styles.scrollContent}>
        {/* Thanh tìm kiếm */}
        <View style={styles.searchContainer}>
          <TextInput style={styles.searchInput} placeholder="Tìm kiếm" placeholderTextColor="#999" />
          <MaterialIcons name="search" size={24} color="#8B4513" style={styles.searchIcon} />
        </View>

        {/* Banner quảng cáo */}
        <Animated.View style={[styles.bannerContainer, { opacity: fadeAnim }]}>
          <Image
            source={{ uri: 'https://via.placeholder.com/400x150.png?text=New+Collection' }}
            style={styles.bannerImage}
          />
          <View style={styles.bannerOverlay}>
            <Text style={styles.bannerTitle}>New Collection</Text>
            <Text style={styles.bannerSubtitle}>Discount 50% for transactions</Text>
            <TouchableOpacity
              style={styles.bannerButton}
              onPress={() => navigateToCategory(categories[0]?.CategoryID || '')}
            >
              <Text style={styles.bannerButtonText}>SHOP NOW</Text>
            </TouchableOpacity>
          </View>
        </Animated.View>

        {/* Danh mục */}
        <Animated.View style={[styles.section, { transform: [{ translateY: slideAnim }] }]}>
          <View style={styles.categoryHeader}>
            <Text style={styles.sectionTitle}>Danh Mục</Text>
            <TouchableOpacity onPress={() => navigateToCategory('')}>
              <Text style={styles.viewAllText}>Xem tất cả</Text>
            </TouchableOpacity>
          </View>
          <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.categoryContainer}>
            {categories.map((category) => (
              <TouchableOpacity
                key={category.CategoryID}
                style={styles.categoryCard}
                onPress={() => navigateToCategory(category.CategoryID)}
              >
                <View style={styles.categoryIcon}>
                  <Ionicons name={category.Icon} size={30} color="#8B4513" />
                </View>
                <Text style={styles.categoryName}>{category.Name}</Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </Animated.View>

        {/* Sản phẩm theo danh mục */}
        {categories.map((category) => {
          const categoryProducts = getProductsByCategory(category.CategoryID);
          if (!categoryProducts || categoryProducts.length === 0) return null;

          return (
            <Animated.View
              key={category.CategoryID}
              style={[styles.section, { transform: [{ translateY: slideAnim }] }]}
            >
              <View style={styles.categoryHeader}>
                <Text style={styles.sectionTitle}>{category.Name}</Text>
                <TouchableOpacity onPress={() => navigateToCategory(category.CategoryID)}>
                  <Text style={styles.viewAllText}>Tất cả</Text>
                </TouchableOpacity>
              </View>
              <View style={styles.gridContainer}>
                {categoryProducts.map((product) => (
                  <TouchableOpacity
                    key={product.ProductID}
                    style={styles.productCard}
                    onPress={() => navigateToProductDetail(product.ProductID)}
                  >
                    <View style={styles.imageContainer}>
                      <Image source={{ uri: product.Image }} style={styles.productImage} />
                      <TouchableOpacity
                        style={styles.favoriteButton}
                        onPress={() => toggleFavorite(product.ProductID)}
                      >
                        <Ionicons
                          name={favorites.includes(product.ProductID) ? 'heart' : 'heart-outline'}
                          size={20}
                          color={favorites.includes(product.ProductID) ? '#FF0000' : '#8B4513'}
                        />
                      </TouchableOpacity>
                    </View>
                    <View style={styles.productInfo}>
                      <Text style={styles.productName} numberOfLines={1} ellipsizeMode="tail">
                        {product.Name}
                      </Text>
                      <View style={styles.ratingContainer}>
                        <Ionicons name="star" size={14} color="#FFD700" />
                        <Text style={styles.ratingText}>{product.Rating}</Text>
                      </View>
                      <Text style={styles.productPrice}>{product.Price}đ</Text>
                    </View>
                    <TouchableOpacity
                      style={styles.addToCartButton}
                      onPress={() => addToCart(product)}
                    >
                      <Text style={styles.addToCartText}>Thêm vào giỏ</Text>
                    </TouchableOpacity>
                  </TouchableOpacity>
                ))}
              </View>
            </Animated.View>
          );
        })}
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  scrollContainer: {
    flex: 1,
  },
  scrollContent: {
    paddingBottom: 80,
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    margin: 15,
    backgroundColor: '#f0f0f0',
    borderRadius: 25,
    paddingHorizontal: 15,
  },
  searchInput: {
    flex: 1,
    fontSize: 16,
    paddingVertical: 10,
    color: '#333',
  },
  searchIcon: {
    marginLeft: 10,
  },
  bannerContainer: {
    height: 150,
    marginHorizontal: 15,
    borderRadius: 15,
    overflow: 'hidden',
    marginBottom: 20,
  },
  bannerImage: {
    width: '100%',
    height: '100%',
    resizeMode: 'cover',
  },
  bannerOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  bannerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#fff',
  },
  bannerSubtitle: {
    fontSize: 14,
    color: '#fff',
    marginVertical: 5,
  },
  bannerButton: {
    backgroundColor: '#fff',
    paddingHorizontal: 20,
    paddingVertical: 8,
    borderRadius: 20,
  },
  bannerButtonText: {
    color: '#8B4513',
    fontSize: 14,
    fontWeight: '600',
  },
  section: {
    paddingHorizontal: 15,
    marginBottom: 20,
  },
  categoryHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  viewAllText: {
    fontSize: 14,
    color: '#8B4513',
  },
  categoryContainer: {
    flexDirection: 'row',
  },
  categoryCard: {
    alignItems: 'center',
    marginRight: 20,
  },
  categoryIcon: {
    backgroundColor: '#f0f0f0',
    borderRadius: 50,
    padding: 15,
    marginBottom: 5,
  },
  categoryName: {
    fontSize: 14,
    color: '#333',
    textAlign: 'center',
  },
  gridContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  productCard: {
    width: '48%',
    marginBottom: 15,
    backgroundColor: '#fff',
    borderRadius: 10,
    padding: 10,
    elevation: 3,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 5,
  },
  imageContainer: {
    position: 'relative',
  },
  productImage: {
    width: '100%',
    height: 150,
    resizeMode: 'cover',
    borderRadius: 10,
  },
  favoriteButton: {
    position: 'absolute',
    top: 8,
    right: 8,
    backgroundColor: 'rgba(255, 255, 255, 0.8)',
    borderRadius: 15,
    padding: 5,
  },
  productInfo: {
    marginTop: 10,
  },
  productName: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333',
    textAlign: 'center',
  },
  ratingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginVertical: 5,
  },
  ratingText: {
    fontSize: 12,
    color: '#333',
    marginLeft: 5,
  },
  productPrice: {
    fontSize: 14,
    color: '#8B4513',
    fontWeight: '600',
    textAlign: 'center',
  },
  addToCartButton: {
    backgroundColor: '#8B4513',
    paddingVertical: 8,
    paddingHorizontal: 15,
    borderRadius: 20,
    marginTop: 10,
    alignItems: 'center',
  },
  addToCartText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '600',
  },
});
</file>

<file path="(tabs)/profile.tsx">
import { FontAwesome5, Ionicons, MaterialIcons } from '@expo/vector-icons';
import * as ImagePicker from 'expo-image-picker';
import React, { useEffect, useState } from 'react';
import {
  Alert,
  Image,
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from 'react-native';
import { useAuth } from '../../../store/useAuth';

const ProfileScreen = () => {
  const { user, loadUser, setUser } = useAuth();

  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [address, setAddress] = useState('123 Lê Lợi, Q1, TP.HCM');
  const [image, setImage] = useState(null);

  useEffect(() => {
    const fetchUser = async () => {
      await loadUser();
    };
    fetchUser();
  }, []);

  useEffect(() => {
    if (user) {
      setName(user.name || '');
      setEmail(user.email || '');
      setPhone(user.phone || '');
      if (user.avatar) {
        setImage(user.avatar);
      }
    }
  }, [user]);

  const pickImage = async () => {
    const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (!permissionResult.granted) {
      Alert.alert('Quyền bị từ chối', 'Bạn cần cho phép truy cập thư viện ảnh.');
      return;
    }

    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  const handleSave = () => {
    if (!name || !email || !phone) {
      Alert.alert('Lỗi', 'Vui lòng điền đầy đủ thông tin.');
      return;
    }

    const updatedUser = {
      ...user,
      name,
      email,
      phone,
      avatar: image,
    };

    setUser(updatedUser);
    Alert.alert('Thành công', 'Thông tin hồ sơ đã được cập nhật.');
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>👤 Hồ sơ cá nhân</Text>

      <TouchableOpacity onPress={pickImage} style={styles.imagePicker}>
        {image ? (
          <Image source={{ uri: image }} style={styles.avatar} />
        ) : (
          <View style={styles.avatarPlaceholder}>
            <Ionicons name="camera" size={32} color="#888" />
          </View>
        )}
        <Text style={styles.uploadText}>Tải ảnh lên</Text>
      </TouchableOpacity>

      <View style={styles.inputGroup}>
        <FontAwesome5 name="user" size={18} color="#555" style={styles.icon} />
        <TextInput
          style={styles.input}
          value={name}
          onChangeText={setName}
          placeholder="Tên đầy đủ"
        />
      </View>

      <View style={styles.inputGroup}>
        <MaterialIcons name="email" size={18} color="#555" style={styles.icon} />
        <TextInput
          style={styles.input}
          value={email}
          onChangeText={setEmail}
          placeholder="Email"
          keyboardType="email-address"
        />
      </View>

      <View style={styles.inputGroup}>
        <Ionicons name="call" size={18} color="#555" style={styles.icon} />
        <TextInput
          style={styles.input}
          value={phone}
          onChangeText={setPhone}
          placeholder="Số điện thoại"
          keyboardType="phone-pad"
        />
      </View>

      <View style={styles.inputGroup}>
        <Ionicons name="location" size={18} color="#555" style={styles.icon} />
        <TextInput
          style={styles.input}
          value={address}
          onChangeText={setAddress}
          placeholder="Địa chỉ"
        />
      </View>

      <View style={styles.infoBox}>
        <Text style={styles.infoText}>📌 Vai trò: {user?.role || 'N/A'}</Text>
        <Text style={styles.infoText}>
          ✅ Trạng thái: {user?.isActive ? 'Đang hoạt động' : 'Không hoạt động'}
        </Text>
        <Text style={styles.infoText}>
          🕒 Ngày tạo: {new Date(user?.createdAt || '').toLocaleString()}
        </Text>
        <Text style={styles.infoText}>
          🔁 Cập nhật: {new Date(user?.updatedAt || '').toLocaleString()}
        </Text>
      </View>

      <TouchableOpacity style={styles.button} onPress={handleSave}>
        <Text style={styles.buttonText}>💾 Lưu thông tin</Text>
      </TouchableOpacity>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: '#f4f6f8' },
  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, color: '#333' },
  imagePicker: { alignItems: 'center', marginBottom: 20 },
  avatar: { width: 120, height: 120, borderRadius: 60, marginBottom: 10 },
  avatarPlaceholder: {
    width: 120,
    height: 120,
    borderRadius: 60,
    backgroundColor: '#e0e0e0',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 10,
  },
  uploadText: { color: '#007bff', fontWeight: '500' },

  inputGroup: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 10,
    backgroundColor: '#fff',
    paddingHorizontal: 12,
    marginBottom: 15,
  },
  icon: { marginRight: 8 },
  input: { flex: 1, fontSize: 16, paddingVertical: 12 },

  infoBox: {
    padding: 15,
    backgroundColor: '#fff',
    borderRadius: 10,
    borderColor: '#eee',
    borderWidth: 1,
    marginBottom: 20,
  },
  infoText: { fontSize: 14, marginBottom: 5, color: '#444' },

  button: {
    backgroundColor: '#007bff',
    paddingVertical: 14,
    borderRadius: 10,
    alignItems: 'center',
  },
  buttonText: { color: '#fff', fontSize: 16, fontWeight: 'bold' },
});

export default ProfileScreen;
</file>

<file path="(tabs)/reviews.tsx">
// app/home/reviews.tsx
import React, { useEffect, useState } from 'react';
import { ActivityIndicator, ScrollView, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';

const Reviews = () => {
  const [rating, setRating] = useState(0);
  const [comment, setComment] = useState('');
  const [reviews, setReviews] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchReviews = async () => {
      setLoading(true);
      try {
        // TODO: Gọi API để lấy danh sách đánh giá
        // Ví dụ: const response = await AxiosInstance().get('/reviews');
        // setReviews(response);
        setReviews([]);
      } catch (err) {
        console.error('Error fetching reviews:', err);
        setError('Không thể tải đánh giá. Vui lòng thử lại sau.');
        setReviews([]);
      } finally {
        setLoading(false);
      }
    };
    fetchReviews();
  }, []);

  const handleSubmit = async () => {
    // TODO: Gọi API để gửi đánh giá
    // Ví dụ: await AxiosInstance().post('/reviews', { rating, comment });
    console.log({ rating, comment });
  };

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#d4af37" />
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Đánh giá sản phẩm</Text>
      <TextInput
        style={styles.input}
        placeholder="Đánh giá (1-5)"
        keyboardType="numeric"
        onChangeText={(text) => setRating(parseInt(text) || 0)}
      />
      <TextInput
        style={styles.input}
        placeholder="Nhận xét"
        value={comment}
        onChangeText={setComment}
        multiline
      />
      <TouchableOpacity style={styles.button} onPress={handleSubmit}>
        <Text style={styles.buttonText}>Gửi đánh giá</Text>
      </TouchableOpacity>
      {reviews.length === 0 ? (
        <Text style={styles.emptyText}>Chưa có đánh giá nào</Text>
      ) : (
        reviews.map((review) => (
          <View key={review.ReviewID} style={styles.reviewCard}>
            <Text>Đánh giá: {review.Rating}/5</Text>
            <Text>Nhận xét: {review.Comment}</Text>
            <Text>Ngày: {review.CommentDate}</Text>
          </View>
        ))
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10, backgroundColor: '#f0f2f5' },
  title: { fontSize: 24, fontWeight: '800', margin: 10, color: '#1a1a1a' },
  input: { borderWidth: 1, borderColor: '#ccc', borderRadius: 12, padding: 12, marginBottom: 15 },
  button: { backgroundColor: '#d4af37', padding: 12, borderRadius: 12, alignItems: 'center', marginBottom: 15 },
  buttonText: { color: '#fff', fontSize: 16, fontWeight: '600' },
  reviewCard: { backgroundColor: '#fff', padding: 10, marginBottom: 10, borderRadius: 10, elevation: 3 },
  emptyText: { fontSize: 16, color: '#2c2c2c', textAlign: 'center', marginTop: 20 },
  errorText: { fontSize: 16, color: '#c0392b', textAlign: 'center', marginTop: 20 },
});

export default Reviews;
</file>

<file path="_layout.tsx">
import { Drawer } from 'expo-router/drawer';
import React from 'react';
import CustomDrawerContent from '../components/CustomDrawerContent';
import CustomHeader from '../components/CustomHeader';

export default function HomeLayout() {
  return (
    <Drawer
      initialRouteName="(tabs)" // Mặc định vào (tabs)
      screenOptions={{
        headerShown: true,
        header: () => <CustomHeader />,
        drawerPosition: 'left',
        drawerType: 'slide',
        drawerStyle: { width: '80%' },
      }}
      drawerContent={(props) => <CustomDrawerContent {...props} />}
    >
      <Drawer.Screen name="(tabs)" options={{ title: 'Trang chủ' }} />
      <Drawer.Screen name="wishlist" options={{ title: 'Yêu thích' }} />
      <Drawer.Screen name="products" options={{ title: 'Sản phẩm' }} />
      <Drawer.Screen name="orders" options={{ title: 'Đơn hàng' }} />
      <Drawer.Screen name="checkout" options={{ title: 'Thanh toán' }} />
    </Drawer>
  );
}
</file>

<file path="checkout.tsx">
// app/home/checkout.tsx
import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView, ActivityIndicator } from 'react-native';
import { router } from 'expo-router';
import { useProducts } from '../../store/useProducts';

const Checkout = () => {
  const { cart, loading, error } = useProducts();

  const handlePlaceOrder = () => {
    // TODO: Gọi API để tạo đơn hàng
    router.push('./orders');
  };

  const total = cart.reduce((sum, item) => {
    const price = parseFloat(item.Price.replace(' VNĐ', '').replace('.', '')) * item.Quantity;
    return sum + price;
  }, 0);

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#d4af37" />
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Thanh toán</Text>
      {cart.length === 0 ? (
        <Text style={styles.emptyText}>Giỏ hàng trống</Text>
      ) : (
        cart.map((item) => (
          <View key={item.CartID} style={styles.card}>
            <Text style={styles.name}>{item.Name}</Text>
            <Text style={styles.price}>
              {item.Price} x {item.Quantity}
            </Text>
          </View>
        ))
      )}
      {cart.length > 0 && (
        <>
          <View style={styles.summary}>
            <Text style={styles.summaryText}>Tổng cộng: {total.toLocaleString()} VNĐ</Text>
          </View>
          <TouchableOpacity style={styles.button} onPress={handlePlaceOrder}>
            <Text style={styles.buttonText}>Đặt hàng</Text>
          </TouchableOpacity>
        </>
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10, backgroundColor: '#f0f2f5' },
  title: { fontSize: 24, fontWeight: '800', margin: 10, color: '#1a1a1a' },
  card: { backgroundColor: '#fff', padding: 10, marginBottom: 10, borderRadius: 15, elevation: 5 },
  name: { fontSize: 16, fontWeight: '600', color: '#2c2c2c' },
  price: { fontSize: 14, color: '#c0392b', fontWeight: '700' },
  summary: { padding: 10, borderTopWidth: 1, borderTopColor: '#ccc', marginTop: 10 },
  summaryText: { fontSize: 18, fontWeight: '700', color: '#1a1a1a' },
  button: { backgroundColor: '#d4af37', padding: 12, borderRadius: 12, alignItems: 'center', margin: 10 },
  buttonText: { color: '#fff', fontSize: 16, fontWeight: '600' },
  emptyText: { fontSize: 16, color: '#2c2c2c', textAlign: 'center', marginTop: 20 },
  errorText: { fontSize: 16, color: '#c0392b', textAlign: 'center', marginTop: 20 },
});

export default Checkout;
</file>

<file path="orderDetail.tsx">
import React from 'react';
import { View, Text, StyleSheet, ScrollView } from 'react-native';
import { useLocalSearchParams } from 'expo-router'; // Sử dụng hook để lấy params

const orderDetail = () => {
  const { orderId } = useLocalSearchParams(); // Lấy orderId từ params
  const sampleOrderDetails = [
    { OrderDetailID: 1, OrderID: 1, VariantID: 1, Quantity: 2, Price: 499000, Name: 'Áo Polo Nam', PaymentMethod: 'CARD' },
  ];

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Chi tiết đơn hàng #{orderId || 'N/A'}</Text>
      {sampleOrderDetails.map((detail) => (
        <View key={detail.OrderDetailID} style={styles.detailCard}>
          <Text>Sản phẩm: {detail.Name}</Text>
          <Text>Số lượng: {detail.Quantity}</Text>
          <Text>Giá: {detail.Price.toLocaleString()} VNĐ</Text>
          <Text>Phương thức thanh toán: {detail.PaymentMethod}</Text>
        </View>
      ))}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10, backgroundColor: '#f0f2f5' },
  title: { fontSize: 24, fontWeight: '800', margin: 10, color: '#1a1a1a' },
  detailCard: { backgroundColor: '#fff', padding: 15, marginBottom: 10, borderRadius: 15, elevation: 5 },
});

export default orderDetail;
</file>

<file path="orders.tsx">
// app/home/orders.tsx
import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView, ActivityIndicator } from 'react-native';
import { router } from 'expo-router';
import AxiosInstance from '../../axiosInstance/AxiosInstance';

const Orders = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchOrders = async () => {
      setLoading(true);
      try {
        // TODO: Gọi API để lấy danh sách đơn hàng
        // Ví dụ: const response = await AxiosInstance().get('/orders');
        // setOrders(response);
        setOrders([]);
      } catch (err) {
        console.error('Error fetching orders:', err);
        setError('Không thể tải đơn hàng. Vui lòng thử lại sau.');
        setOrders([]);
      } finally {
        setLoading(false);
      }
    };
    fetchOrders();
  }, []);

  const navigateToOrderDetail = (orderId: string) => {
    router.push({ pathname: './orderDetail', params: { orderId: orderId.toString() } });
  };

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#d4af37" />
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Đơn hàng của bạn</Text>
      {orders.length === 0 ? (
        <Text style={styles.emptyText}>Bạn chưa có đơn hàng nào</Text>
      ) : (
        orders.map((order) => (
          <TouchableOpacity
            key={order.OrderID}
            style={styles.orderCard}
            onPress={() => navigateToOrderDetail(order.OrderID)}
          >
            <Text>Đơn hàng #{order.OrderID}</Text>
            <Text>Địa chỉ: {order.ShippingAddress}</Text>
            <Text>Trạng thái: {order.OrderStatus}</Text>
            <Text>Ngày: {order.OrderDate}</Text>
            <Text>Tổng: {order.Total}</Text>
          </TouchableOpacity>
        ))
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10, backgroundColor: '#f0f2f5' },
  title: { fontSize: 24, fontWeight: '800', margin: 10, color: '#1a1a1a' },
  orderCard: { backgroundColor: '#fff', padding: 15, marginBottom: 10, borderRadius: 15, elevation: 5 },
  emptyText: { fontSize: 16, color: '#2c2c2c', textAlign: 'center', marginTop: 20 },
  errorText: { fontSize: 16, color: '#c0392b', textAlign: 'center', marginTop: 20 },
});

export default Orders;
</file>

<file path="productDetail.tsx">
// app/home/productDetail.tsx
import React, { useState } from 'react';
import { View, Text, Image, TouchableOpacity, StyleSheet, ScrollView, ActivityIndicator } from 'react-native';
import { useLocalSearchParams, router } from 'expo-router';
import { useProducts } from '../../store/useProducts';

const ProductDetail = () => {
  const { productId } = useLocalSearchParams();
  const { getProductById, addToCart, loading, error } = useProducts();
  const product = getProductById(Number(productId));

  // TODO: Gọi API để lấy biến thể sản phẩm nếu có
  // Ví dụ: const variantResponse = await AxiosInstance().get(`/variants?productID=${productId}`);
  const [selectedVariant, setSelectedVariant] = useState(null);

  const handleAddToCart = () => {
    if (product) {
      addToCart({ ...product, variant: selectedVariant }, 1);
      router.push('./cart');
    }
  };

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#d4af37" />
      </View>
    );
  }

  if (error || !product) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error || 'Sản phẩm không tồn tại'}</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
        <Text style={styles.backText}>← Quay lại</Text>
      </TouchableOpacity>
      <Image source={{ uri: product.Image }} style={styles.image} />
      <View style={styles.details}>
        <Text style={styles.name}>{product.Name}</Text>
        <Text style={styles.price}>{product.Price}</Text>
        <Text style={styles.description}>{product.Description}</Text>
        <Text style={styles.section}>Chọn biến thể:</Text>
        {selectedVariant ? (
          <TouchableOpacity
            style={styles.variantCard}
            onPress={() => setSelectedVariant(selectedVariant)}
          >
            <Text>Size: {selectedVariant.Size}, Màu: {selectedVariant.Color}, Tồn: {selectedVariant.Stock}</Text>
          </TouchableOpacity>
        ) : (
          <Text style={styles.emptyText}>Không có biến thể nào</Text>
        )}
        <TouchableOpacity style={styles.button} onPress={handleAddToCart}>
          <Text style={styles.buttonText}>Thêm vào giỏ</Text>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10, backgroundColor: '#f0f2f5' },
  image: { width: '100%', height: 300, resizeMode: 'cover', borderRadius: 15 },
  details: { padding: 10 },
  name: { fontSize: 24, fontWeight: '800', color: '#1a1a1a' },
  price: { fontSize: 20, color: '#c0392b', fontWeight: '700', marginVertical: 5 },
  description: { fontSize: 16, color: '#2c2c2c', marginBottom: 15 },
  section: { fontSize: 18, fontWeight: '600', marginTop: 15 },
  variantCard: { backgroundColor: '#fff', padding: 10, marginBottom: 10, borderRadius: 10, elevation: 3 },
  selectedVariant: { borderWidth: 2, borderColor: '#d4af37' },
  button: { backgroundColor: '#d4af37', padding: 12, borderRadius: 12, alignItems: 'center' },
  buttonText: { color: '#fff', fontSize: 16, fontWeight: '600' },
  backButton: {
    position: 'absolute',
    top: 40,
    left: 15,
    backgroundColor: 'rgba(0,0,0,0.5)',
    paddingVertical: 6,
    paddingHorizontal: 12,
    borderRadius: 20,
    zIndex: 10,
  },
  backText: { color: '#fff', fontSize: 16 },
  errorText: { fontSize: 16, color: '#c0392b', textAlign: 'center', marginTop: 20 },
  emptyText: { fontSize: 16, color: '#2c2c2c', textAlign: 'center', marginTop: 10 },
});

export default ProductDetail;
</file>

<file path="products.tsx">
import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView, ActivityIndicator, FlatList, Image } from 'react-native';
import { useLocalSearchParams, router } from 'expo-router';
import { MaterialIcons } from '@expo/vector-icons';
import { useProducts } from '../../store/useProducts';

// Thành phần ProductCard
const ProductCard = ({ product, onPress }) => (
  <TouchableOpacity style={styles.productCard} onPress={onPress}>
    <Image source={{ uri: product.Image }} style={styles.productImage} />
    <Text style={styles.productName}>{product.Name}</Text>
    <View style={styles.ratingContainer}>
      <MaterialIcons name="star" size={16} color="#FFD700" />
      <Text style={styles.ratingText}>{product.Rating || '4.9'}</Text>
    </View>
    <Text style={styles.productPrice}>{product.Price.toLocaleString()}đ</Text>
  </TouchableOpacity>
);

const Products = () => {
  const { categoryId } = useLocalSearchParams();
  const { categories, products, getProductsByCategory, loading, error } = useProducts();

  // Lọc sản phẩm theo danh mục, mặc định tất cả nếu không có categoryId
  const filteredProducts = categoryId ? getProductsByCategory(categoryId as string) : products;

  const navigateToProductDetail = (productId: string) =>
    router.push({ pathname: './productDetail', params: { productId } });

  // Danh sách danh mục bao gồm "Tất cả"
  const categoryList = [{ CategoryID: 'all', Name: 'Tất cả' }, ...categories];

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#d4af37" />
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {/* Header với nút back */}
      <View style={styles.header}>
        <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>
          <MaterialIcons name="arrow-back" size={24} color="#000" />
        </TouchableOpacity>
        <Text style={styles.title}>Danh Mục</Text>
      </View>

      {/* Danh mục (category tabs) cố định trên cùng */}
      <ScrollView
        horizontal
        showsHorizontalScrollIndicator={false}
        style={styles.categoryContainer}
        contentContainerStyle={styles.categoryContent}
      >
        {categoryList.map((cat) => (
          <TouchableOpacity
            key={cat.CategoryID}
            style={[
              styles.categoryCard,
              cat.CategoryID === (categoryId || 'all') && styles.selectedCategory,
            ]}
            onPress={() =>
              router.push({
                pathname: './products',
                params: { categoryId: cat.CategoryID === 'all' ? undefined : cat.CategoryID },
              })
            }
          >
            <Text style={styles.categoryName}>{cat.Name}</Text>
          </TouchableOpacity>
        ))}
      </ScrollView>

      {/* Danh sách sản phẩm với padding-top để tránh bị che bởi category tabs */}
      {filteredProducts.length === 0 ? (
        <View style={styles.emptyContainer}>
          <Text style={styles.emptyText}>Không có sản phẩm trong danh mục này</Text>
        </View>
      ) : (
        <FlatList
          data={filteredProducts}
          renderItem={({ item }) => (
            <ProductCard
              product={item}
              onPress={() => navigateToProductDetail(item.ProductID)}
            />
          )}
          keyExtractor={(item) => item.ProductID}
          numColumns={2}
          columnWrapperStyle={styles.productRow}
          showsVerticalScrollIndicator={false}
          contentContainerStyle={styles.productList}
        />
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    paddingTop: 20,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 10,
    height: 50,
    backgroundColor: '#fff',
    zIndex: 1, 
  },
  backButton: {
    padding: 5,
  },
  title: {
    flex: 1,
    fontSize: 20,
    fontWeight: 'bold',
    color: '#000',
    textAlign: 'center',
  },
  categoryContainer: {
    position: 'absolute', 
    top: 70, 
    left: 0,
    right: 0,
    height: 40, 
    backgroundColor: '#fff',
    zIndex: 1, 
  },
  categoryContent: {
    paddingHorizontal: 10,
    alignItems: 'center',
  },
  categoryCard: {
    paddingVertical: 8,
    paddingHorizontal: 15,
    marginRight: 10,
    backgroundColor: '#f0f0f0',
    borderRadius: 20,
    justifyContent: 'center',
  },
  selectedCategory: {
    backgroundColor: '#d4af37',
  },
  categoryName: {
    fontSize: 14,
    color: '#000',
    fontWeight: '500',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingTop: 10, 
  },
  emptyText: {
    fontSize: 16,
    color: '#2c2c2c',
    textAlign: 'center',
  },
  errorText: {
    fontSize: 16,
    color: '#c0392b',
    textAlign: 'center',
    marginTop: 20,
  },
  productList: {
    paddingTop: 60, 
  },
  productRow: {
    justifyContent: 'space-between',
    paddingHorizontal: 10,
    marginBottom: 10,
  },
  productCard: {
    flex: 1,
    margin: 5,
    backgroundColor: '#fff',
    borderRadius: 10,
    padding: 10,
    alignItems: 'center',
    elevation: 2,
  },
  productImage: {
    width: 120,
    height: 120,
    resizeMode: 'contain',
    marginBottom: 10,
  },
  productName: {
    fontSize: 14,
    fontWeight: '500',
    color: '#000',
    textAlign: 'center',
  },
  ratingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 5,
  },
  ratingText: {
    fontSize: 12,
    color: '#000',
    marginLeft: 5,
  },
  productPrice: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#000',
  },
});

export default Products;
</file>

<file path="wishlist.tsx">
// app/home/wishlist.tsx
import React, { useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView, Image } from 'react-native';
import { useAuth } from '../../store/useAuth';
import { router } from 'expo-router';
import { useProducts } from '../../store/useProducts';

const Wishlist = () => {
  const { user } = useAuth();
  const { wishlist, loading, error } = useProducts();

  const navigateToProductDetail = (productId: string) =>
    router.push({ pathname: '/productDetail', params: { productId } });

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#d4af37" />
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Danh sách yêu thích</Text>
      {wishlist.length === 0 ? (
        <Text style={styles.emptyText}>Danh sách yêu thích trống</Text>
      ) : (
        wishlist.map((item) => (
          <TouchableOpacity
            key={item.WishlistID}
            style={styles.card}
            onPress={() => navigateToProductDetail(item.ProductID)}
          >
            <Image source={{ uri: item.Image }} style={styles.image} />
            <View style={styles.info}>
              <Text style={styles.name}>{item.Name}</Text>
              <Text style={styles.price}>{item.Price}</Text>
            </View>
          </TouchableOpacity>
        ))
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10, backgroundColor: '#f0f2f5' },
  title: { fontSize: 24, fontWeight: '800', margin: 10, color: '#1a1a1a' },
  card: { flexDirection: 'row', backgroundColor: '#fff', padding: 10, margin: 10, borderRadius: 15, elevation: 5 },
  image: { width: 100, height: 100, resizeMode: 'cover', borderRadius: 10 },
  info: { marginLeft: 10, justifyContent: 'center' },
  name: { fontSize: 16, fontWeight: '600', color: '#2c2c2c' },
  price: { fontSize: 14, color: '#c0392b', fontWeight: '700' },
  emptyText: { fontSize: 16, color: '#2c2c2c', textAlign: 'center', marginTop: 20 },
  errorText: { fontSize: 16, color: '#c0392b', textAlign: 'center', marginTop: 20 },
});

export default Wishlist;
</file>

</files>
