This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
components/
  Banner.jsx
  CategoryCard.jsx
  CategoryProductsSection.jsx
  CategorySection.jsx
  CustomDrawerContent.tsx
  CustomHeader.tsx
  FeaturedProductsSection.jsx
  Header.jsx
  ProductCard.jsx
home/
  (tabs)/
    _layout.tsx
  _layout.tsx
  cart.tsx
  checkout.tsx
  index.tsx
  orderDetail.tsx
  orders.tsx
  productDetail.tsx
  products.tsx
  profile.tsx
  reviews.tsx
  wishlist.tsx
_layout.tsx
forgot-password.tsx
index.tsx
login.tsx
OTPScreen.tsx
productDetail.tsx
products.tsx
register.tsx
reset-password.tsx
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="components/Banner.jsx">
import React from 'react';
import { Text, View, TouchableOpacity, Image, StyleSheet } from 'react-native';

const Banner = ({ onPress, fadeAnim }) => {
  return (
    <View style={[styles.bannerContainer, { opacity: fadeAnim }]}>
      <Image
        source={{ uri: 'https://media3.coolmate.me/cdn-cgi/image/width=672,height=990,quality=80,format=auto/uploads/January2024/AT.220.NAU.1.jpg' }}
        style={styles.bannerImage}
      />
      <View style={styles.bannerOverlay}>
        <Text style={styles.bannerTitle}>Khám phá phong cách đỉnh cao</Text>
        <Text style={styles.bannerSubtitle}>Ưu đãi độc quyền - Giảm 50% hôm nay!</Text>
        <TouchableOpacity style={styles.bannerButton} onPress={onPress}>
          <Text style={styles.bannerButtonText}>Mua sắm ngay</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  bannerContainer: {
    position: 'relative',
    height: 300,
    marginBottom: 20,
  },
  bannerImage: {
    width: '100%',
    height: '100%',
    resizeMode: 'cover',
  },
  bannerOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  bannerTitle: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#fff',
    textAlign: 'center',
    textShadowColor: '#000',
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 5,
  },
  bannerSubtitle: {
    fontSize: 18,
    color: '#fff',
    marginVertical: 10,
    textAlign: 'center',
  },
  bannerButton: {
    backgroundColor: '#d4af37',
    paddingHorizontal: 25,
    paddingVertical: 12,
    borderRadius: 30,
    elevation: 5,
  },
  bannerButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
});

export default Banner;
</file>

<file path="components/CategoryCard.jsx">
import React from 'react';
import { Text, View, TouchableOpacity, StyleSheet } from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';

const CategoryCard = ({ category, onPress }) => {
  return (
    <TouchableOpacity style={styles.categoryCard} onPress={() => onPress(category.CategoryID)}>
      <View style={styles.categoryIcon}>
        <MaterialIcons name="category" size={40} color="#d4af37" />
      </View>
      <Text style={styles.categoryName}>{category.Name}</Text>
      <Text style={styles.categoryDesc}>{category.Description}</Text>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  categoryCard: {
    width: 160,
    marginRight: 15,
    backgroundColor: '#2c2c2c',
    borderRadius: 15,
    padding: 15,
    alignItems: 'center',
    elevation: 5,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 10,
  },
  categoryIcon: {
    marginBottom: 10,
  },
  categoryName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#d4af37',
    textAlign: 'center',
  },
  categoryDesc: {
    fontSize: 12,
    color: '#bdc3c7',
    textAlign: 'center',
    marginTop: 5,
  },
});

export default CategoryCard;
</file>

<file path="components/CategoryProductsSection.jsx">
import React from 'react';
import { Animated, Text, View, StyleSheet } from 'react-native';
import ProductCard from './ProductCard';

const CategoryProductsSection = ({ category, products, navigateToProductDetail, slideAnim }) => {
  if (!products || products.length === 0) return null;

  return (
    <Animated.View style={[styles.section, { transform: [{ translateY: slideAnim }] }]}>
      <Text style={styles.sectionTitle}>{category.Name} cao cấp</Text>
      <View style={styles.gridContainer}>
        {products.map((product) => (
          <ProductCard
            key={product.ProductID}
            product={product}
            onPress={navigateToProductDetail}
          />
        ))}
      </View>
    </Animated.View>
  );
};

const styles = StyleSheet.create({
  section: {
    padding: 20,
    backgroundColor: '#fff',
    marginBottom: 15,
    marginHorizontal: 10,
    borderRadius: 20,
    shadowColor: '#000',
    shadowOpacity: 0.2,
    shadowRadius: 15,
    elevation: 10,
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: '800',
    marginBottom: 15,
    color: '#1a1a1a',
    textTransform: 'uppercase',
  },
  gridContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    paddingVertical: 10,
  },
});

export default CategoryProductsSection;
</file>

<file path="components/CategorySection.jsx">
import React from 'react';
import { Animated,  Text, ScrollView, StyleSheet } from 'react-native';
import CategoryCard from './CategoryCard';

const CategorySection = ({ categories, navigateToCategory, slideAnim }) => {
  return (
    <Animated.View style={[styles.section, { transform: [{ translateY: slideAnim }] }]}>
      <Text style={styles.sectionTitle}>Danh mục cao cấp</Text>
      <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.categoryContainer}>
        {categories.map((category) => (
          <CategoryCard key={category.CategoryID} category={category} onPress={navigateToCategory} />
        ))}
      </ScrollView>
    </Animated.View>
  );
};

const styles = StyleSheet.create({
  section: {
    padding: 20,
    backgroundColor: '#fff',
    marginBottom: 15,
    marginHorizontal: 10,
    borderRadius: 20,
    shadowColor: '#000',
    shadowOpacity: 0.2,
    shadowRadius: 15,
    elevation: 10,
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: '800',
    marginBottom: 15,
    color: '#1a1a1a',
    textTransform: 'uppercase',
  },
  categoryContainer: {
    flexDirection: 'row',
    paddingVertical: 10,
  },
});

export default CategorySection;
</file>

<file path="components/CustomDrawerContent.tsx">
import React from 'react';
import { View, Text, Image, StyleSheet, TouchableOpacity } from 'react-native';
import { DrawerContentScrollView, DrawerItemList } from '@react-navigation/drawer';
import { MaterialIcons } from '@expo/vector-icons';
import { useAuth } from '../../store/useAuth';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { router } from 'expo-router';

export default function CustomDrawerContent(props) {
  const { setUser } = useAuth();

  const handleLogout = async () => {
    try {
      await AsyncStorage.removeItem('isLoggedIn');
      await AsyncStorage.removeItem('user');
      setUser(null);
      router.replace('/login');
    } catch (error) {
      console.error('Logout error:', error);
    }
  };

  // Kiểm tra nếu props.state tồn tại
  const hasRoutes = props.state && props.state.routes && props.state.routes.length > 0;

  return (
    <DrawerContentScrollView {...props} style={styles.drawerContainer}>
      {/* Header của Drawer */}
      <View style={styles.header}>
        <Image
          source={{ uri: 'https://media3.coolmate.me/cdn-cgi/image/width=672,height=990,quality=80,format=auto/uploads/January2024/AT.220.NAU.1.jpg' }}
          style={styles.logo}
        />
        <Text style={styles.title}>X Shop</Text>
      </View>

      {/* Danh sách các mục từ Drawer.Screen */}
      {hasRoutes ? (
        <DrawerItemList {...props} />
      ) : (
        <Text style={styles.errorText}>Không có mục điều hướng</Text>
      )}

      {/* Footer của Drawer */}
      <View style={styles.footer}>
        <TouchableOpacity style={styles.footerItem}>
          <MaterialIcons name="settings" size={24} color="#d4af37" />
          <Text style={styles.footerText}>Cài đặt</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.footerItem} onPress={handleLogout}>
          <MaterialIcons name="logout" size={24} color="#d4af37" />
          <Text style={styles.footerText}>Đăng xuất</Text>
        </TouchableOpacity>
      </View>
    </DrawerContentScrollView>
  );
}

const styles = StyleSheet.create({
  drawerContainer: {
    flex: 1,
    backgroundColor: '#fff',
  },
  header: {
    padding: 20,
    alignItems: 'center',
    borderBottomWidth: 1,
    borderBottomColor: '#d4af37',
  },
  logo: {
    width: 100,
    height: 100,
    borderRadius: 50,
    marginBottom: 10,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#d4af37',
  },
  errorText: {
    color: '#fff',
    textAlign: 'center',
    padding: 10,
  },
  footer: {
    marginTop: 'auto',
    borderTopWidth: 1,
    borderTopColor: '#d4af37',
    padding: 20,
  },
  footerItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 10,
  },
  footerText: {
    fontSize: 16,
    color: '#d4af37',
    marginLeft: 10,
  },
});
</file>

<file path="components/CustomHeader.tsx">
import React from 'react';
import { View, Text, Pressable, StyleSheet } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import type { DrawerNavigationProp } from '@react-navigation/drawer';
import { MaterialIcons } from '@expo/vector-icons';
import { Platform, StatusBar } from 'react-native';

type DrawerParamList = {
  index: undefined;
  profile: undefined;
  cart: undefined;      
  search: undefined;    
};

export default function CustomHeader() {
  const navigation = useNavigation<DrawerNavigationProp<DrawerParamList>>();

  return (
    <View style={styles.container}>
      <Pressable onPress={() => navigation.openDrawer()} style={styles.menuButton}>
        <MaterialIcons name="menu" size={28} color="black" />
      </Pressable>

      <View style={styles.logoContainer}>
        <Pressable onPress={() => navigation.navigate('index')}>
          <Text style={styles.logoText}>X Shop</Text>
        </Pressable>
      </View>

      <View style={styles.rightIcons}>
        <Pressable
          onPress={() => navigation.navigate('search')}
          style={{ marginRight: 16 }}
        >
          <MaterialIcons name="search" size={24} color="black" />
        </Pressable>

        <Pressable
          onPress={() => navigation.navigate('profile')}
          style={{ marginRight: 16 }}
        >
          <MaterialIcons name="person" size={24} color="black" />
        </Pressable>

        <Pressable
          onPress={() => navigation.navigate('cart')}
        >
          <MaterialIcons name="shopping-cart" size={24} color="black" />
        </Pressable>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 44,
    height: 56 + (Platform.OS === 'android' ? StatusBar.currentHeight ?? 0 : 44),
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#ddd',
    backgroundColor: '#fff',
  },
  menuButton: {
    padding: 4,
  },
  logoContainer: {
    flex: 1,
    alignItems: 'center',
  },
  logoText: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#000',
  },
  rightIcons: {
    flexDirection: 'row',
    alignItems: 'center',
  },
});
</file>

<file path="components/FeaturedProductsSection.jsx">
import React from 'react';
import { Animated,Text, View, StyleSheet } from 'react-native';
import ProductCard from './ProductCard';

const FeaturedProductsSection = ({ featuredProducts, navigateToProductDetail, slideAnim }) => {
  return (
    <Animated.View style={[styles.section, { transform: [{ translateY: slideAnim }] }]}>
      <Text style={styles.sectionTitle}>Sản phẩm nổi bật</Text>
      <View style={styles.gridContainer}>
        {featuredProducts.map((product) => (
          <ProductCard
            key={product.ProductID}
            product={product}
            onPress={navigateToProductDetail}
            isFeatured
          />
        ))}
      </View>
    </Animated.View>
  );
};

const styles = StyleSheet.create({
  section: {
    padding: 20,
    backgroundColor: '#fff',
    marginBottom: 15,
    marginHorizontal: 10,
    borderRadius: 20,
    shadowColor: '#000',
    shadowOpacity: 0.2,
    shadowRadius: 15,
    elevation: 10,
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: '800',
    marginBottom: 15,
    color: '#1a1a1a',
    textTransform: 'uppercase',
  },
  gridContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    paddingVertical: 10,
  },
});

export default FeaturedProductsSection;
</file>

<file path="components/Header.jsx">
import React from 'react';
import { Text, View, TouchableOpacity, StyleSheet } from 'react-native';

const Header = ({ user, onLogout, style }) => {
  return (
    <View style={[styles.header, style]}>
      <Text style={styles.greeting}>Xin chào, {user?.username ?? 'bạn'}!</Text>
      <TouchableOpacity style={styles.logoutBtn} onPress={onLogout}>
        <Text style={styles.logoutText}>Đăng xuất</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  header: {
    backgroundColor: '#1a1a1a',
    padding: 20,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderBottomLeftRadius: 20,
    borderBottomRightRadius: 20,
    marginBottom: 10,
  },
  greeting: {
    fontSize: 28,
    color: '#d4af37',
    fontWeight: 'bold',
  },
  logoutBtn: {
    backgroundColor: '#c0392b',
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: '#fff',
  },
  logoutText: {
    color: '#fff',
    fontWeight: '600',
    fontSize: 16,
  },
});

export default Header;
</file>

<file path="components/ProductCard.jsx">
import React from 'react';
import { Text, View, TouchableOpacity, Image, StyleSheet } from 'react-native';

const ProductCard = ({ product, onPress, isFeatured = false }) => {
  return (
    <TouchableOpacity
      style={isFeatured ? styles.featuredProductCard : styles.productCard}
      onPress={() => onPress(product.ProductID)}
    >
      <Image source={{ uri: product.Image }} style={isFeatured ? styles.featuredProductImage : styles.productImage} />
      <View style={styles.productInfo}>
        <Text style={isFeatured ? styles.featuredProductName : styles.productName}>{product.Name}</Text>
        <Text style={isFeatured ? styles.featuredProductPrice : styles.productPrice}>{product.Price}</Text>
      </View>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  featuredProductCard: {
    width: '48%',
    marginBottom: 15,
    backgroundColor: '#fff',
    borderRadius: 20,
    padding: 10,
    alignItems: 'center',
    elevation: 8,
    shadowColor: '#000',
    shadowOpacity: 0.2,
    shadowRadius: 10,
  },
  productCard: {
    width: '48%',
    marginBottom: 15,
    backgroundColor: '#fff',
    borderRadius: 15,
    padding: 10,
    alignItems: 'center',
    elevation: 5,
    shadowColor: '#000',
    shadowAmerica: 0.15,
    shadowRadius: 10,
  },
  featuredProductImage: {
    width: 160,
    height: 160,
    resizeMode: 'cover',
    borderRadius: 15,
  },
  productImage: {
    width: 140,
    height: 140,
    resizeMode: 'cover',
    borderRadius: 10,
  },
  productInfo: {
    alignItems: 'center',
    marginTop: 10,
  },
  featuredProductName: {
    fontSize: 16,
    fontWeight: '700',
    color: '#1a1a1a',
    textAlign: 'center',
  },
  productName: {
    fontSize: 15,
    fontWeight: '600',
    color: '#2c2c2c',
    textAlign: 'center',
  },
  featuredProductPrice: {
    fontSize: 16,
    color: '#c0392b',
    fontWeight: '700',
    marginTop: 5,
  },
  productPrice: {
    fontSize: 14,
    color: '#c0392b',
    fontWeight: '600',
    marginTop: 5,
  },
});

export default ProductCard;
</file>

<file path="home/(tabs)/_layout.tsx">
import { Ionicons } from '@expo/vector-icons';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import React from 'react';
import { View, StyleSheet } from 'react-native';
import CartScreen from '../cart';
import IndexScreen from '../index';
import ProfileScreen from '../profile';
import ReviewsScreen from '../reviews';

const Tab = createBottomTabNavigator();

export default function TabLayout() {
  return (
    <Tab.Navigator
      screenOptions={({ route }) => ({
        tabBarShowLabel: false,
        tabBarStyle: styles.tabBar,
        tabBarItemStyle: styles.tabItem,
        headerShown: false,
        tabBarIcon: ({ focused, color, size }) => {
          let iconName;

          if (route.name === 'index') iconName = 'home-outline';
          else if (route.name === 'cart') iconName = 'cart-outline';
          else if (route.name === 'reviews') iconName = 'chatbox-ellipses-outline';
          else if (route.name === 'profile') iconName = 'person-outline';

          return (
            <View style={[styles.iconContainer, focused && styles.focusedIconContainer]}>
              <Ionicons name={iconName} size={24} color={focused ? '#8B4513' : '#fff'} />
            </View>
          );
        },
      })}
    >
      <Tab.Screen name="index" component={IndexScreen} />
      <Tab.Screen name="cart" component={CartScreen} />
      <Tab.Screen name="reviews" component={ReviewsScreen} />
      <Tab.Screen name="profile" component={ProfileScreen} />
    </Tab.Navigator>
  );
}

const styles = StyleSheet.create({
  tabBar: {
    position: 'absolute',
    bottom: 20,
    left: 40, // Tăng padding bên trái để "bóp" vào
    right: 40, // Tăng padding bên phải để "bóp" vào
    height: 70,
    borderRadius: 35,
    backgroundColor: '#8B4513',
    borderTopWidth: 0,
    elevation: 10,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 15,
  },
  tabItem: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    marginHorizontal: 5,
  },
  iconContainer: {
    padding: 12,
    borderRadius: 30,
    alignItems: 'center',
    justifyContent: 'center',
    width: 50,
    height: 50,
  },
  focusedIconContainer: {
    backgroundColor: '#fff',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 5,
  },
});
</file>

<file path="home/_layout.tsx">
import { Drawer } from 'expo-router/drawer';
import React from 'react';
import CustomDrawerContent from '../components/CustomDrawerContent';
import CustomHeader from '../components/CustomHeader';

export default function HomeLayout() {
  return (
    <Drawer
      initialRouteName="(tabs)"
      screenOptions={{
        headerShown: true,
        header: () => <CustomHeader />,
        drawerPosition: 'left',
        drawerType: 'slide',
        drawerStyle: { width: '80%' },
      }}
      drawerContent={(props) => <CustomDrawerContent {...props} />}
    >
      <Drawer.Screen name="(tabs)" options={{ title: 'Trang chủ' }} />
      <Drawer.Screen name="wishlist" options={{ title: 'Yêu thích' }} />
      <Drawer.Screen name="products" options={{ title: 'Sản phẩm' }} />
      <Drawer.Screen name="productDetail" options={{ title: 'Chi tiết sản phẩm' }} />
      <Drawer.Screen name="orders" options={{ title: 'Đơn hàng' }} />
      <Drawer.Screen name="orderDetail" options={{ title: 'Chi tiết đơn hàng' }} />
      <Drawer.Screen name="checkout" options={{ title: 'Thanh toán' }} />
    </Drawer>
  );
}
</file>

<file path="home/cart.tsx">
import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView, Image } from 'react-native';
import { router } from 'expo-router';
import { useProducts } from '../../store/useProducts';
import ProductCard from '../components/ProductCard';

const Cart = () => {
  const { cart, loading, error } = useProducts();

  const navigateToCheckout = () => router.push('./checkout');

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#d4af37" />
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Giỏ hàng</Text>
      {cart.length === 0 ? (
        <Text style={styles.emptyText}>Giỏ hàng trống</Text>
      ) : (
        cart.map((item) => (
          <View key={item.CartID} style={styles.card}>
            <Image source={{ uri: item.Image }} style={styles.image} />
            <View style={styles.info}>
              <Text style={styles.name}>{item.Name}</Text>
              <Text style={styles.price}>
                {item.Price} x {item.Quantity}
              </Text>
            </View>
          </View>
        ))
      )}
      {cart.length > 0 && (
        <TouchableOpacity style={styles.button} onPress={navigateToCheckout}>
          <Text style={styles.buttonText}>Thanh toán</Text>
        </TouchableOpacity>
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10, backgroundColor: '#f0f2f5' },
  title: { fontSize: 24, fontWeight: '800', margin: 10, color: '#1a1a1a' },
  card: { flexDirection: 'row', backgroundColor: '#fff', padding: 10, marginBottom: 10, borderRadius: 15, elevation: 5 },
  image: { width: 100, height: 100, resizeMode: 'cover', borderRadius: 10 },
  info: { marginLeft: 10, justifyContent: 'center' },
  name: { fontSize: 16, fontWeight: '600', color: '#2c2c2c' },
  price: { fontSize: 14, color: '#c0392b', fontWeight: '700' },
  button: { backgroundColor: '#d4af37', padding: 12, borderRadius: 12, alignItems: 'center', margin: 10 },
  buttonText: { color: '#fff', fontSize: 16, fontWeight: '600' },
  emptyText: { fontSize: 16, color: '#2c2c2c', textAlign: 'center', marginTop: 20 },
  errorText: { fontSize: 16, color: '#c0392b', textAlign: 'center', marginTop: 20 },
});

export default Cart;
</file>

<file path="home/checkout.tsx">
import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView } from 'react-native';
import { router } from 'expo-router';
import { useProducts } from '../../store/useProducts';

const Checkout = () => {
  const { cart } = useProducts();

  const handlePlaceOrder = () => {
    // TODO: Gọi API để tạo đơn hàng
    router.push('./orders');
  };

  const total = cart.reduce((sum, item) => {
    const price = parseFloat(item.Price.replace(' VNĐ', '').replace('.', '')) * item.Quantity;
    return sum + price;
  }, 0);

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Thanh toán</Text>
      {cart.map((item) => (
        <View key={item.CartID} style={styles.card}>
          <Text style={styles.name}>{item.Name}</Text>
          <Text style={styles.price}>
            {item.Price} x {item.Quantity}
          </Text>
        </View>
      ))}
      <View style={styles.summary}>
        <Text style={styles.summaryText}>Tổng cộng: {total.toLocaleString()} VNĐ</Text>
      </View>
      <TouchableOpacity style={styles.button} onPress={handlePlaceOrder}>
        <Text style={styles.buttonText}>Đặt hàng</Text>
      </TouchableOpacity>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10, backgroundColor: '#f0f2f5' },
  title: { fontSize: 24, fontWeight: '800', margin: 10, color: '#1a1a1a' },
  card: { backgroundColor: '#fff', padding: 10, marginBottom: 10, borderRadius: 15, elevation: 5 },
  name: { fontSize: 16, fontWeight: '600', color: '#2c2c2c' },
  price: { fontSize: 14, color: '#c0392b', fontWeight: '700' },
  summary: { padding: 10, borderTopWidth: 1, borderTopColor: '#ccc', marginTop: 10 },
  summaryText: { fontSize: 18, fontWeight: '700', color: '#1a1a1a' },
  button: { backgroundColor: '#d4af37', padding: 12, borderRadius: 12, alignItems: 'center', margin: 10 },
  buttonText: { color: '#fff', fontSize: 16, fontWeight: '600' },
});

export default Checkout;
</file>

<file path="home/index.tsx">
import React, { useEffect, useRef, useState } from 'react';
import { useAuth } from '../../store/useAuth';
import {
  Text,
  View,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Image,
  Animated,
  Easing,
  TextInput,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { router } from 'expo-router';
import { MaterialIcons, Ionicons } from '@expo/vector-icons';
import { Alert } from 'react-native';
import AxiosInstance from '../../axiosInstance/AxiosInstance';

export default function HomeScreen() {
  const { user, loadUser, setUser } = useAuth();
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const slideAnim = useRef(new Animated.Value(50)).current;
  const [categories, setCategories] = useState([]); // State lưu danh mục
  const [productsByCategory, setProductsByCategory] = useState({}); // State lưu sản phẩm theo danh mục

  // Hàm gọi API để lấy danh mục
  const fetchCategories = async () => {
    try {
      const response = await AxiosInstance().get('/category');
      console.log('API Categories Response:', response);
      const fetchedCategories = response.map((category) => ({
        CategoryID: category._id,
        Name: category.name,
        Icon: getIconForCategory(category.name),
        Description: category.description,
        Status: category.status,
      }));
      setCategories(fetchedCategories);
    } catch (error) {
      console.error('Error fetching categories:', error);
      Alert.alert('Lỗi', 'Không thể tải danh mục. Vui lòng thử lại sau.');
    }
  };

  // Hàm gọi API để lấy sản phẩm
  const fetchProducts = async () => {
    try {
      const response = await AxiosInstance().get('/products');
      console.log('API Products Response:', response);
      const products = response.products;

      // Tạo object để nhóm sản phẩm theo categoryID
      const groupedProducts = {};
      for (const product of products) {
        const categoryId = product.categoryID;
        if (!groupedProducts[categoryId]) {
          groupedProducts[categoryId] = [];
        }

        // Gọi API lấy hình ảnh cho sản phẩm
        const imageResponse = await AxiosInstance().get(`/img?productID=${product._id}`);
        const imageURLs = imageResponse[0]?.imageURL || ['https://via.placeholder.com/150']; // Fallback nếu không có ảnh

        groupedProducts[categoryId].push({
          ProductID: product._id,
          CategoryID: product.categoryID,
          Name: product.name,
          Price: product.price.toLocaleString('vi-VN'), // Định dạng giá
          Rating: 4.0, // Giả lập rating vì API không cung cấp
          Image: imageURLs[0], // Lấy ảnh đầu tiên
        });
      }

      setProductsByCategory(groupedProducts);
    } catch (error) {
      console.error('Error fetching products:', error);
      Alert.alert('Lỗi', 'Không thể tải sản phẩm. Vui lòng thử lại sau.');
    }
  };

  // Hàm ánh xạ tên danh mục với icon
  const getIconForCategory = (name) => {
    switch (name) {
      case 'Áo Khoác':
        return 'jacket-outline';
      case 'Áo Polo':
        return 'shirt-outline';
      case 'Áo Thun':
        return 'shirt-outline';
      case 'Áo Sơ Mi':
        return 'shirt-outline';
      case 'Quần Dài':
        return 'man-outline';
      case 'Quần Đùi':
        return 'man-outline';
      default:
        return 'cube-outline';
    }
  };

  useEffect(() => {
    loadUser();
    fetchCategories(); // Gọi API danh mục
    fetchProducts(); // Gọi API sản phẩm

    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 1200,
      easing: Easing.ease,
      useNativeDriver: true,
    }).start();

    Animated.timing(slideAnim, {
      toValue: 0,
      duration: 1000,
      delay: 400,
      easing: Easing.out(Easing.exp),
      useNativeDriver: true,
    }).start();
  }, []);

  const handleLogout = async () => {
    await AsyncStorage.removeItem('isLoggedIn');
    setUser(null);
    router.replace('./login');
    Alert.alert('Đăng xuất', 'Bạn đã đăng xuất thành công.');
  };

  const navigateToCategory = (categoryId) => router.push({ pathname: './products', params: { categoryId } });
  const navigateToProductDetail = (productId) => router.push({ pathname: './productDetail', params: { productId } });

  return (
    <View style={styles.container}>
      <ScrollView style={styles.scrollContainer} contentContainerStyle={styles.scrollContent}>
        {/* Thanh tìm kiếm */}
        <View style={styles.searchContainer}>
          <TextInput style={styles.searchInput} placeholder="Tìm kiếm" placeholderTextColor="#999" />
          <MaterialIcons name="search" size={24} color="#8B4513" style={styles.searchIcon} />
        </View>

        {/* Banner quảng cáo */}
        <Animated.View style={[styles.bannerContainer, { opacity: fadeAnim }]}>
          <Image
            source={{ uri: 'https://via.placeholder.com/400x150.png?text=New+Collection' }}
            style={styles.bannerImage}
          />
          <View style={styles.bannerOverlay}>
            <Text style={styles.bannerTitle}>New Collection</Text>
            <Text style={styles.bannerSubtitle}>Discount 50% for transactions</Text>
            <TouchableOpacity style={styles.bannerButton} onPress={() => navigateToCategory(categories[0]?.CategoryID)}>
              <Text style={styles.bannerButtonText}>SHOP NOW</Text>
            </TouchableOpacity>
          </View>
        </Animated.View>

        {/* Danh mục */}
        <Animated.View style={[styles.section, { transform: [{ translateY: slideAnim }] }]}>
          <View style={styles.categoryHeader}>
            <Text style={styles.sectionTitle}>Danh Mục</Text>
            <TouchableOpacity>
              <Text style={styles.viewAllText}>Xem tất cả</Text>
            </TouchableOpacity>
          </View>
          <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.categoryContainer}>
            {categories.map((category) => (
              <TouchableOpacity
                key={category.CategoryID}
                style={styles.categoryCard}
                onPress={() => navigateToCategory(category.CategoryID)}
              >
                <View style={styles.categoryIcon}>
                  <Ionicons name={category.Icon} size={30} color="#8B4513" />
                </View>
                <Text style={styles.categoryName}>{category.Name}</Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </Animated.View>

        {/* Sản phẩm theo danh mục */}
        {categories.map((category) => {
          const products = productsByCategory[category.CategoryID];
          if (!products || products.length === 0) return null;

          return (
            <Animated.View
              key={category.CategoryID}
              style={[styles.section, { transform: [{ translateY: slideAnim }] }]}
            >
              <View style={styles.categoryHeader}>
                <Text style={styles.sectionTitle}>{category.Name}</Text>
                <TouchableOpacity>
                  <Text style={styles.viewAllText}>Tất cả</Text>
                </TouchableOpacity>
              </View>
              <View style={styles.gridContainer}>
                {products.map((product) => (
                  <TouchableOpacity
                    key={product.ProductID}
                    style={styles.productCard}
                    onPress={() => navigateToProductDetail(product.ProductID)}
                  >
                    <Image source={{ uri: product.Image }} style={styles.productImage} />
                    <View style={styles.productInfo}>
                      <Text style={styles.productName}>{product.Name}</Text>
                      <View style={styles.ratingContainer}>
                        <Ionicons name="star" size={14} color="#FFD700" />
                        <Text style={styles.ratingText}>{product.Rating}</Text>
                      </View>
                      <Text style={styles.productPrice}>{product.Price}đ</Text>
                    </View>
                  </TouchableOpacity>
                ))}
              </View>
            </Animated.View>
          );
        })}
      </ScrollView>
    </View>
  );
}

// Styles giữ nguyên như code gốc
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  scrollContainer: {
    flex: 1,
  },
  scrollContent: {
    paddingBottom: 80,
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    margin: 15,
    backgroundColor: '#f0f0f0',
    borderRadius: 25,
    paddingHorizontal: 15,
  },
  searchInput: {
    flex: 1,
    fontSize: 16,
    paddingVertical: 10,
    color: '#333',
  },
  searchIcon: {
    marginLeft: 10,
  },
  bannerContainer: {
    height: 150,
    marginHorizontal: 15,
    borderRadius: 15,
    overflow: 'hidden',
    marginBottom: 20,
  },
  bannerImage: {
    width: '100%',
    height: '100%',
    resizeMode: 'cover',
  },
  bannerOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  bannerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#fff',
  },
  bannerSubtitle: {
    fontSize: 14,
    color: '#fff',
    marginVertical: 5,
  },
  bannerButton: {
    backgroundColor: '#fff',
    paddingHorizontal: 20,
    paddingVertical: 8,
    borderRadius: 20,
  },
  bannerButtonText: {
    color: '#8B4513',
    fontSize: 14,
    fontWeight: '600',
  },
  section: {
    paddingHorizontal: 15,
    marginBottom: 20,
  },
  categoryHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  viewAllText: {
    fontSize: 14,
    color: '#8B4513',
  },
  categoryContainer: {
    flexDirection: 'row',
  },
  categoryCard: {
    alignItems: 'center',
    marginRight: 20,
  },
  categoryIcon: {
    backgroundColor: '#f0f0f0',
    borderRadius: 50,
    padding: 15,
    marginBottom: 5,
  },
  categoryName: {
    fontSize: 14,
    color: '#333',
    textAlign: 'center',
  },
  gridContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  productCard: {
    width: '48%',
    marginBottom: 15,
    backgroundColor: '#fff',
    borderRadius: 10,
    padding: 10,
    elevation: 3,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 5,
  },
  productImage: {
    width: '100%',
    height: 150,
    resizeMode: 'cover',
    borderRadius: 10,
  },
  productInfo: {
    marginTop: 10,
  },
  productName: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333',
    textAlign: 'center',
  },
  ratingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginVertical: 5,
  },
  ratingText: {
    fontSize: 12,
    color: '#333',
    marginLeft: 5,
  },
  productPrice: {
    fontSize: 14,
    color: '#8B4513',
    fontWeight: '600',
    textAlign: 'center',
  },
});
</file>

<file path="home/orderDetail.tsx">
import React from 'react';
import { View, Text, StyleSheet, ScrollView } from 'react-native';
import { useLocalSearchParams } from 'expo-router'; // Sử dụng hook để lấy params

const orderDetail = () => {
  const { orderId } = useLocalSearchParams(); // Lấy orderId từ params
  const sampleOrderDetails = [
    { OrderDetailID: 1, OrderID: 1, VariantID: 1, Quantity: 2, Price: 499000, Name: 'Áo Polo Nam', PaymentMethod: 'CARD' },
  ];

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Chi tiết đơn hàng #{orderId || 'N/A'}</Text>
      {sampleOrderDetails.map((detail) => (
        <View key={detail.OrderDetailID} style={styles.detailCard}>
          <Text>Sản phẩm: {detail.Name}</Text>
          <Text>Số lượng: {detail.Quantity}</Text>
          <Text>Giá: {detail.Price.toLocaleString()} VNĐ</Text>
          <Text>Phương thức thanh toán: {detail.PaymentMethod}</Text>
        </View>
      ))}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10, backgroundColor: '#f0f2f5' },
  title: { fontSize: 24, fontWeight: '800', margin: 10, color: '#1a1a1a' },
  detailCard: { backgroundColor: '#fff', padding: 15, marginBottom: 10, borderRadius: 15, elevation: 5 },
});

export default orderDetail;
</file>

<file path="home/orders.tsx">
import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView } from 'react-native';
import { router } from 'expo-router';

const orders = () => {
  const sampleOrders = [
    { OrderID: 1, UserID: 1, ShippingAddress: '123 Le Loi, Q1', OrderStatus: 'Pending', OrderDate: '2025-05-18', Total: '998.000 VNĐ' },
  ];

  const navigateToOrderDetail = (orderId) => {
    router.push({ pathname: './orderDetail', params: { orderId: orderId.toString() } }); // Đảm bảo orderId là string
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Đơn hàng của bạn</Text>
      {sampleOrders.map((order) => (
        <TouchableOpacity
          key={order.OrderID}
          style={styles.orderCard}
          onPress={() => navigateToOrderDetail(order.OrderID)}
        >
          <Text>Đơn hàng #{order.OrderID}</Text>
          <Text>Địa chỉ: {order.ShippingAddress}</Text>
          <Text>Trạng thái: {order.OrderStatus}</Text>
          <Text>Ngày: {order.OrderDate}</Text>
          <Text>Tổng: {order.Total}</Text>
        </TouchableOpacity>
      ))}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10, backgroundColor: '#f0f2f5' },
  title: { fontSize: 24, fontWeight: '800', margin: 10, color: '#1a1a1a' },
  orderCard: { backgroundColor: '#fff', padding: 15, marginBottom: 10, borderRadius: 15, elevation: 5 },
});

export default orders;
</file>

<file path="home/productDetail.tsx">
import React, { useState } from 'react';
import { View, Text, Image, TouchableOpacity, StyleSheet, ScrollView, ActivityIndicator } from 'react-native';
import { useLocalSearchParams, router } from 'expo-router';
import { useProducts } from '../../store/useProducts';
import Cart from './cart';

const ProductDetail = () => {
  const { productId } = useLocalSearchParams();
  const { getProductById, addToCart, loading, error } = useProducts();
  const [selectedVariant, setSelectedVariant] = useState({ Size: 'M', Color: 'Nâu', Stock: 50 });

  const product = getProductById(Number(productId));
  const variants = [
    { VariantID: 1, ProductID: Number(productId), Size: 'M', Color: 'Nâu', Stock: 50 },
    { VariantID: 2, Size: 'L', Color: 'Đen', Stock: 30 },
  ];

  const handleAddToCart = () => {
    if (product) {
      addToCart({ ...product, ...selectedVariant }, 1);
      router.push('./home/cart');
    }
  };

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#d4af37" />
      </View>
    );
  }

  if (error || !product) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error || 'Sản phẩm không tồn tại'}</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
        <Text style={styles.backText}>← Quay lại</Text>
      </TouchableOpacity>
      <Image source={{ uri: product.Image }} style={styles.image} />
      <View style={styles.details}>
        <Text style={styles.name}>{product.Name}</Text>
        <Text style={styles.price}>{product.Price}</Text>
        <Text style={styles.description}>{product.Description}</Text>
        <Text style={styles.section}>Chọn biến thể:</Text>
        {variants.map((variant) => (
          <TouchableOpacity
            key={variant.VariantID}
            style={[
              styles.variantCard,
              selectedVariant.VariantID === variant.VariantID && styles.selectedVariant,
            ]}
            onPress={() => setSelectedVariant(variant)}
          >
            <Text>Size: {variant.Size}, Màu: {variant.Color}, Tồn: {variant.Stock}</Text>
          </TouchableOpacity>
        ))}
        <TouchableOpacity style={styles.button} onPress={handleAddToCart}>
          <Text style={styles.buttonText}>Thêm vào giỏ</Text>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10, backgroundColor: '#f0f2f5' },
  image: { width: '100%', height: 300, resizeMode: 'cover', borderRadius: 15 },
  details: { padding: 10 },
  name: { fontSize: 24, fontWeight: '800', color: '#1a1a1a' },
  price: { fontSize: 20, color: '#c0392b', fontWeight: '700', marginVertical: 5 },
  description: { fontSize: 16, color: '#2c2c2c', marginBottom: 15 },
  section: { fontSize: 18, fontWeight: '600', marginTop: 15 },
  variantCard: { backgroundColor: '#fff', padding: 10, marginBottom: 10, borderRadius: 10, elevation: 3 },
  selectedVariant: { borderWidth: 2, borderColor: '#d4af37' },
  button: { backgroundColor: '#d4af37', padding: 12, borderRadius: 12, alignItems: 'center' },
  buttonText: { color: '#fff', fontSize: 16, fontWeight: '600' },
  backButton: {
    position: 'absolute',
    top: 40,
    left: 15,
    backgroundColor: 'rgba(0,0,0,0.5)',
    paddingVertical: 6,
    paddingHorizontal: 12,
    borderRadius: 20,
    zIndex: 10,
  },
  backText: { color: '#fff', fontSize: 16 },
  errorText: { fontSize: 16, color: '#c0392b', textAlign: 'center', marginTop: 20 },
});

export default ProductDetail;
</file>

<file path="home/products.tsx">
import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView, ActivityIndicator } from 'react-native';
import { useLocalSearchParams, router } from 'expo-router';
import { MaterialIcons } from '@expo/vector-icons';
import { useProducts } from '../../store/useProducts';
import ProductCard from '../components/ProductCard';

const Products = () => {
  const { categoryId } = useLocalSearchParams();
  const { categories, getProductsByCategory, loading, error } = useProducts();

  const products = categoryId ? getProductsByCategory(Number(categoryId)) : [];

  const navigateToProductDetail = (productId: number) =>
    router.push({ pathname: './productDetail', params: { productId: productId.toString() } });

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#d4af37" />
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>
        <MaterialIcons name="arrow-back" size={24} color="#000" />
        <Text style={styles.backText}>Quay lại</Text>
      </TouchableOpacity>

      <Text style={styles.title}>Sản phẩm</Text>

      <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.categoryContainer}>
        {categories.map((cat) => (
          <TouchableOpacity
            key={cat.CategoryID}
            style={styles.categoryCard}
            onPress={() => router.push({ pathname: './products', params: { categoryId: cat.CategoryID.toString() } })}
          >
            <Text style={styles.categoryName}>{cat.Name}</Text>
          </TouchableOpacity>
        ))}
      </ScrollView>

      {products.length === 0 ? (
        <Text style={styles.emptyText}>Không có sản phẩm trong danh mục này</Text>
      ) : (
        products.map((product) => (
          <ProductCard
            key={product.ProductID}
            product={product}
            onPress={navigateToProductDetail}
          />
        ))
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10, backgroundColor: '#f0f2f5', marginTop: 30 },
  backButton: { flexDirection: 'row', alignItems: 'center', marginBottom: 5 },
  backText: { marginLeft: 5, fontSize: 16, color: '#000' },
  title: { fontSize: 24, fontWeight: '800', margin: 10, color: '#1a1a1a' },
  categoryContainer: { flexDirection: 'row', paddingVertical: 10 },
  categoryCard: { padding: 10, marginRight: 10, backgroundColor: '#2c2c2c', borderRadius: 10 },
  categoryName: { color: '#d4af37', fontSize: 16 },
  emptyText: { fontSize: 16, color: '#2c2c2c', textAlign: 'center', marginTop: 20 },
  errorText: { fontSize: 16, color: '#c0392b', textAlign: 'center', marginTop: 20 },
});

export default Products;
</file>

<file path="home/profile.tsx">
import React, { useEffect, useState } from 'react';
import {
  Alert,
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
  Image,
} from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import { useAuth } from '../../store/useAuth';
import { Ionicons, MaterialIcons, FontAwesome5 } from '@expo/vector-icons';

const ProfileScreen = () => {
  const { user, loadUser, setUser } = useAuth();

  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [address, setAddress] = useState('123 Lê Lợi, Q1, TP.HCM');
  const [image, setImage] = useState(null);

  useEffect(() => {
    const fetchUser = async () => {
      await loadUser();
    };
    fetchUser();
  }, []);

  useEffect(() => {
    if (user) {
      setName(user.name || '');
      setEmail(user.email || '');
      setPhone(user.phone || '');
      if (user.avatar) {
        setImage(user.avatar);
      }
    }
  }, [user]);

  const pickImage = async () => {
    const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (!permissionResult.granted) {
      Alert.alert('Quyền bị từ chối', 'Bạn cần cho phép truy cập thư viện ảnh.');
      return;
    }

    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  const handleSave = () => {
    if (!name || !email || !phone) {
      Alert.alert('Lỗi', 'Vui lòng điền đầy đủ thông tin.');
      return;
    }

    const updatedUser = {
      ...user,
      name,
      email,
      phone,
      avatar: image,
    };

    setUser(updatedUser);
    Alert.alert('Thành công', 'Thông tin hồ sơ đã được cập nhật.');
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>👤 Hồ sơ cá nhân</Text>

      <TouchableOpacity onPress={pickImage} style={styles.imagePicker}>
        {image ? (
          <Image source={{ uri: image }} style={styles.avatar} />
        ) : (
          <View style={styles.avatarPlaceholder}>
            <Ionicons name="camera" size={32} color="#888" />
          </View>
        )}
        <Text style={styles.uploadText}>Tải ảnh lên</Text>
      </TouchableOpacity>

      <View style={styles.inputGroup}>
        <FontAwesome5 name="user" size={18} color="#555" style={styles.icon} />
        <TextInput
          style={styles.input}
          value={name}
          onChangeText={setName}
          placeholder="Tên đầy đủ"
        />
      </View>

      <View style={styles.inputGroup}>
        <MaterialIcons name="email" size={18} color="#555" style={styles.icon} />
        <TextInput
          style={styles.input}
          value={email}
          onChangeText={setEmail}
          placeholder="Email"
          keyboardType="email-address"
        />
      </View>

      <View style={styles.inputGroup}>
        <Ionicons name="call" size={18} color="#555" style={styles.icon} />
        <TextInput
          style={styles.input}
          value={phone}
          onChangeText={setPhone}
          placeholder="Số điện thoại"
          keyboardType="phone-pad"
        />
      </View>

      <View style={styles.inputGroup}>
        <Ionicons name="location" size={18} color="#555" style={styles.icon} />
        <TextInput
          style={styles.input}
          value={address}
          onChangeText={setAddress}
          placeholder="Địa chỉ"
        />
      </View>

      <View style={styles.infoBox}>
        <Text style={styles.infoText}>📌 Vai trò: {user?.role || 'N/A'}</Text>
        <Text style={styles.infoText}>
          ✅ Trạng thái: {user?.isActive ? 'Đang hoạt động' : 'Không hoạt động'}
        </Text>
        <Text style={styles.infoText}>
          🕒 Ngày tạo: {new Date(user?.createdAt || '').toLocaleString()}
        </Text>
        <Text style={styles.infoText}>
          🔁 Cập nhật: {new Date(user?.updatedAt || '').toLocaleString()}
        </Text>
      </View>

      <TouchableOpacity style={styles.button} onPress={handleSave}>
        <Text style={styles.buttonText}>💾 Lưu thông tin</Text>
      </TouchableOpacity>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: '#f4f6f8' },
  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, color: '#333' },
  imagePicker: { alignItems: 'center', marginBottom: 20 },
  avatar: { width: 120, height: 120, borderRadius: 60, marginBottom: 10 },
  avatarPlaceholder: {
    width: 120,
    height: 120,
    borderRadius: 60,
    backgroundColor: '#e0e0e0',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 10,
  },
  uploadText: { color: '#007bff', fontWeight: '500' },

  inputGroup: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 10,
    backgroundColor: '#fff',
    paddingHorizontal: 12,
    marginBottom: 15,
  },
  icon: { marginRight: 8 },
  input: { flex: 1, fontSize: 16, paddingVertical: 12 },

  infoBox: {
    padding: 15,
    backgroundColor: '#fff',
    borderRadius: 10,
    borderColor: '#eee',
    borderWidth: 1,
    marginBottom: 20,
  },
  infoText: { fontSize: 14, marginBottom: 5, color: '#444' },

  button: {
    backgroundColor: '#007bff',
    paddingVertical: 14,
    borderRadius: 10,
    alignItems: 'center',
  },
  buttonText: { color: '#fff', fontSize: 16, fontWeight: 'bold' },
});

export default ProfileScreen;
</file>

<file path="home/reviews.tsx">
import React, { useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, StyleSheet, ScrollView } from 'react-native';

const reviews = () => {
  const [rating, setRating] = useState(0);
  const [comment, setComment] = useState('');
  const sampleReviews = [{ ReviewID: 1, UserID: 1, ProductID: 1, Rating: 4, Comment: 'Sản phẩm tốt!', CommentDate: '2025-05-17' }];

  const handleSubmit = () => {
    // Logic thêm đánh giá (dữ liệu mẫu)
    console.log({ rating, comment });
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Đánh giá sản phẩm</Text>
      <TextInput style={styles.input} placeholder="Đánh giá (1-5)" keyboardType="numeric" onChangeText={(text) => setRating(parseInt(text) || 0)} />
      <TextInput style={styles.input} placeholder="Nhận xét" value={comment} onChangeText={setComment} multiline />
      <TouchableOpacity style={styles.button} onPress={handleSubmit}>
        <Text style={styles.buttonText}>Gửi đánh giá</Text>
      </TouchableOpacity>
      {sampleReviews.map((review) => (
        <View key={review.ReviewID} style={styles.reviewCard}>
          <Text>Đánh giá: {review.Rating}/5</Text>
          <Text>Nhận xét: {review.Comment}</Text>
          <Text>Ngày: {review.CommentDate}</Text>
        </View>
      ))}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10, backgroundColor: '#f0f2f5' },
  title: { fontSize: 24, fontWeight: '800', margin: 10, color: '#1a1a1a' },
  input: { borderWidth: 1, borderColor: '#ccc', borderRadius: 12, padding: 12, marginBottom: 15 },
  button: { backgroundColor: '#d4af37', padding: 12, borderRadius: 12, alignItems: 'center', marginBottom: 15 },
  buttonText: { color: '#fff', fontSize: 16, fontWeight: '600' },
  reviewCard: { backgroundColor: '#fff', padding: 10, marginBottom: 10, borderRadius: 10, elevation: 3 },
});

export default reviews;
</file>

<file path="home/wishlist.tsx">
import React, { useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView, Image } from 'react-native';
import { useAuth } from '../../store/useAuth';
import { router } from 'expo-router';

const wishlist = () => {
  const { user } = useAuth();
  const sampleWishlist = [{ WishlistID: 1, UserID: 1, ProductID: 1, Name: 'Áo Polo Nam', Price: '499.000 VNĐ', Image: 'https://media3.coolmate.me/cdn-cgi/image/width=672,height=990,quality=80,format=auto/uploads/January2024/AT.220.NAU.1.jpg' }];

  const navigateToProductDetail = (productId) => router.push({ pathname: '/productDetail', params: { productId } });

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Danh sách yêu thích</Text>
      {sampleWishlist.map((item) => (
        <TouchableOpacity key={item.WishlistID} style={styles.card} onPress={() => navigateToProductDetail(item.ProductID)}>
          <Image source={{ uri: item.Image }} style={styles.image} />
          <View style={styles.info}>
            <Text style={styles.name}>{item.Name}</Text>
            <Text style={styles.price}>{item.Price}</Text>
          </View>
        </TouchableOpacity>
      ))}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10, backgroundColor: '#f0f2f5' },
  title: { fontSize: 24, fontWeight: '800', margin: 10, color: '#1a1a1a' },
  card: { flexDirection: 'row', backgroundColor: '#fff', padding: 10, margin: 10, borderRadius: 15, elevation: 5 },
  image: { width: 100, height: 100, resizeMode: 'cover', borderRadius: 10 },
  info: { marginLeft: 10, justifyContent: 'center' },
  name: { fontSize: 16, fontWeight: '600', color: '#2c2c2c' },
  price: { fontSize: 14, color: '#c0392b', fontWeight: '700' },
});

export default wishlist;
</file>

<file path="_layout.tsx">
// app/_layout.tsx
import { Stack } from 'expo-router';
import { useEffect, useState } from 'react';
import { ActivityIndicator, View } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { ProductProvider } from '../store/useProducts';

export default function RootLayout() {
  const [checkingLogin, setCheckingLogin] = useState(true);
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  useEffect(() => {
    const checkLoginStatus = async () => {
      const loginStatus = await AsyncStorage.getItem('isLoggedIn');
      setIsLoggedIn(loginStatus === 'true');
      setCheckingLogin(false);
    };

    checkLoginStatus();
  }, []);

  if (checkingLogin) {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <ActivityIndicator size="large" color="#000" />
      </View>
    );
  }

  return (
    <ProductProvider>
      <Stack
        initialRouteName={isLoggedIn ? 'home' : 'index'}
        screenOptions={{
          headerShown: false,
        }}
      />
    </ProductProvider>
  );
}
</file>

<file path="forgot-password.tsx">
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { useState } from 'react';
import {
  ActivityIndicator,
  Alert,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from 'react-native';
import AxiosInstance from '../axiosInstance/AxiosInstance';
import { router } from 'expo-router';

export default function ForgotPasswordScreen() {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSendCode = async () => {
    if (email.trim() === '') {
      Alert.alert('Lỗi', 'Vui lòng nhập email');
      return;
    }

    setLoading(true);
    try {
      const response = await AxiosInstance().post('/users/forgot-password', { email });

      if (response.message === 'Mã xác thực đã được gửi đến email') {
        Alert.alert('Thành công', 'Vui lòng kiểm tra email để nhận mã xác nhận');
        router.push({ pathname: '/reset-password', params: { email } });
      } else {
        Alert.alert('Lỗi', response.message || 'Gửi mã thất bại');
      }
    } catch (error) {
      console.log('Error object:', error);
      Alert.alert('HEHE', 'Có đăng ký mail này đâu mà giử ');
    } finally {
      setLoading(false);
    }
  };

  const handleBack = () => {
    router.back();
  };

  return (
    <View style={styles.container}>
      <TouchableOpacity style={styles.backButton} onPress={handleBack}>
        <MaterialCommunityIcons name="arrow-left" size={24} color="#8B4513" />
      </TouchableOpacity>
      <Text style={styles.title}>Quên Mật Khẩu</Text>

      <View style={styles.inputWrapper}>
        <MaterialCommunityIcons
          name="email-outline"
          size={20}
          color="#8B4513"
          style={styles.icon}
        />
        <TextInput
          placeholder="Nhập email của bạn"
          keyboardType="email-address"
          autoCapitalize="none"
          style={styles.input}
          value={email}
          onChangeText={setEmail}
          placeholderTextColor="#999"
        />
      </View>

      <TouchableOpacity
        style={[styles.sendBtn, loading && styles.disabledBtn]}
        onPress={handleSendCode}
        disabled={loading}
        activeOpacity={0.8}
      >
        {loading ? (
          <ActivityIndicator color="#fff" style={{ marginRight: 8 }} />
        ) : (
          <MaterialCommunityIcons
            name="send"
            size={24}
            color="#fff"
            style={{ marginRight: 8 }}
          />
        )}
        <Text style={styles.sendText}>{loading ? 'Đang gửi...' : 'Gửi mã xác nhận'}</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 24,
    justifyContent: 'center',
    backgroundColor: '#fff',
  },
  backButton: {
    position: 'absolute',
    top: 40,
    left: 16,
  },
  title: {
    fontSize: 28,
    fontWeight: '700',
    color: '#8B4513',
    marginBottom: 40,
    textAlign: 'center',
  },
  inputWrapper: {
    flexDirection: 'row',
    backgroundColor: '#F5F5F5',
    borderRadius: 10,
    paddingHorizontal: 16,
    paddingVertical: 12,
    alignItems: 'center',
    marginBottom: 24,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  icon: {
    marginRight: 12,
  },
  input: {
    flex: 1,
    fontSize: 16,
    color: '#333',
  },
  sendBtn: {
    flexDirection: 'row',
    backgroundColor: '#8B4513',
    paddingVertical: 14,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#8B4513',
    shadowOffset: { width: 0, height: 6 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 7,
  },
  disabledBtn: {
    backgroundColor: '#A9A9A9',
  },
  sendText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
});
</file>

<file path="index.tsx">
import { router } from 'expo-router';
import React, { useEffect, useRef } from 'react';
import { Animated, Easing, StyleSheet, View } from 'react-native';

// Đường dẫn ảnh logo bạn cần thay đúng với đường dẫn ảnh của bạn
const logoImage = require('../assets/images/logo.png');

export default function SplashScreen() {
  const scaleAnim = useRef(new Animated.Value(0.8)).current;  // khởi đầu scale nhỏ hơn
  const opacityAnim = useRef(new Animated.Value(0)).current;  // khởi đầu mờ

  const colorAnim = useRef(new Animated.Value(0)).current;  // cho text đổi màu

  useEffect(() => {
    // Chuỗi animation cho logo: scale từ 0.8 -> 1.2 -> 1 và opacity từ 0->1
    Animated.sequence([
      Animated.parallel([
        Animated.timing(scaleAnim, {
          toValue: 1.2,
          duration: 1500,
          useNativeDriver: true,
          easing: Easing.out(Easing.ease),
        }),
        Animated.timing(opacityAnim, {
          toValue: 1,
          duration: 1500,
          useNativeDriver: true,
        }),
      ]),
      Animated.timing(scaleAnim, {
        toValue: 1,
        duration: 800,
        useNativeDriver: true,
        easing: Easing.out(Easing.ease),
      }),
    ]).start();

    // Animation đổi màu text lặp lại
    Animated.loop(
      Animated.sequence([
        Animated.timing(colorAnim, {
          toValue: 1,
          duration: 1500,
          useNativeDriver: false,
        }),
        Animated.timing(colorAnim, {
          toValue: 0,
          duration: 1500,
          useNativeDriver: false,
        }),
      ]),
    ).start();

    const timer = setTimeout(() => {
      router.replace('/login');
    }, 3000);

    return () => clearTimeout(timer);
  }, []);

  // Nội suy màu text từ trắng sang vàng rồi trở lại trắng
  const textColor = colorAnim.interpolate({
    inputRange: [0, 1],
    outputRange: ['#ffffff', '#ffd700'], // trắng -> vàng kim
  });

  return (
    <View style={styles.container}>
      <Animated.Image
        source={logoImage}
        style={[
          styles.logo,
          {
            transform: [{ scale: scaleAnim }],
            opacity: opacityAnim,
          },
        ]}
        resizeMode="contain"
      />
      <Animated.Text style={[styles.text, { color: textColor }]}>
        Chào mừng bạn đến với Shop!
      </Animated.Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
    justifyContent: 'center',
    alignItems: 'center',
  },
  logo: {
    width: 180,
    height: 180,
    marginBottom: 20,
  },
  text: {
    fontSize: 22,
    fontWeight: '600',
    letterSpacing: 1,
  },
});
</file>

<file path="login.tsx">
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { router } from 'expo-router';
import { useState } from 'react';
import { Alert, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';
import AxiosInstance from '../axiosInstance/AxiosInstance';
import { useAuth } from '../store/useAuth';

export default function LoginScreen() {
  const [isEmailLogin, setIsEmailLogin] = useState(true);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [phone, setPhone] = useState('');
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  const { login } = useAuth();

  const handleEmailLogin = async () => {
    if (email === '' || password === '') {
      Alert.alert('Lỗi', 'Vui lòng nhập đầy đủ email và mật khẩu');
      return;
    }

    setLoading(true);
    try {
      const response = await AxiosInstance().post('/users/login', {
        email,
        password,
      });

      if (response.message === 'Đăng nhập thành công') {
        await login(response.user);
        router.replace('/home');
      } else {
        Alert.alert('Lỗi', response.message || 'Đăng nhập thất bại');
      }
    } catch (error) {
      Alert.alert('Lỗi', 'Đăng nhập thất bại. Vui lòng kiểm tra lại email hoặc mật khẩu.');
    } finally {
      setLoading(false);
    }
  };

  const handlePhoneSubmit = async () => {
    if (phone === '') {
      Alert.alert('Lỗi', 'Vui lòng nhập số điện thoại');
      return;
    }

    const phoneRegex = /^(0|\+84)(3|5|7|8|9)[0-9]{8}$/;
    if (!phoneRegex.test(phone)) {
      Alert.alert('Lỗi', 'Số điện thoại không hợp lệ');
      return;
    }

    setLoading(true);
    try {
      const response = await AxiosInstance().post('/users/send-otp', {
        phone,
      });

      if (response.message === 'Mã OTP đã được gửi đến số điện thoại') {
        router.push({ pathname: '/OTPScreen', params: { phone } });
      } else {
        Alert.alert('Lỗi', response.message || 'Không thể gửi mã OTP');
      }
    } catch (error) {
      Alert.alert('Lỗi', 'Có lỗi xảy ra. Vui lòng thử lại.');
    } finally {
      setLoading(false);
    }
  };

  const handleSocialLogin = (platform) => {
    Alert.alert('Thông báo', `Đăng nhập bằng ${platform} đang được phát triển...`);
  };

  const goToRegister = () => {
    router.push('/register');
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Đăng nhập</Text>

      <View style={styles.toggleContainer}>
        <TouchableOpacity onPress={() => setIsEmailLogin(true)}>
          <Text style={[styles.toggleText, isEmailLogin && styles.toggleTextActive]}>Email</Text>
        </TouchableOpacity>
        <Text style={styles.toggleSeparator}> / </Text>
        <TouchableOpacity onPress={() => setIsEmailLogin(false)}>
          <Text style={[styles.toggleText, !isEmailLogin && styles.toggleTextActive]}>Số điện thoại</Text>
        </TouchableOpacity>
      </View>

      {isEmailLogin ? (
        <>
          <View style={styles.inputWrapper}>
            <TextInput
              placeholder="Email"
              value={email}
              onChangeText={setEmail}
              style={styles.input}
              placeholderTextColor="#999"
              keyboardType="email-address"
              autoCapitalize="none"
            />
          </View>
          <View style={styles.inputWrapper}>
            <TextInput
              placeholder="Password"
              value={password}
              onChangeText={setPassword}
              secureTextEntry={!showPassword}
              style={styles.input}
              placeholderTextColor="#999"
            />
            <TouchableOpacity onPress={() => setShowPassword(!showPassword)} style={styles.inputIcon}>
              <MaterialCommunityIcons
                name={showPassword ? 'eye-off-outline' : 'eye-outline'}
                size={20}
                color="#999"
              />
            </TouchableOpacity>
          </View>
          <TouchableOpacity onPress={() => router.push('/forgot-password')} style={styles.forgotPasswordBtn}>
            <Text style={styles.forgotPasswordText}>Quên mật khẩu?</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.loginBtn, loading && styles.disabledBtn]}
            onPress={handleEmailLogin}
            disabled={loading}
            activeOpacity={0.8}
          >
            <Text style={styles.loginText}>{loading ? 'Đang đăng nhập...' : 'Sign In'}</Text>
          </TouchableOpacity>
        </>
      ) : (
        <>
          <View style={styles.inputWrapper}>
            <TextInput
              placeholder="Số điện thoại"
              value={phone}
              onChangeText={setPhone}
              style={styles.input}
              placeholderTextColor="#999"
              keyboardType="phone-pad"
              autoCapitalize="none"
            />
          </View>
          <TouchableOpacity
            style={[styles.loginBtn, loading && styles.disabledBtn]}
            onPress={handlePhoneSubmit}
            disabled={loading}
            activeOpacity={0.8}
          >
            <Text style={styles.loginText}>{loading ? 'Đang xử lý...' : 'Tiếp tục'}</Text>
          </TouchableOpacity>
        </>
      )}

      <Text style={styles.dividerText}>Hoặc đăng nhập bằng</Text>

      <View style={styles.socialButtonsContainer}>
        <TouchableOpacity style={styles.socialBtn} onPress={() => handleSocialLogin('Apple')}>
          <MaterialCommunityIcons name="apple" size={24} color="#000" />
        </TouchableOpacity>
        <TouchableOpacity style={styles.socialBtn} onPress={() => handleSocialLogin('Google')}>
          <MaterialCommunityIcons name="google" size={24} color="#DB4437" />
        </TouchableOpacity>
        <TouchableOpacity style={styles.socialBtn} onPress={() => handleSocialLogin('Facebook')}>
          <MaterialCommunityIcons name="facebook" size={24} color="#3B5998" />
        </TouchableOpacity>
      </View>

      <TouchableOpacity onPress={goToRegister} style={styles.registerBtn}>
        <Text style={styles.registerText}>
          Bạn chưa có tài khoản? <Text style={styles.registerLink}>Sign Up</Text>
        </Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 24,
    justifyContent: 'center',
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    textAlign: 'center',
    marginBottom: 20,
  },
  toggleContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginBottom: 20,
  },
  toggleText: {
    fontSize: 16,
    color: '#666',
  },
  toggleTextActive: {
    color: '#8B4513',
    fontWeight: '600',
    textDecorationLine: 'underline',
  },
  toggleSeparator: {
    fontSize: 16,
    color: '#666',
    marginHorizontal: 5,
  },
  inputWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F5F5F5',
    borderRadius: 10,
    paddingHorizontal: 16,
    paddingVertical: 12,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  input: {
    flex: 1,
    fontSize: 16,
    color: '#333',
  },
  inputIcon: {
    marginLeft: 10,
  },
  forgotPasswordBtn: {
    alignSelf: 'flex-end',
    marginBottom: 20,
  },
  forgotPasswordText: {
    color: '#666',
    fontSize: 14,
  },
  loginBtn: {
    backgroundColor: '#8B4513',
    paddingVertical: 14,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 20,
  },
  disabledBtn: {
    backgroundColor: '#A9A9A9',
  },
  loginText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
  dividerText: {
    textAlign: 'center',
    color: '#666',
    fontSize: 14,
    marginVertical: 20,
  },
  socialButtonsContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginBottom: 30,
  },
  socialBtn: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: '#F5F5F5',
    justifyContent: 'center',
    alignItems: 'center',
    marginHorizontal: 10,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  registerBtn: {
    alignItems: 'center',
  },
  registerText: {
    color: '#666',
    fontSize: 14,
  },
  registerLink: {
    color: '#000',
    textDecorationLine: 'underline',
  },
});
</file>

<file path="OTPScreen.tsx">
import { router, useLocalSearchParams } from 'expo-router';
import { useState } from 'react';
import { Alert, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';
import AxiosInstance from '../axiosInstance/AxiosInstance';
import { useAuth } from '../store/useAuth';

export default function OTPScreen() {
  const [otp, setOtp] = useState('');
  const [loading, setLoading] = useState(false);
  const { phone } = useLocalSearchParams();
  const { login } = useAuth();

  const handleVerifyOTP = async () => {
    if (otp === '') {
      Alert.alert('Lỗi', 'Vui lòng nhập mã OTP');
      return;
    }

    if (otp.length !== 6) {
      Alert.alert('Lỗi', 'Mã OTP phải có 6 chữ số');
      return;
    }

    setLoading(true);
    try {
      const response = await AxiosInstance().post('/users/login', {
        phone,
        otp,
      });

      if (response.message === 'Đăng nhập thành công') {
        await login(response.user);
        router.replace('/home');
      } else {
        Alert.alert('Lỗi', response.message || 'Xác minh OTP thất bại');
      }
    } catch (error) {
      Alert.alert('Lỗi', 'Xác minh OTP thất bại. Vui lòng kiểm tra lại mã OTP.');
    } finally {
      setLoading(false);
    }
  };

  const handleResendOTP = async () => {
    setLoading(true);
    try {
      const response = await AxiosInstance().post('/users/send-otp', {
        phone,
      });

      if (response.message === 'Mã OTP đã được gửi đến số điện thoại') {
        Alert.alert('Thành công', 'Mã OTP mới đã được gửi');
      } else {
        Alert.alert('Lỗi', response.message || 'Không thể gửi mã OTP');
      }
    } catch (error) {
      Alert.alert('Lỗi', 'Có lỗi xảy ra. Vui lòng thử lại.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Xác minh OTP</Text>
      <Text style={styles.subtitle}>
        Nhập mã OTP được gửi đến số điện thoại {phone}
      </Text>

      <View style={styles.inputWrapper}>
        <TextInput
          placeholder="Mã OTP"
          value={otp}
          onChangeText={setOtp}
          style={styles.input}
          placeholderTextColor="#999"
          keyboardType="numeric"
          maxLength={6}
        />
      </View>

      <TouchableOpacity
        style={[styles.verifyBtn, loading && styles.disabledBtn]}
        onPress={handleVerifyOTP}
        disabled={loading}
        activeOpacity={0.8}
      >
        <Text style={styles.verifyText}>{loading ? 'Đang xác minh...' : 'Xác minh'}</Text>
      </TouchableOpacity>

      <TouchableOpacity onPress={handleResendOTP} style={styles.resendBtn}>
        <Text style={styles.resendText}>Gửi lại mã OTP</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 24,
    justifyContent: 'center',
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    textAlign: 'center',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    marginBottom: 40,
  },
  inputWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F5F5F5',
    borderRadius: 10,
    paddingHorizontal: 16,
    paddingVertical: 12,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  input: {
    flex: 1,
    fontSize: 16,
    color: '#333',
  },
  verifyBtn: {
    backgroundColor: '#8B4513',
    paddingVertical: 14,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 20,
  },
  disabledBtn: {
    backgroundColor: '#A9A9A9',
  },
  verifyText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
  resendBtn: {
    alignItems: 'center',
  },
  resendText: {
    color: '#666',
    fontSize: 14,
    textDecorationLine: 'underline',
  },
});
</file>

<file path="productDetail.tsx">
import React, { useState } from 'react';
import { View, Text, Image, TouchableOpacity, StyleSheet, ScrollView, ActivityIndicator } from 'react-native';
import { useLocalSearchParams, router } from 'expo-router';
import { useProducts } from '../store/useProducts';
import Cart from './home/cart';

const ProductDetail = () => {
  const { productId } = useLocalSearchParams();
  const { getProductById, addToCart, loading, error } = useProducts();
  const [selectedVariant, setSelectedVariant] = useState({ Size: 'M', Color: 'Nâu', Stock: 50 });

  const product = getProductById(Number(productId));
  const variants = [
    { VariantID: 1, ProductID: Number(productId), Size: 'M', Color: 'Nâu', Stock: 50 },
    { VariantID: 2, Size: 'L', Color: 'Đen', Stock: 30 },
  ];

  const handleAddToCart = () => {
    if (product) {
      addToCart({ ...product, ...selectedVariant }, 1);
      router.push('./home/cart');
    }
  };

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#d4af37" />
      </View>
    );
  }

  if (error || !product) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error || 'Sản phẩm không tồn tại'}</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
        <Text style={styles.backText}>← Quay lại</Text>
      </TouchableOpacity>
      <Image source={{ uri: product.Image }} style={styles.image} />
      <View style={styles.details}>
        <Text style={styles.name}>{product.Name}</Text>
        <Text style={styles.price}>{product.Price}</Text>
        <Text style={styles.description}>{product.Description}</Text>
        <Text style={styles.section}>Chọn biến thể:</Text>
        {variants.map((variant) => (
          <TouchableOpacity
            key={variant.VariantID}
            style={[
              styles.variantCard,
              selectedVariant.VariantID === variant.VariantID && styles.selectedVariant,
            ]}
            onPress={() => setSelectedVariant(variant)}
          >
            <Text>Size: {variant.Size}, Màu: {variant.Color}, Tồn: {variant.Stock}</Text>
          </TouchableOpacity>
        ))}
        <TouchableOpacity style={styles.button} onPress={handleAddToCart}>
          <Text style={styles.buttonText}>Thêm vào giỏ</Text>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10, backgroundColor: '#f0f2f5' },
  image: { width: '100%', height: 300, resizeMode: 'cover', borderRadius: 15 },
  details: { padding: 10 },
  name: { fontSize: 24, fontWeight: '800', color: '#1a1a1a' },
  price: { fontSize: 20, color: '#c0392b', fontWeight: '700', marginVertical: 5 },
  description: { fontSize: 16, color: '#2c2c2c', marginBottom: 15 },
  section: { fontSize: 18, fontWeight: '600', marginTop: 15 },
  variantCard: { backgroundColor: '#fff', padding: 10, marginBottom: 10, borderRadius: 10, elevation: 3 },
  selectedVariant: { borderWidth: 2, borderColor: '#d4af37' },
  button: { backgroundColor: '#d4af37', padding: 12, borderRadius: 12, alignItems: 'center' },
  buttonText: { color: '#fff', fontSize: 16, fontWeight: '600' },
  backButton: {
    position: 'absolute',
    top: 40,
    left: 15,
    backgroundColor: 'rgba(0,0,0,0.5)',
    paddingVertical: 6,
    paddingHorizontal: 12,
    borderRadius: 20,
    zIndex: 10,
  },
  backText: { color: '#fff', fontSize: 16 },
  errorText: { fontSize: 16, color: '#c0392b', textAlign: 'center', marginTop: 20 },
});

export default ProductDetail;
</file>

<file path="products.tsx">
import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView, ActivityIndicator } from 'react-native';
import { useLocalSearchParams, router } from 'expo-router';
import { MaterialIcons } from '@expo/vector-icons';
import { useProducts } from '../store/useProducts';
import ProductCard from './components/ProductCard';

const Products = () => {
  const { categoryId } = useLocalSearchParams();
  const { categories, getProductsByCategory, loading, error } = useProducts();

  const products = categoryId ? getProductsByCategory(Number(categoryId)) : [];

  const navigateToProductDetail = (productId: number) =>
    router.push({ pathname: './/productDetail', params: { productId: productId.toString() } });

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#d4af37" />
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>
        <MaterialIcons name="arrow-back" size={24} color="#000" />
        <Text style={styles.backText}>Quay lại</Text>
      </TouchableOpacity>

      <Text style={styles.title}>Sản phẩm</Text>

      <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.categoryContainer}>
        {categories.map((cat) => (
          <TouchableOpacity
            key={cat.CategoryID}
            style={styles.categoryCard}
            onPress={() => router.push({ pathname: './products', params: { categoryId: cat.CategoryID.toString() } })}
          >
            <Text style={styles.categoryName}>{cat.Name}</Text>
          </TouchableOpacity>
        ))}
      </ScrollView>

      {products.length === 0 ? (
        <Text style={styles.emptyText}>Không có sản phẩm trong danh mục này</Text>
      ) : (
        products.map((product) => (
          <ProductCard
            key={product.ProductID}
            product={product}
            onPress={navigateToProductDetail}
          />
        ))
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10, backgroundColor: '#f0f2f5', marginTop: 30 },
  backButton: { flexDirection: 'row', alignItems: 'center', marginBottom: 5 },
  backText: { marginLeft: 5, fontSize: 16, color: '#000' },
  title: { fontSize: 24, fontWeight: '800', margin: 10, color: '#1a1a1a' },
  categoryContainer: { flexDirection: 'row', paddingVertical: 10 },
  categoryCard: { padding: 10, marginRight: 10, backgroundColor: '#2c2c2c', borderRadius: 10 },
  categoryName: { color: '#d4af37', fontSize: 16 },
  emptyText: { fontSize: 16, color: '#2c2c2c', textAlign: 'center', marginTop: 20 },
  errorText: { fontSize: 16, color: '#c0392b', textAlign: 'center', marginTop: 20 },
});

export default Products;
</file>

<file path="register.tsx">
import { View, Text, TextInput, TouchableOpacity, StyleSheet, Alert, KeyboardAvoidingView, Platform } from 'react-native';
import { useState } from 'react';
import { router } from 'expo-router';
import { FontAwesome5, MaterialIcons } from '@expo/vector-icons';
import AxiosInstance from '../axiosInstance/AxiosInstance';

export default function RegisterScreen() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const handleRegister = async () => {
    if (!username || !password || !confirmPassword || !email || !phone) {
      Alert.alert('Lỗi', 'Vui lòng nhập đầy đủ thông tin');
      return;
    }

    if (password !== confirmPassword) {
      Alert.alert('Lỗi', 'Mật khẩu không khớp');
      return;
    }

    const phoneRegex = /^(0|\+84)(3|5|7|8|9)[0-9]{8}$/;
    if (!phoneRegex.test(phone)) {
      Alert.alert('Lỗi', 'Số điện thoại không hợp lệ');
      return;
    }

    const payload = {
      name: username,
      email,
      password,
      phone,
    };

    console.log('Dữ liệu gửi đi:', payload);

    try {
      const res = await AxiosInstance().post('/users/register', payload);
      console.log('Dữ liệu nhận về:', res);

      if (res && res._id) {
        Alert.alert('Thành công', `${res.name} đã đăng ký thành công!`);
        router.replace('/login');
      } else {
        Alert.alert('Lỗi', 'Đăng ký thất bại, vui lòng thử lại');
      }
    } catch (error: any) {
      const message =
        error.response?.data?.message ||
        error.message ||
        'Có lỗi xảy ra, vui lòng thử lại sau';
      Alert.alert('Lỗi', message);
    }
  };

  const renderInput = (iconName, iconLib, placeholder, value, onChangeText, secure = false, showSecure = false, toggleShow = null, keyboardType = 'default') => {
    const IconComponent = iconLib === 'FontAwesome5' ? FontAwesome5 : MaterialIcons;
    return (
      <View style={styles.inputWrapper}>
        <IconComponent name={iconName} size={20} color="#8B4513" style={styles.icon} />
        <TextInput
          placeholder={placeholder}
          value={value}
          onChangeText={onChangeText}
          style={styles.input}
          placeholderTextColor="#999"
          secureTextEntry={secure && !showSecure}
          keyboardType={keyboardType}
          autoCapitalize="none"
        />
        {secure && (
          <TouchableOpacity onPress={toggleShow} style={styles.eyeIcon}>
            <MaterialIcons
              name={showSecure ? 'visibility' : 'visibility-off'}
              size={20}
              color="#999"
            />
          </TouchableOpacity>
        )}
      </View>
    );
  };

  const handleBack = () => {
    router.back();
  };

  return (
    <KeyboardAvoidingView
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      keyboardVerticalOffset={Platform.OS === 'ios' ? 40 : 0}
    >
      <TouchableOpacity style={styles.backButton} onPress={handleBack}>
        <MaterialIcons name="arrow-back" size={24} color="#8B4513" />
      </TouchableOpacity>
      <Text style={styles.title}>Đăng Ký Tài Khoản</Text>

      {renderInput('user', 'FontAwesome5', 'Tài khoản', username, setUsername)}
      {renderInput('lock', 'FontAwesome5', 'Mật khẩu', password, setPassword, true, showPassword, () => setShowPassword(!showPassword))}
      {renderInput('lock', 'FontAwesome5', 'Nhập lại mật khẩu', confirmPassword, setConfirmPassword, true, showConfirmPassword, () => setShowConfirmPassword(!showConfirmPassword))}
      {renderInput('email', 'MaterialIcons', 'Email', email, setEmail, false, false, null, 'email-address')}
      {renderInput('phone', 'FontAwesome5', 'Số điện thoại', phone, setPhone, false, false, null, 'phone-pad')}

      <TouchableOpacity
        style={styles.button}
        onPress={handleRegister}
        activeOpacity={0.7}
      >
        <Text style={styles.buttonText}>Đăng ký</Text>
      </TouchableOpacity>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    paddingHorizontal: 24,
    justifyContent: 'center',
  },
  backButton: {
    position: 'absolute',
    top: 40,
    left: 16,
  },
  title: {
    fontSize: 28,
    fontWeight: '700',
    color: '#8B4513',
    marginBottom: 40,
    textAlign: 'center',
  },
  inputWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F5F5F5',
    borderRadius: 10,
    paddingHorizontal: 16,
    paddingVertical: 12,
    marginBottom: 24,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  icon: {
    marginRight: 12,
  },
  input: {
    flex: 1,
    fontSize: 16,
    color: '#333',
  },
  eyeIcon: {
    marginLeft: 10,
  },
  button: {
    backgroundColor: '#8B4513',
    borderRadius: 25,
    paddingVertical: 14,
    alignItems: 'center',
    shadowColor: '#8B4513',
    shadowOffset: { width: 0, height: 6 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 7,
  },
  buttonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
});
</file>

<file path="reset-password.tsx">
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { StyleSheet, Text, TextInput, TouchableOpacity, View, Alert, ActivityIndicator } from 'react-native';
import React, { useState, useEffect } from 'react';
import AxiosInstance from '../axiosInstance/AxiosInstance';
import { router, useLocalSearchParams } from 'expo-router';

const ResetPasswordScreen = () => {
  const { email: initialEmail } = useLocalSearchParams();
  const [email, setEmail] = useState(initialEmail || '');
  const [code, setCode] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (initialEmail) {
      setEmail(initialEmail);
    }
  }, [initialEmail]);

  const handleResetPassword = async () => {
    if (!email || !code || !newPassword) {
      Alert.alert('Lỗi', 'Vui lòng nhập đầy đủ thông tin');
      return;
    }

    setLoading(true);
    try {
      const response = await AxiosInstance().post('/users/reset-password', {
        email,
        code,
        newPassword,
      });

      if (response.message === 'Đổi mật khẩu thành công') {
        Alert.alert('Thành công', 'Mật khẩu đã được thay đổi. Vui lòng đăng nhập lại.');
        router.push('/login');
      } else {
        Alert.alert('Lỗi', response.message || 'Đổi mật khẩu thất bại');
      }
    } catch (error) {
      console.log('Reset Password Error:', error);
      Alert.alert('Lỗi', 'Có lỗi xảy ra, vui lòng thử lại sau');
    } finally {
      setLoading(false);
    }
  };

  const handleBack = () => {
    router.back();
  };

  return (
    <View style={styles.container}>
      <TouchableOpacity style={styles.backButton} onPress={handleBack}>
        <MaterialCommunityIcons name="arrow-left" size={24} color="#8B4513" />
      </TouchableOpacity>
      <Text style={styles.title}>Đặt Lại Mật Khẩu</Text>

      <TextInput
        placeholder="Email"
        keyboardType="email-address"
        style={styles.input}
        value={email}
        onChangeText={setEmail}
        editable={!!initialEmail}
      />

      <TextInput
        placeholder="Mã xác thực"
        style={styles.input}
        value={code}
        onChangeText={setCode}
      />

      <TextInput
        placeholder="Mật khẩu mới"
        secureTextEntry
        style={styles.input}
        value={newPassword}
        onChangeText={setNewPassword}
      />

      <TouchableOpacity
        style={[styles.button, loading && styles.disabledBtn]}
        onPress={handleResetPassword}
        disabled={loading}
      >
        {loading ? (
          <ActivityIndicator color="#fff" />
        ) : (
          <Text style={styles.buttonText}>Đổi mật khẩu</Text>
        )}
      </TouchableOpacity>
    </View>
  );
};

export default ResetPasswordScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 24,
    justifyContent: 'center',
    backgroundColor: '#fff',
  },
  backButton: {
    position: 'absolute',
    top: 40,
    left: 16,
  },
  title: {
    fontSize: 28,
    fontWeight: '700',
    color: '#8B4513',
    marginBottom: 40,
    textAlign: 'center',
  },
  input: {
    backgroundColor: '#F5F5F5',
    borderRadius: 10,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    marginBottom: 24,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  button: {
    backgroundColor: '#8B4513',
    borderRadius: 25,
    paddingVertical: 14,
    alignItems: 'center',
    shadowColor: '#8B4513',
    shadowOffset: { width: 0, height: 6 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 7,
  },
  disabledBtn: {
    backgroundColor: '#A9A9A9',
  },
  buttonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
});
</file>

</files>
